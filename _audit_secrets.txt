./ops-lock-test/.github/workflows/ci.yml:15:          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
./compose.health.overlay.yml:161:      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-CHANGE_ME_POSTGRES_PASSWORD}@duri-postgres:5432/postgres?sslmode=disable
./compose.health.overlay.yml:184:      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD:-CHANGE_ME_GRAFANA_PASSWORD}"
./activate_learning_systems.py:277:            except KeyboardInterrupt:
./activate_learning_systems.py:316:        except KeyboardInterrupt:
./memory_types.py:67:        key_raw = v.strip()
./memory_types.py:70:        key_up = key_raw.upper()
./memory_types.py:71:        if key_up in MemoryType.__members__:
./memory_types.py:72:            return MemoryType[key_up]
./memory_types.py:75:        key_low = key_raw.lower()
./memory_types.py:76:        if key_low in ALIASES:
./memory_types.py:77:            return MemoryType(ALIASES[key_low])
./memory_types.py:81:            return MemoryType(key_up)
./restart_instructions.md:28:PYTHONPATH=/home/duri/DuRiWorkspace DB_HOST=localhost DB_PASSWORD=duri123 DB_USER=duri DB_NAME=duri_db python3 -m uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
./restart_instructions.md:105:PYTHONPATH=/home/duri/DuRiWorkspace DB_HOST=localhost DB_PASSWORD=duri123 DB_USER=duri DB_NAME=duri_db python3 -m uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
./duri_core_node/performance_optimizer.py:47:            cache_key = self._generate_cache_key(user_input, duri_response, metadata)
./duri_core_node/performance_optimizer.py:48:            cached_result = self._get_from_cache(cache_key)
./duri_core_node/performance_optimizer.py:52:                logger.info(f"⚡ 캐시 히트: {cache_key[:20]}...")
./duri_core_node/performance_optimizer.py:63:            self._cache_result(cache_key, result)
./duri_core_node/performance_optimizer.py:76:    def _generate_cache_key(
./duri_core_node/performance_optimizer.py:80:        content = f"{user_input}:{duri_response}:{json.dumps(metadata, sort_keys=True)}"
./duri_core_node/performance_optimizer.py:83:    def _get_from_cache(self, cache_key: str) -> Optional[Dict[str, Any]]:
./duri_core_node/performance_optimizer.py:85:        if cache_key in self.cache:
./duri_core_node/performance_optimizer.py:86:            cached_item = self.cache[cache_key]
./duri_core_node/performance_optimizer.py:91:                del self.cache[cache_key]
./duri_core_node/performance_optimizer.py:94:    def _cache_result(self, cache_key: str, result: Dict[str, Any]):
./duri_core_node/performance_optimizer.py:96:        self.cache[cache_key] = {"data": result, "timestamp": time.time()}
./duri_core_node/performance_optimizer.py:101:            oldest_key = min(
./duri_core_node/performance_optimizer.py:102:                self.cache.keys(), key=lambda k: self.cache[k]["timestamp"]
./duri_core_node/performance_optimizer.py:104:            del self.cache[oldest_key]
./duri_core_node/performance_optimizer.py:263:            "cache_keys": list(self.cache.keys())[:10],  # 상위 10개만
./duri_core_node/enhanced_emotion_filter.py:87:        self.emotion_keywords = {
./duri_core_node/enhanced_emotion_filter.py:89:                "keywords": [
./duri_core_node/enhanced_emotion_filter.py:103:                "keywords": ["화나", "짜증", "분노", "열받", "빡치", "짜증", "불만"],
./duri_core_node/enhanced_emotion_filter.py:108:                "keywords": [
./duri_core_node/enhanced_emotion_filter.py:121:                "keywords": ["슬프", "우울", "속상", "실망", "절망", "외로"],
./duri_core_node/enhanced_emotion_filter.py:126:                "keywords": ["놀라", "깜짝", "예상", "갑자기", "뜻밖"],
./duri_core_node/enhanced_emotion_filter.py:131:                "keywords": ["역겨", "싫어", "혐오", "불쾌", "거부"],
./duri_core_node/enhanced_emotion_filter.py:136:                "keywords": ["믿어", "신뢰", "확신", "안전", "보장"],
./duri_core_node/enhanced_emotion_filter.py:141:                "keywords": ["기대", "희망", "궁금", "궁금해", "알고싶"],
./duri_core_node/enhanced_emotion_filter.py:181:        primary_emotion = max(emotion_scores.items(), key=lambda x: x[1])
./duri_core_node/enhanced_emotion_filter.py:227:        for emotion, config in self.emotion_keywords.items():
./duri_core_node/enhanced_emotion_filter.py:231:            for keyword in config["keywords"]:
./duri_core_node/enhanced_emotion_filter.py:232:                if keyword in text_lower:
./duri_core_node/enhanced_emotion_filter.py:251:        if emotion in self.emotion_keywords:
./duri_core_node/enhanced_emotion_filter.py:252:            config = self.emotion_keywords[emotion]
./duri_core_node/enhanced_emotion_filter.py:255:            keyword_count = sum(
./duri_core_node/enhanced_emotion_filter.py:256:                1 for keyword in config["keywords"] if keyword in text_lower
./duri_core_node/enhanced_emotion_filter.py:258:            intensity_score += keyword_count * 0.1
./duri_core_node/enhanced_emotion_filter.py:293:        sorted_scores = sorted(emotion_scores.items(), key=lambda x: x[1], reverse=True)
./duri_core_node/enhanced_emotion_filter.py:332:        if emotion in self.emotion_keywords:
./duri_core_node/enhanced_emotion_filter.py:333:            bias_risk = self.emotion_keywords[emotion]["bias_risk"]
./duri_core_node/automation_pipeline.py:358:                id INTEGER PRIMARY KEY AUTOINCREMENT,
./duri_core_node/automation_pipeline.py:373:                id INTEGER PRIMARY KEY AUTOINCREMENT,
./duri_core_node/automation_pipeline.py:389:                id INTEGER PRIMARY KEY AUTOINCREMENT,
./scripts/rotate_backups.sh:110:    local week_key
./scripts/rotate_backups.sh:111:    week_key="$(date -d @"$ts" +%G-W%V)"  # e.g., 2025-W33
./scripts/rotate_backups.sh:115:      [[ -n "${keepmap[$week_key]:-}" ]] || keepmap["$week_key"]="$f"
./scripts/rotate_backups.sh:122:    local month_key
./scripts/rotate_backups.sh:123:    month_key="$(date -d @"$ts" +%Y-%m)"  # e.g., 2025-08
./scripts/rotate_backups.sh:124:    [[ -n "${keepmap[$month_key]:-}" ]] || keepmap["$month_key"]="$f"
./scripts/day81_85_upgrade_plan.sh:163:kubectl create secret generic duri-hmac-key -n $NAMESPACE \
./scripts/day81_85_upgrade_plan.sh:164:  --from-literal=hmac-key=$(openssl rand -hex 32) \
./scripts/day81_85_upgrade_plan.sh:178:                "name": "DURI_HMAC_KEY",
./scripts/day81_85_upgrade_plan.sh:180:                  "secretKeyRef": {
./scripts/day81_85_upgrade_plan.sh:181:                    "name": "duri-hmac-key",
./scripts/day81_85_upgrade_plan.sh:182:                    "key": "hmac-key"
./scripts/day81_85_upgrade_plan.sh:187:                "name": "DURI_HMAC_KEY_DUAL_VERIFY",
./scripts/day81_85_upgrade_plan.sh:200:echo "   kubectl delete secret duri-hmac-key-old -n $NAMESPACE"
./scripts/day81_85_upgrade_plan.sh:361:            - name: AWS_ACCESS_KEY_ID
./scripts/day81_85_upgrade_plan.sh:363:                secretKeyRef:
./scripts/day81_85_upgrade_plan.sh:365:                  key: access-key-id
./scripts/day81_85_upgrade_plan.sh:366:            - name: AWS_SECRET_ACCESS_KEY
./scripts/day81_85_upgrade_plan.sh:368:                secretKeyRef:
./scripts/day81_85_upgrade_plan.sh:370:                  key: secret-access-key
./scripts/metrics/compute_metrics.py:71:        by_q[q].sort(key=lambda x: x[0])
./scripts/metrics/metrics_timeseries.py:178:    rows.sort(key=lambda r: r["epoch"])
./scripts/metrics/metrics_timeseries.py:216:    for key, ma_key, sd_key, z_key in [
./scripts/metrics/metrics_timeseries.py:221:            rows[-1].get(ma_key) is not None
./scripts/metrics/metrics_timeseries.py:222:            and rows[-1].get(sd_key) not in (None, 0)
./scripts/metrics/metrics_timeseries.py:223:            and rows[-1].get(key) is not None
./scripts/metrics/metrics_timeseries.py:225:            rows[-1][z_key] = (rows[-1][key] - rows[-1][ma_key]) / rows[-1][sd_key]
./scripts/metrics/validate_prom.sh:170:    # key="value" 또는 key="" 형태
./scripts/metrics/validate_prom.sh:174:    if (k in seen){ printf("❌ duplicate label key: %s\n", k) > "/dev/stderr"; return 1 }
./scripts/bench_guard.py:46:missing = [k for k in bm_base.keys() if k not in bm_now]
./scripts/cd_pipeline_snippets.sh:154:  GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
./scripts/cd_pipeline_snippets.sh:155:  GRAFANA_TOKEN: ${{ secrets.GRAFANA_TOKEN }}
./scripts/cd_pipeline_snippets.sh:156:  DASHBOARD_ID: ${{ secrets.DASHBOARD_ID }}
./scripts/cd_pipeline_snippets.sh:172:        echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
./scripts/cd_pipeline_snippets.sh:198:echo "   1. GitHub Secrets 설정: GRAFANA_URL, GRAFANA_TOKEN, DASHBOARD_ID, KUBECONFIG"
./scripts/ops_alert.sh:4:source "$SRC_DIR/../var/secrets/alerts.env" 2>/dev/null || true
./scripts/rag_search_enhanced.sh:29:    exts=$(awk -F'\t' -v key="$q" '$1==key {print $2}' "$SYNONYMS_TSV" | tr '\n' '|' | sed 's/|$//')
./scripts/hdd_refactor/01_dedupe_plan.sh:16:     key=$1"\t"$2
./scripts/hdd_refactor/01_dedupe_plan.sh:17:     if(key!=prev){ # 새 그룹
./scripts/hdd_refactor/01_dedupe_plan.sh:19:        canon=$3; prev=key; next
./scripts/final_preflight_check.sh:44:# 5. aws-credentials 시크릿 key 이름 재확인
./scripts/final_preflight_check.sh:45:echo "5️⃣ aws-credentials 시크릿 key 이름 재확인..."
./scripts/final_preflight_check.sh:46:kubectl get secret aws-credentials -n $NAMESPACE -o jsonpath='{.data}' | jq -r 'keys[]' || {
./scripts/final_preflight_check.sh:49:    echo "   kubectl create secret generic aws-credentials -n $NAMESPACE \\"
./scripts/final_preflight_check.sh:50:    echo "     --from-literal=access-key-id=your-access-key \\"
./scripts/final_preflight_check.sh:51:    echo "     --from-literal=secret-access-key=your-secret-key"
./scripts/final_preflight_check.sh:62:kubectl get deployment duri-app -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[0].env[?(@.name=="DURI_HMAC_KEY_DUAL_VERIFY")].value}' || {
./scripts/go_live_check.sh:27:    kubectl apply -f k8s/alertmanager-secrets.yaml --dry-run=client
./scripts/go_live_check.sh:28:    echo "✅ Alertmanager Secret 적용 준비 완료"
./scripts/go_live_check.sh:134:echo "   kubectl create secret generic duri-hmac-key -n duri-prod --from-literal=hmac-key=\$(openssl rand -hex 32)"
./scripts/go_live_check.sh:145:echo "                   \"name\": \"DURI_HMAC_KEY\","
./scripts/go_live_check.sh:147:echo "                     \"secretKeyRef\": {"
./scripts/go_live_check.sh:148:echo "                       \"name\": \"duri-hmac-key\","
./scripts/go_live_check.sh:149:echo "                       \"key\": \"hmac-key\""
./scripts/auto-backup.py:52:            logger.info(f"사용 가능한 수준: {', '.join(self.backup_scripts.keys())}")
./scripts/common/broadcast_emotion_if_changed.py:62:        json.dump(data, f, indent=2, sort_keys=True)
./scripts/common/broadcast_emotion_if_changed.py:137:    if json.dumps(current_delta, sort_keys=True) != json.dumps(
./scripts/common/broadcast_emotion_if_changed.py:138:        last_sent, sort_keys=True
./scripts/common/compute_importance_from_delta.py:26:        for emotion in current.keys()
./scripts/core/phase11/enhanced_orchestrator.py:551:    except KeyboardInterrupt:
./scripts/core/visualize_bias_history.py:270:            by_label.keys(),
./scripts/core/visualize_bias_history.py:596:    sample_data.sort(key=lambda x: x["timestamp"])
./scripts/core/visualize_patterns.py:66:        for key, data in self.stats_data.items():
./scripts/core/visualize_patterns.py:78:                key = f"{emotion}_{action}"
./scripts/core/visualize_patterns.py:79:                if key in self.stats_data:
./scripts/core/visualize_patterns.py:80:                    data = self.stats_data[key]
./scripts/core/visualize_patterns.py:212:        for key, data in self.stats_data.items():
./scripts/core/visualize_patterns.py:214:                success_rates.append((key, data["success_rate"] * 100))
./scripts/core/visualize_patterns.py:217:            success_rates.sort(key=lambda x: x[1], reverse=True)
./scripts/core/test_api.py:334:    except KeyboardInterrupt:
./scripts/rag_gate.sh:18:  while IFS='=' read -r key val; do
./scripts/rag_gate.sh:19:    [[ -z "$key" || "$key" =~ ^# ]] && continue
./scripts/rag_gate.sh:23:    if [[ -z "${!key+x}" && -n "$val" ]]; then
./scripts/rag_gate.sh:24:      export "$key"="$val"
./scripts/ci_integrity_check.sh:11:DURI_HMAC_KEY=${DURI_HMAC_KEY:-""}
./scripts/ci_integrity_check.sh:16:echo "   - DURI_HMAC_KEY: ${DURI_HMAC_KEY:+설정됨}"
./scripts/run_verification_sweep.sh:46:    for key in ['pou_success_rate', 'safety_score_avg', 'error_rate_avg', 'latency_ms_avg']:
./scripts/run_verification_sweep.sh:47:        values = [r.get('metrics', {}).get(key, 0) for r in results if r.get('metrics', {}).get(key) is not None]
./scripts/run_verification_sweep.sh:49:            metrics[key] = sum(values) / len(values)
./scripts/run_verification_sweep.sh:120:    for key, value in data['average_metrics'].items():
./scripts/run_verification_sweep.sh:121:        print(f'  {key}: {value:.3f}')
./scripts/staging_deployment.sh:8:# 배포 순서 1: Secrets/AMConfig/Rules 적용 → Prom/AM reload
./scripts/staging_deployment.sh:9:echo "1️⃣ Secrets/AMConfig/Rules 적용..."
./scripts/staging_deployment.sh:10:kubectl apply -f k8s/alertmanager-secrets.yaml
./scripts/staging_deployment.sh:11:echo "✅ Alertmanager Secret 적용 완료"
./scripts/go_no_go_check.sh:74:rbac_check=$(kubectl auth can-i patch secrets -n duri-prod --as=system:serviceaccount:duri-prod:duri-integrity 2>/dev/null || echo "no")
./scripts/go_no_go_check.sh:78:    echo "⚠️ RBAC 권한 부족 - secrets/configmaps/deployments 패치 권한 필요"
./EDUCATION_LEARNING_SYSTEMS.md:74:            "key_concepts": self.identify_key_concepts(subtitles),
./policies/auto_code_loop/gate_policy.yaml.bak:13:  - "var/secrets/**"
./policies/auto_code_loop/gate_policy.yaml:13:  - "var/secrets/**"
./docker-compose.yml.backup:131:      - POSTGRES_PASSWORD=duri123
./deploy/env.prod.example:11:POSTGRES_PASSWORD=CHANGE_ME_POSTGRES_PASSWORD
./deploy/env.prod.example:19:REDIS_PASSWORD=
./deploy/env.prod.example:33:JWT_SECRET_KEY=your_super_secret_jwt_key_for_production_2024
./deploy/env.prod.example:40:ADMIN_PASSWORD=CHANGE_ME_ADMIN_PASSWORD
./docs/performance-tuning-guide.md:51:redis_keyspace_hits
./docs/performance-tuning-guide.md:52:redis_keyspace_misses
./docs/performance-tuning-guide.md:116:CONFIG SET maxmemory-policy allkeys-lru
./docs/TROUBLESHOOTING.md:23:**문제:** `did not find expected key`(들여쓰기/inline map).
./h -c export PAGER=cat LESS=FRX GIT_PAGER=cat && echo '[OK] 페이저 차단 완료':6:      A key preceded by a caret indicates the Ctrl key; thus ^K is ctrl-K.
./h -c export PAGER=cat LESS=FRX GIT_PAGER=cat && echo '[OK] 페이저 차단 완료':163:  -k _f_i_l_e  ...  --lesskey-file=_f_i_l_e
./h -c export PAGER=cat LESS=FRX GIT_PAGER=cat && echo '[OK] 페이저 차단 완료':164:                  Use a compiled lesskey file.
./h -c export PAGER=cat LESS=FRX GIT_PAGER=cat && echo '[OK] 페이저 차단 완료':230:                --lesskey-context=_t_e_x_t
./h -c export PAGER=cat LESS=FRX GIT_PAGER=cat && echo '[OK] 페이저 차단 완료':231:                  Use lesskey source file contents.
./h -c export PAGER=cat LESS=FRX GIT_PAGER=cat && echo '[OK] 페이저 차단 완료':232:                --lesskey-src=_f_i_l_e
./h -c export PAGER=cat LESS=FRX GIT_PAGER=cat && echo '[OK] 페이저 차단 완료':233:                  Use a lesskey source file.
./h -c export PAGER=cat LESS=FRX GIT_PAGER=cat && echo '[OK] 페이저 차단 완료':242:                --no-keypad
./h -c export PAGER=cat LESS=FRX GIT_PAGER=cat && echo '[OK] 페이저 차단 완료':243:                  Don't send termcap keypad init/deinit strings.
./h -c export PAGER=cat LESS=FRX GIT_PAGER=cat && echo '[OK] 페이저 차단 완료':296:        These keys can be used to edit text being entered
./conversation_logs/evolution_conversation_20250803_200302.json:14:  "key_insights": [
./conversation_logs/evolution_test_conversation_001.json:14:  "key_insights": [
./90DAY_COMPREHENSIVE_STATUS_REPORT.md:212:9. feat: complete secret hardening
./90DAY_COMPREHENSIVE_STATUS_REPORT.md:215:12. secrets: remove hardcoded creds
./90DAY_COMPREHENSIVE_STATUS_REPORT.md:216:13. fix: revert password to duri for consistency
./90DAY_COMPREHENSIVE_STATUS_REPORT.md:217:14. secrets: remove hardcoded values
./RELEASE_NOTES_v1.0.0.md:55:- **cosign Keyless 서명**: 아티팩트 무결성 보장
./duri_modules/evaluation/evaluator.py:93:        tech_keywords = [
./duri_modules/evaluation/evaluator.py:103:        keyword_count = sum(
./duri_modules/evaluation/evaluator.py:104:            1 for keyword in tech_keywords if keyword.lower() in response.lower()
./duri_modules/evaluation/evaluator.py:106:        return min(keyword_count / len(tech_keywords), 1.0)
./duri_modules/autonomous/realtime_learner.py:141:        input_keywords = set(user_input.lower().split())
./duri_modules/autonomous/realtime_learner.py:142:        response_keywords = set(response.lower().split())
./duri_modules/autonomous/realtime_learner.py:144:        if not input_keywords:
./duri_modules/autonomous/realtime_learner.py:147:        overlap = len(input_keywords.intersection(response_keywords))
./duri_modules/autonomous/realtime_learner.py:148:        return min(overlap / len(input_keywords), 1.0)
./duri_modules/autonomous/cursor_integration.py:43:    key_learnings: List[str]
./duri_modules/autonomous/cursor_integration.py:436:        key_learnings = list(set(session_data["learning_insights"]))
./duri_modules/autonomous/cursor_integration.py:446:            key_learnings=key_learnings,
./duri_modules/autonomous/result_improver.py:77:                key=lambda x: self._get_priority_score(x.priority), reverse=True
./duri_modules/self_awareness/evolution_reporter.py:300:            key_insights = analysis_data.get("key_insights", [])
./duri_modules/self_awareness/evolution_reporter.py:301:            evidence.extend(key_insights[:3])  # 상위 3개 인사이트
./duri_modules/self_awareness/integrated_self_evolution_system.py:33:    key_insights: List[str]
./duri_modules/self_awareness/integrated_self_evolution_system.py:153:            key_insights = self._extract_integrated_insights(
./duri_modules/self_awareness/integrated_self_evolution_system.py:165:                key_insights=key_insights,
./duri_modules/self_awareness/integrated_self_evolution_system.py:177:                key_insights=["통합 분석 중 오류가 발생했습니다"],
./duri_modules/self_awareness/integrated_self_evolution_system.py:291:                key_insights = analysis_result.get("key_insights", [])
./duri_modules/self_awareness/integrated_self_evolution_system.py:292:                if key_insights:
./duri_modules/self_awareness/integrated_self_evolution_system.py:293:                    insights.extend(key_insights[:2])  # 상위 2개 인사이트
./duri_modules/self_awareness/integrated_self_evolution_system.py:321:                "key_insights": latest.key_insights,
./duri_modules/self_awareness/integrated_self_evolution_system.py:347:                "key_insights": latest.key_insights,
./duri_modules/self_awareness/integrated_self_evolution_system.py:371:                "key_achievements": [],
./duri_modules/self_awareness/integrated_self_evolution_system.py:391:            if latest_result.key_insights:
./duri_modules/self_awareness/integrated_self_evolution_system.py:392:                summary["key_achievements"] = latest_result.key_insights[:3]
./duri_modules/self_awareness/integrated_self_evolution_system.py:415:                "key_achievements": ["분석 중 오류가 발생했습니다"],
./duri_modules/self_awareness/evolution_analyzer.py:25:    key_insights: List[str]
./duri_modules/self_awareness/evolution_analyzer.py:97:            key_insights = self._extract_key_insights(
./duri_modules/self_awareness/evolution_analyzer.py:109:                key_insights=key_insights,
./duri_modules/self_awareness/evolution_analyzer.py:129:                "key_insights": key_insights,
./duri_modules/self_awareness/evolution_analyzer.py:173:    def _extract_key_insights(
./duri_modules/self_awareness/evolution_analyzer.py:226:                    "key_insights": latest.key_insights,
./duri_modules/learning/meaning_extractor.py:323:            "key_lessons": lessons[:5],  # 상위 5개 교훈
./duri_modules/learning/result_evaluator.py:344:            "key_improvements": list(set(all_suggestions))[:5],  # 중복 제거 후 상위 5개
./duri_modules/learning/result_evaluator.py:345:            "key_insights": list(set(all_insights))[:5],  # 중복 제거 후 상위 5개
./duri_modules/data/conversation_store.py:72:        tech_keywords = [
./duri_modules/data/conversation_store.py:85:            1 for keyword in tech_keywords if keyword.lower() in duri_response.lower()
./duri_modules/data/conversation_store.py:86:        ) / len(tech_keywords)
./duri_modules/data/conversation_store.py:95:            self.conversation_history, key=lambda x: x["timestamp"], reverse=True
./duri_modules/data/conversation_store.py:136:        keyword_patterns = {}
./duri_modules/data/conversation_store.py:141:                    keyword_patterns[word] = keyword_patterns.get(word, 0) + 1
./duri_modules/data/conversation_store.py:144:        top_keywords = sorted(
./duri_modules/data/conversation_store.py:145:            keyword_patterns.items(), key=lambda x: x[1], reverse=True
./duri_modules/data/conversation_store.py:158:                "type": "keyword_patterns",
./duri_modules/data/conversation_store.py:159:                "data": top_keywords,
./duri_modules/data/conversation_logger.py:43:    key_insights: List[str]
./duri_modules/data/conversation_logger.py:279:        key_insights = self._extract_key_insights()
./duri_modules/data/conversation_logger.py:291:            key_insights=key_insights,
./duri_modules/data/conversation_logger.py:326:    def _extract_key_insights(self) -> List[str]:
./duri_modules/context/context_analyzer.py:18:        self.topic_keywords = {
./duri_modules/context/context_analyzer.py:104:        for topic, keywords in self.topic_keywords.items():
./duri_modules/context/context_analyzer.py:106:            for keyword in keywords:
./duri_modules/context/context_analyzer.py:107:                score += len(re.findall(keyword, all_text, re.IGNORECASE))
./duri_modules/context/context_analyzer.py:111:        primary_topic = max(topic_scores.items(), key=lambda x: x[1])
./duri_modules/context/context_analyzer.py:140:        primary_emotion = max(emotion_scores.items(), key=lambda x: x[1])
./duri_modules/context/context_analyzer.py:173:        primary_intent = max(intent_scores.items(), key=lambda x: x[1])
./duri_modules/emotion/emotion_analyzer.py:16:        self.emotion_keywords = {
./duri_modules/emotion/emotion_analyzer.py:149:        emotion_scores = self._analyze_emotion_keywords(text)
./duri_modules/emotion/emotion_analyzer.py:160:        primary_emotion = max(emotion_scores.items(), key=lambda x: x[1])
./duri_modules/emotion/emotion_analyzer.py:182:    def _analyze_emotion_keywords(self, text: str) -> Dict[str, float]:
./duri_modules/emotion/emotion_analyzer.py:184:        emotion_scores = {emotion: 0.0 for emotion in self.emotion_keywords.keys()}
./duri_modules/emotion/emotion_analyzer.py:186:        for emotion, keywords in self.emotion_keywords.items():
./duri_modules/emotion/emotion_analyzer.py:190:            for keyword in keywords["positive"]:
./duri_modules/emotion/emotion_analyzer.py:191:                matches = len(re.findall(keyword, text, re.IGNORECASE))
./duri_modules/emotion/emotion_analyzer.py:195:            for keyword in keywords["negative"]:
./duri_modules/emotion/emotion_analyzer.py:196:                matches = len(re.findall(keyword, text, re.IGNORECASE))
./duri_modules/emotion/emotion_analyzer.py:200:            for intensity_word in keywords["intensity"]:
./duri_modules/emotion/emotion_analyzer.py:295:        intensity_keywords = self.emotion_keywords[primary_emotion]["intensity"]
./duri_modules/emotion/emotion_analyzer.py:297:            len(re.findall(keyword, text, re.IGNORECASE))
./duri_modules/emotion/emotion_analyzer.py:298:            for keyword in intensity_keywords
./duri_modules/reflection/reflector.py:232:        tech_keywords = ["API", "HTTP", "JSON", "async", "await", "FastAPI", "Flask"]
./duri_modules/reflection/reflector.py:234:            1 for keyword in tech_keywords if keyword.lower() in response.lower()
./duri_modules/discussion/negotiator.py:127:        keywords1 = set(improvement1.lower().split())
./duri_modules/discussion/negotiator.py:128:        keywords2 = set(improvement2.lower().split())
./duri_modules/discussion/negotiator.py:131:        intersection = keywords1.intersection(keywords2)
./duri_modules/discussion/negotiator.py:132:        union = keywords1.union(keywords2)
./helm/duri-integrity/templates/deployment.yaml:26:      {{- with .Values.imagePullSecrets }}
./helm/duri-integrity/templates/deployment.yaml:27:      imagePullSecrets:
./helm/duri-integrity/templates/deployment.yaml:46:        {{- if .Values.secrets.hmacKey.enabled }}
./helm/duri-integrity/templates/deployment.yaml:47:        - name: DURI_HMAC_KEY
./helm/duri-integrity/templates/deployment.yaml:49:            secretKeyRef:
./helm/duri-integrity/templates/deployment.yaml:50:              name: {{ .Values.secrets.hmacKey.name }}
./helm/duri-integrity/templates/deployment.yaml:51:              key: {{ .Values.secrets.hmacKey.key }}
./helm/duri-integrity/templates/deployment.yaml:54:        - name: DURI_HMAC_KEY_DUAL_VERIFY
./helm/duri-integrity/templates/deployment.yaml:61:        {{- if .Values.secrets.hmacKey.enabled }}
./helm/duri-integrity/templates/deployment.yaml:62:        - name: hmac-key
./helm/duri-integrity/templates/deployment.yaml:63:          mountPath: /etc/secrets
./helm/duri-integrity/templates/deployment.yaml:86:        {{- if .Values.secrets.hmacKey.enabled }}
./helm/duri-integrity/templates/deployment.yaml:87:        - name: DURI_HMAC_KEY
./helm/duri-integrity/templates/deployment.yaml:89:            secretKeyRef:
./helm/duri-integrity/templates/deployment.yaml:90:              name: {{ .Values.secrets.hmacKey.name }}
./helm/duri-integrity/templates/deployment.yaml:91:              key: {{ .Values.secrets.hmacKey.key }}
./helm/duri-integrity/templates/deployment.yaml:94:        - name: DURI_HMAC_KEY_DUAL_VERIFY
./helm/duri-integrity/templates/deployment.yaml:101:        {{- if .Values.secrets.hmacKey.enabled }}
./helm/duri-integrity/templates/deployment.yaml:102:        - name: hmac-key
./helm/duri-integrity/templates/deployment.yaml:103:          mountPath: /etc/secrets
./helm/duri-integrity/templates/deployment.yaml:131:        {{- if .Values.secrets.hmacKey.enabled }}
./helm/duri-integrity/templates/deployment.yaml:132:        - name: DURI_HMAC_KEY
./helm/duri-integrity/templates/deployment.yaml:134:            secretKeyRef:
./helm/duri-integrity/templates/deployment.yaml:135:              name: {{ .Values.secrets.hmacKey.name }}
./helm/duri-integrity/templates/deployment.yaml:136:              key: {{ .Values.secrets.hmacKey.key }}
./helm/duri-integrity/templates/deployment.yaml:142:        {{- if .Values.secrets.hmacKey.enabled }}
./helm/duri-integrity/templates/deployment.yaml:143:        - name: hmac-key
./helm/duri-integrity/templates/deployment.yaml:144:          mountPath: /etc/secrets
./helm/duri-integrity/templates/deployment.yaml:177:            configMapKeyRef:
./helm/duri-integrity/templates/deployment.yaml:179:              key: enabled
./helm/duri-integrity/templates/deployment.yaml:185:      {{- if .Values.secrets.hmacKey.enabled }}
./helm/duri-integrity/templates/deployment.yaml:186:      - name: hmac-key
./helm/duri-integrity/templates/deployment.yaml:187:        secret:
./helm/duri-integrity/templates/deployment.yaml:188:          secretName: {{ .Values.secrets.hmacKey.name }}
./helm/duri-integrity/Chart.yaml:7:keywords:
./helm/duri-integrity/values.yaml:100:# Secret 설정
./helm/duri-integrity/values.yaml:101:secrets:
./helm/duri-integrity/values.yaml:102:  hmacKey:
./helm/duri-integrity/values.yaml:104:    name: "duri-hmac-key"
./helm/duri-integrity/values.yaml:105:    key: "hmac-key"
./helm/duri-integrity/values.yaml:109:    keys:
./helm/duri-integrity/values.yaml:110:      - "access-key-id"
./helm/duri-integrity/values.yaml:111:      - "secret-access-key"
./helm/duri-integrity/values.yaml:138:      resources: ["pods", "services", "secrets", "configmaps"]
./insight/league.py:184:        report["results"], key=lambda x: x["composite_score"], reverse=True
./insight/metrics.py:162:        closest_ref_length = min(ref_lengths, key=lambda x: abs(x - candidate_length))
./insight/metrics.py:264:    results.sort(key=lambda x: x["composite_score"], reverse=True)
./insight/engine.py:141:    scores.sort(key=lambda x: x[1], reverse=True)
./insight/pipeline.py:135:        enhanced_results.sort(key=lambda x: x["combined_score"], reverse=True)
./README.md:141:  -d '{"username": "admin", "password": "secret"}'
./README.md:246:- [ ] JWT_SECRET_KEY 변경
./dist/ops-lock-v1.0.1.mbox:109: k8s/alertmanager-secrets.yaml                 |  142 +
./dist/ops-lock-v1.0.1.mbox:140: secrets/pg_password.txt                       |    1 +
./dist/ops-lock-v1.0.1.mbox:245: create mode 100644 k8s/alertmanager-secrets.yaml
./dist/ops-lock-v1.0.1.mbox:274: create mode 100644 secrets/pg_password.txt
./dist/ops-lock-v1.0.1.mbox:408:+          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
./dist/ops-lock-v1.0.1.mbox:739:+    - name: Keyless sign files (OIDC)
./dist/ops-lock-v1.0.1.mbox:890:+  GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
./dist/ops-lock-v1.0.1.mbox:891:+  GRAFANA_TOKEN: ${{ secrets.GRAFANA_TOKEN }}
./dist/ops-lock-v1.0.1.mbox:892:+  DASHBOARD_ID: ${{ secrets.DASHBOARD_ID }}
./dist/ops-lock-v1.0.1.mbox:908:+        echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
./dist/ops-lock-v1.0.1.mbox:968:-      - id: detect-private-key
./dist/ops-lock-v1.0.1.mbox:3235:+                    most_common = max(unique_labels, key=labels.count)
./dist/ops-lock-v1.0.1.mbox:3812:+  ".secrets.baseline": "073ae4a8125076694f271cbdd2521f9af31561c5e57cc8a4537149e93e428295",
./dist/ops-lock-v1.0.1.mbox:5316:+  "k8s/alertmanager-secrets.yaml": "44fb889c4894e9dabe3375781c823c7dc6e2fdd2ca000772055ddf61bca5c8fe",
./dist/ops-lock-v1.0.1.mbox:5749:+  "secrets/db_password": "251f381a074b17c9fb536cf2cb18de0fa18b5c113eff2e84eb9af886f2453166",
./dist/ops-lock-v1.0.1.mbox:5854:+  "test_secret.env": "63ee2264853ed09517a20fd5efaf99754f0296968812a4a225220d6bf550a548",
./dist/ops-lock-v1.0.1.mbox:6148:+        hmac_key_str = os.getenv("DURI_HMAC_KEY", "")
./dist/ops-lock-v1.0.1.mbox:6149:+        self.hmac_key = hmac_key_str.encode() if hmac_key_str else None
./dist/ops-lock-v1.0.1.mbox:6151:+        logger.info(f"DeploymentIntegrity 초기화: hash_algorithm={self.hash_algorithm}, version={self.hash_version}, schema_version={self.schema_version}, mode={self.mode}, hmac_enabled={bool(self.hmac_key)}")
./dist/ops-lock-v1.0.1.mbox:6196:+        if not self.hmac_key:
./dist/ops-lock-v1.0.1.mbox:6198:+        return hmac.new(self.hmac_key, payload, hashlib.sha256).hexdigest()
./dist/ops-lock-v1.0.1.mbox:6211:+        if not self.hmac_key:
./dist/ops-lock-v1.0.1.mbox:6386:+            checksums_data = json.dumps(checksums, indent=2, sort_keys=True).encode()
./dist/ops-lock-v1.0.1.mbox:6399:+            metadata_data = json.dumps(metadata, indent=2, sort_keys=True).encode()
./dist/ops-lock-v1.0.1.mbox:6450:+            if self.hmac_key:
./dist/ops-lock-v1.0.1.mbox:6489:+            if self.hmac_key:
./dist/ops-lock-v1.0.1.mbox:6544:+            new_files = [f for f in current_checksums.keys() if f not in stored_checksums]
./dist/ops-lock-v1.0.1.mbox:6594:+                            "enabled": bool(self.hmac_key),
./dist/ops-lock-v1.0.1.mbox:6615:+            if self.hmac_key and (checksums_sig_ok is False or metadata_sig_ok is False):
./dist/ops-lock-v1.0.1.mbox:6652:+                    "enabled": bool(self.hmac_key),
./dist/ops-lock-v1.0.1.mbox:6693:+            provenance_data = json.dumps(provenance, indent=2, sort_keys=True).encode()
./dist/ops-lock-v1.0.1.mbox:6789:+    ".secrets.baseline": "073ae4a8125076694f271cbdd2521f9af31561c5e57cc8a4537149e93e428295",
./dist/ops-lock-v1.0.1.mbox:8293:+    "k8s/alertmanager-secrets.yaml": "44fb889c4894e9dabe3375781c823c7dc6e2fdd2ca000772055ddf61bca5c8fe",
./dist/ops-lock-v1.0.1.mbox:8726:+    "secrets/db_password": "251f381a074b17c9fb536cf2cb18de0fa18b5c113eff2e84eb9af886f2453166",
./dist/ops-lock-v1.0.1.mbox:8831:+    "test_secret.env": "63ee2264853ed09517a20fd5efaf99754f0296968812a4a225220d6bf550a548",
./dist/ops-lock-v1.0.1.mbox:10431:-            "SECRET_KEY": "duri-phase9-secret-key",
./dist/ops-lock-v1.0.1.mbox:10440:-            for key, value in env_vars.items():
./dist/ops-lock-v1.0.1.mbox:10441:-                f.write(f"{key}={value}\n")
./dist/ops-lock-v1.0.1.mbox:10474:-        return list(self.platform_configs.keys())
./dist/ops-lock-v1.0.1.mbox:11530:+            "SECRET_KEY": "duri-phase9-secret-key",
./dist/ops-lock-v1.0.1.mbox:11539:+            for key, value in env_vars.items():
./dist/ops-lock-v1.0.1.mbox:11540:+                f.write(f"{key}={value}\n")
./dist/ops-lock-v1.0.1.mbox:11573:+        return list(self.platform_configs.keys())
./dist/ops-lock-v1.0.1.mbox:12447:+        for key in metrics_before:
./dist/ops-lock-v1.0.1.mbox:12448:+            if key in metrics_after:
./dist/ops-lock-v1.0.1.mbox:12449:+                before = metrics_before[key]
./dist/ops-lock-v1.0.1.mbox:12450:+                after = metrics_after[key]
./dist/ops-lock-v1.0.1.mbox:12465:+        for key in metrics_before:
./dist/ops-lock-v1.0.1.mbox:12466:+            if key in metrics_after and "usage" in key.lower():
./dist/ops-lock-v1.0.1.mbox:12467:+                before = metrics_before[key]
./dist/ops-lock-v1.0.1.mbox:12468:+                after = metrics_after[key]
./dist/ops-lock-v1.0.1.mbox:12534:+            for key, value in point["metrics"].items():
./dist/ops-lock-v1.0.1.mbox:12535:+                if "_performance" in key and key != "overall_performance":
./dist/ops-lock-v1.0.1.mbox:12536:+                    system_name = key.replace("_performance", "")
./dist/ops-lock-v1.0.1.mbox:12928:+        (re.compile(r'(?i)\bpassword\s*[:=]\s*([^\s",}]+)'), r'password="***"'),
./dist/ops-lock-v1.0.1.mbox:12929:+        (re.compile(r'(?i)\bapi[_-]?key\s*[:=]\s*([^\s",}]+)'), r'api_key="***"'),
./dist/ops-lock-v1.0.1.mbox:12931:+        (re.compile(r'(?i)\bsecret\s*[:=]\s*([^\s",}]+)'), r'secret="***"'),
./dist/ops-lock-v1.0.1.mbox:12961:+        for key, value in record.__dict__.items():
./dist/ops-lock-v1.0.1.mbox:12962:+            if key not in ['name', 'msg', 'args', 'levelname', 'levelno', 'pathname', 
./dist/ops-lock-v1.0.1.mbox:12969:+                log_entry[key] = value
./dist/ops-lock-v1.0.1.mbox:13031:+    def __init__(self, ttl_sec: int = None, max_keys: int = None):
./dist/ops-lock-v1.0.1.mbox:13035:+            max_keys: 최대 키 수 (ENV에서 가져오거나 기본값 사용)
./dist/ops-lock-v1.0.1.mbox:13039:+        self.max = max_keys or int(os.getenv("DURI_ALERT_DEDUPE_MAX_KEYS", "512"))
./dist/ops-lock-v1.0.1.mbox:13040:+        self.store = OrderedDict()  # key -> (timestamp, metadata)
./dist/ops-lock-v1.0.1.mbox:13046:+        logger.info(f"DedupeCache 초기화: ttl={self.ttl}s, max_keys={self.max}")
./dist/ops-lock-v1.0.1.mbox:13048:+    def seen(self, key: str, metadata: Dict[str, Any] = None) -> bool:
./dist/ops-lock-v1.0.1.mbox:13053:+            key: 디듀프 키
./dist/ops-lock-v1.0.1.mbox:13064:+        if key in self.store:
./dist/ops-lock-v1.0.1.mbox:13066:+            self.store.move_to_end(key)
./dist/ops-lock-v1.0.1.mbox:13070:+        self.store[key] = (now, metadata or {})
./dist/ops-lock-v1.0.1.mbox:13074:+            oldest_key = self.store.popitem(last=False)[0]
./dist/ops-lock-v1.0.1.mbox:13077:+            logger.debug(f"DedupeCache 키 제거: {oldest_key}")
./dist/ops-lock-v1.0.1.mbox:13081:+    def get_metadata(self, key: str) -> Dict[str, Any]:
./dist/ops-lock-v1.0.1.mbox:13083:+        if key in self.store:
./dist/ops-lock-v1.0.1.mbox:13084:+            return self.store[key][1]
./dist/ops-lock-v1.0.1.mbox:13093:+            "total_keys": len(self.store),
./dist/ops-lock-v1.0.1.mbox:13095:+            "max_keys": self.max,
./dist/ops-lock-v1.0.1.mbox:13099:+            "oldest_key": min(self.store.keys()) if self.store else None,
./dist/ops-lock-v1.0.1.mbox:13100:+            "newest_key": max(self.store.keys()) if self.store else None
./dist/ops-lock-v1.0.1.mbox:13105:+        expired_keys = []
./dist/ops-lock-v1.0.1.mbox:13107:+        for key, (timestamp, _) in self.store.items():
./dist/ops-lock-v1.0.1.mbox:13109:+                expired_keys.append(key)
./dist/ops-lock-v1.0.1.mbox:13111:+        for key in expired_keys:
./dist/ops-lock-v1.0.1.mbox:13112:+            self.store.pop(key, None)
./dist/ops-lock-v1.0.1.mbox:13114:+        if expired_keys:
./dist/ops-lock-v1.0.1.mbox:13115:+            logger.debug(f"DedupeCache 만료된 키 제거: {len(expired_keys)}개")
./dist/ops-lock-v1.0.1.mbox:13134:+        self.failure_history = deque()  # (timestamp, failure_reasons, alert_key)
./dist/ops-lock-v1.0.1.mbox:13139:+    def record_failure(self, failure_reasons: List[str], alert_key: str):
./dist/ops-lock-v1.0.1.mbox:13145:+            alert_key: 알람 키
./dist/ops-lock-v1.0.1.mbox:13150:+            self.failure_history.append((now, failure_reasons, alert_key))
./dist/ops-lock-v1.0.1.mbox:13181:+                (ts, reasons, key) for ts, reasons, key in self.failure_history 
./dist/ops-lock-v1.0.1.mbox:13197:+            for ts, reasons, key in window_failures:
./dist/ops-lock-v1.0.1.mbox:13200:+                reason_key = "|".join(sorted_reasons)
./dist/ops-lock-v1.0.1.mbox:13202:+                failure_counts[reason_key] += 1
./dist/ops-lock-v1.0.1.mbox:13203:+                details = failure_details[reason_key]
./dist/ops-lock-v1.0.1.mbox:13211:+            for reason_key, count in sorted(failure_counts.items(), key=lambda x: x[1], reverse=True)[:top_n]:
./dist/ops-lock-v1.0.1.mbox:13212:+                details = failure_details[reason_key]
./dist/ops-lock-v1.0.1.mbox:13218:+                    "failure_key": reason_key,
./dist/ops-lock-v1.0.1.mbox:13325:+def alarm_key(reasons: List[str]) -> str:
./dist/ops-lock-v1.0.1.mbox:13340:+    key = hashlib.sha1(payload.encode('utf-8')).hexdigest()
./dist/ops-lock-v1.0.1.mbox:13342:+    logger.debug(f"알람 키 생성: reasons={reasons} -> key={key}")
./dist/ops-lock-v1.0.1.mbox:13343:+    return key
./dist/ops-lock-v1.0.1.mbox:13345:+def canary_failure_key(canary_ok: bool, recommendation: str, failure_reasons: List[str]) -> str:
./dist/ops-lock-v1.0.1.mbox:13363:+    return alarm_key(all_reasons)
./dist/ops-lock-v1.0.1.mbox:13365:+def integrity_failure_key(integrity_ok: bool, integrity_status: str, 
./dist/ops-lock-v1.0.1.mbox:13392:+    return alarm_key(reasons)
./dist/ops-lock-v1.0.1.mbox:13399:+def should_send_alert(alert_type: str, key: str, metadata: Dict[str, Any] = None) -> bool:
./dist/ops-lock-v1.0.1.mbox:13405:+        key: 디듀프 키
./dist/ops-lock-v1.0.1.mbox:13411:+    if not key:  # 빈 키는 전송하지 않음
./dist/ops-lock-v1.0.1.mbox:13419:+    full_key = f"{alert_type}:{key}"
./dist/ops-lock-v1.0.1.mbox:13422:+    is_duplicate = dedupe_cache.seen(full_key, metadata)
./dist/ops-lock-v1.0.1.mbox:13425:+        logger.debug(f"알람 디듀프: {alert_type} 키 {key} 중복 감지")
./dist/ops-lock-v1.0.1.mbox:13428:+    logger.info(f"알람 전송: {alert_type} 키 {key} 새로운 알람")
./dist/ops-lock-v1.0.1.mbox:13431:+def record_failure(failure_reasons: List[str], alert_key: str):
./dist/ops-lock-v1.0.1.mbox:13433:+    failure_tracker.record_failure(failure_reasons, alert_key)
./dist/ops-lock-v1.0.1.mbox:13727:+from DuRiCore.health.alert_dedupe import should_send_alert, canary_failure_key, integrity_failure_key, record_failure
./dist/ops-lock-v1.0.1.mbox:13825:+        canary_alert_key = canary_failure_key(overall_ok, recommendation, failure_reasons)
./dist/ops-lock-v1.0.1.mbox:13826:+        integrity_alert_key = integrity_failure_key(
./dist/ops-lock-v1.0.1.mbox:13835:+            record_failure(failure_reasons, canary_alert_key)
./dist/ops-lock-v1.0.1.mbox:13880:+            if should_send_alert("canary", canary_alert_key, {
./dist/ops-lock-v1.0.1.mbox:13890:+            if should_send_alert("integrity", integrity_alert_key, {
./dist/ops-lock-v1.0.1.mbox:14368:+    def get(self, key: str, default: Any = None) -> Any:
./dist/ops-lock-v1.0.1.mbox:14373:+            key: 설정 키
./dist/ops-lock-v1.0.1.mbox:14380:+        return config.get(key, default or self._defaults.get(key))
./dist/ops-lock-v1.0.1.mbox:15719:+        "recommended_actions": list(action_commands.keys())
./dist/ops-lock-v1.0.1.mbox:16397:-                judgment_id TEXT PRIMARY KEY,
./dist/ops-lock-v1.0.1.mbox:16413:-                feedback_id TEXT PRIMARY KEY,
./dist/ops-lock-v1.0.1.mbox:16421:-                FOREIGN KEY (judgment_id) REFERENCES judgments (judgment_id)
./dist/ops-lock-v1.0.1.mbox:16430:-                pattern_id TEXT PRIMARY KEY,
./dist/ops-lock-v1.0.1.mbox:16482:-            keywords = situation.split()
./dist/ops-lock-v1.0.1.mbox:16483:-            placeholders = ",".join(["?" for _ in keywords])
./dist/ops-lock-v1.0.1.mbox:16492:-                (keywords[0], limit),
./dist/ops-lock-v1.0.1.mbox:16801:-            situation_key = judgment.situation[:50]  # 상황의 첫 50자로 그룹화
./dist/ops-lock-v1.0.1.mbox:16802:-            if situation_key not in situation_groups:
./dist/ops-lock-v1.0.1.mbox:16803:-                situation_groups[situation_key] = []
./dist/ops-lock-v1.0.1.mbox:16804:-            situation_groups[situation_key].append(judgment)
./dist/ops-lock-v1.0.1.mbox:16946:-            "key_insights": [],
./dist/ops-lock-v1.0.1.mbox:16957:-            impact_analysis["key_insights"].append("부정적 피드백으로 인한 개선 필요")
./dist/ops-lock-v1.0.1.mbox:16963:-            impact_analysis["key_insights"].append("수정적 피드백으로 인한 조정 필요")
./dist/ops-lock-v1.0.1.mbox:16969:-            impact_analysis["key_insights"].append("향상적 피드백으로 인한 개선 기회")
./dist/ops-lock-v1.0.1.mbox:16973:-            impact_analysis["key_insights"].append(
./dist/ops-lock-v1.0.1.mbox:17705:+  "key_metrics": {
./dist/ops-lock-v1.0.1.mbox:17920:+    "key_innovations": [
./dist/ops-lock-v1.0.1.mbox:18974:+- ✅ **cosign Keyless 서명** - 아티팩트 무결성
./dist/ops-lock-v1.0.1.mbox:19525:+- **cosign Keyless 서명**: 아티팩트 무결성 보장
./dist/ops-lock-v1.0.1.mbox:19731:+      - url_file: /etc/alertmanager/secrets/webhook.url
./dist/ops-lock-v1.0.1.mbox:19736:+      - routing_key_file: /etc/alertmanager/secrets/pagerduty.routing_key   # v2
./dist/ops-lock-v1.0.1.mbox:19738:+        dedup_key: '{{ .GroupLabels.alertname }}:{{ .GroupLabels.cluster }}:{{ .GroupLabels.service }}'
./dist/ops-lock-v1.0.1.mbox:19748:+      - routing_key_file: /etc/alertmanager/secrets/security_pd.routing_key
./dist/ops-lock-v1.0.1.mbox:19750:+        dedup_key: 'security:{{ .GroupLabels.alertname }}:{{ .GroupLabels.cluster }}'
./dist/ops-lock-v1.0.1.mbox:19758:+      - api_url_file: /etc/alertmanager/secrets/slack.webhook
./dist/ops-lock-v1.0.1.mbox:19767:+      - api_url_file: /etc/alertmanager/secrets/slack.webhook
./dist/ops-lock-v1.0.1.mbox:19891:+  - service_key: 'your-pagerduty-key'
./dist/ops-lock-v1.0.1.mbox:19907:+  - service_key: 'your-security-pagerduty-key'
./dist/ops-lock-v1.0.1.mbox:20058:+- [x] **PagerDuty `routing_key`** 사용 (v2 표준)
./dist/ops-lock-v1.0.1.mbox:20059:+- [x] **Slack/Webhook/PagerDuty** 전부 Secret 참조로 완료
./dist/ops-lock-v1.0.1.mbox:20088:+- `k8s/alertmanager-secrets.yaml` - K8s Secret/배포 예시
./dist/ops-lock-v1.0.1.mbox:20836:+### KMS/Secrets Manager 연동
./dist/ops-lock-v1.0.1.mbox:20839:+DURI_HMAC_KEY_FILE=/etc/secrets/hmac-key
./dist/ops-lock-v1.0.1.mbox:20840:+DURI_HMAC_KEY_ROTATION_PERIOD=90  # 90일 회전 주기
./dist/ops-lock-v1.0.1.mbox:20841:+DURI_HMAC_KEY_DUAL_VERIFY=true    # 회전 중 이중 서명 허용
./dist/ops-lock-v1.0.1.mbox:21025:+- [ ] PagerDuty **Events v2** 키 사용 중인지 (`routing_key`)
./dist/ops-lock-v1.0.1.mbox:21026:+- [ ] **비밀은 파일 또는 K8s Secret**로 분리되었는지
./dist/ops-lock-v1.0.1.mbox:21027:+- [ ] `dedup_key`가 서비스 관점에서 **충분히 고유**한지
./dist/ops-lock-v1.0.1.mbox:21053:+- [ ] **Secret 마운트**가 올바르게 설정되어 있는지
./dist/ops-lock-v1.0.1.mbox:21058:+- [ ] **HMAC 키**가 KMS/Secrets Manager에서 주입되는지
./dist/ops-lock-v1.0.1.mbox:21089:+- [x] K8s Secret/배포 예시 개선안 적용 (AlertmanagerConfig CRD)
./dist/ops-lock-v1.0.1.mbox:21464:+    secrets:
./dist/ops-lock-v1.0.1.mbox:21465:+      - pg_password
./dist/ops-lock-v1.0.1.mbox:21467:+      - POSTGRES_PASSWORD_FILE=/run/secrets/pg_password
./dist/ops-lock-v1.0.1.mbox:21549:+secrets:
./dist/ops-lock-v1.0.1.mbox:21550:+  pg_password:
./dist/ops-lock-v1.0.1.mbox:21551:+    file: ./secrets/pg_password.txt
./dist/ops-lock-v1.0.1.mbox:21923:-      POSTGRES_PASSWORD: duri
./dist/ops-lock-v1.0.1.mbox:21930:+      - POSTGRES_PASSWORD=duri123
./dist/ops-lock-v1.0.1.mbox:23031:+keywords:
./dist/ops-lock-v1.0.1.mbox:23154:+      {{- with .Values.imagePullSecrets }}
./dist/ops-lock-v1.0.1.mbox:23155:+      imagePullSecrets:
./dist/ops-lock-v1.0.1.mbox:23174:+        {{- if .Values.secrets.hmacKey.enabled }}
./dist/ops-lock-v1.0.1.mbox:23175:+        - name: DURI_HMAC_KEY
./dist/ops-lock-v1.0.1.mbox:23177:+            secretKeyRef:
./dist/ops-lock-v1.0.1.mbox:23178:+              name: {{ .Values.secrets.hmacKey.name }}
./dist/ops-lock-v1.0.1.mbox:23179:+              key: {{ .Values.secrets.hmacKey.key }}
./dist/ops-lock-v1.0.1.mbox:23182:+        - name: DURI_HMAC_KEY_DUAL_VERIFY
./dist/ops-lock-v1.0.1.mbox:23189:+        {{- if .Values.secrets.hmacKey.enabled }}
./dist/ops-lock-v1.0.1.mbox:23190:+        - name: hmac-key
./dist/ops-lock-v1.0.1.mbox:23191:+          mountPath: /etc/secrets
./dist/ops-lock-v1.0.1.mbox:23214:+        {{- if .Values.secrets.hmacKey.enabled }}
./dist/ops-lock-v1.0.1.mbox:23215:+        - name: DURI_HMAC_KEY
./dist/ops-lock-v1.0.1.mbox:23217:+            secretKeyRef:
./dist/ops-lock-v1.0.1.mbox:23218:+              name: {{ .Values.secrets.hmacKey.name }}
./dist/ops-lock-v1.0.1.mbox:23219:+              key: {{ .Values.secrets.hmacKey.key }}
./dist/ops-lock-v1.0.1.mbox:23222:+        - name: DURI_HMAC_KEY_DUAL_VERIFY
./dist/ops-lock-v1.0.1.mbox:23229:+        {{- if .Values.secrets.hmacKey.enabled }}
./dist/ops-lock-v1.0.1.mbox:23230:+        - name: hmac-key
./dist/ops-lock-v1.0.1.mbox:23231:+          mountPath: /etc/secrets
./dist/ops-lock-v1.0.1.mbox:23259:+        {{- if .Values.secrets.hmacKey.enabled }}
./dist/ops-lock-v1.0.1.mbox:23260:+        - name: DURI_HMAC_KEY
./dist/ops-lock-v1.0.1.mbox:23262:+            secretKeyRef:
./dist/ops-lock-v1.0.1.mbox:23263:+              name: {{ .Values.secrets.hmacKey.name }}
./dist/ops-lock-v1.0.1.mbox:23264:+              key: {{ .Values.secrets.hmacKey.key }}
./dist/ops-lock-v1.0.1.mbox:23270:+        {{- if .Values.secrets.hmacKey.enabled }}
./dist/ops-lock-v1.0.1.mbox:23271:+        - name: hmac-key
./dist/ops-lock-v1.0.1.mbox:23272:+          mountPath: /etc/secrets
./dist/ops-lock-v1.0.1.mbox:23305:+            configMapKeyRef:
./dist/ops-lock-v1.0.1.mbox:23307:+              key: enabled
./dist/ops-lock-v1.0.1.mbox:23313:+      {{- if .Values.secrets.hmacKey.enabled }}
./dist/ops-lock-v1.0.1.mbox:23314:+      - name: hmac-key
./dist/ops-lock-v1.0.1.mbox:23315:+        secret:
./dist/ops-lock-v1.0.1.mbox:23316:+          secretName: {{ .Values.secrets.hmacKey.name }}
./dist/ops-lock-v1.0.1.mbox:23442:+# Secret 설정
./dist/ops-lock-v1.0.1.mbox:23443:+secrets:
./dist/ops-lock-v1.0.1.mbox:23444:+  hmacKey:
./dist/ops-lock-v1.0.1.mbox:23446:+    name: "duri-hmac-key"
./dist/ops-lock-v1.0.1.mbox:23447:+    key: "hmac-key"
./dist/ops-lock-v1.0.1.mbox:23451:+    keys:
./dist/ops-lock-v1.0.1.mbox:23452:+      - "access-key-id"
./dist/ops-lock-v1.0.1.mbox:23453:+      - "secret-access-key"
./dist/ops-lock-v1.0.1.mbox:23480:+      resources: ["pods", "services", "secrets", "configmaps"]
./dist/ops-lock-v1.0.1.mbox:23537:diff --git a/k8s/alertmanager-secrets.yaml b/k8s/alertmanager-secrets.yaml
./dist/ops-lock-v1.0.1.mbox:23541:+++ b/k8s/alertmanager-secrets.yaml
./dist/ops-lock-v1.0.1.mbox:23543:+# K8s Secret/배포 예시 - 개선안
./dist/ops-lock-v1.0.1.mbox:23546:+kind: Secret
./dist/ops-lock-v1.0.1.mbox:23548:+  name: alertmanager-secrets
./dist/ops-lock-v1.0.1.mbox:23553:+  pagerduty.routing_key: <pd_v2_routing_key>
./dist/ops-lock-v1.0.1.mbox:23554:+  security_pd.routing_key: <pd_v2_security_routing_key>
./dist/ops-lock-v1.0.1.mbox:23589:+    - urlSecret:
./dist/ops-lock-v1.0.1.mbox:23590:+        name: alertmanager-secrets
./dist/ops-lock-v1.0.1.mbox:23591:+        key: webhook.url
./dist/ops-lock-v1.0.1.mbox:23596:+    - routingKeySecret:
./dist/ops-lock-v1.0.1.mbox:23597:+        name: alertmanager-secrets
./dist/ops-lock-v1.0.1.mbox:23598:+        key: pagerduty.routing_key
./dist/ops-lock-v1.0.1.mbox:23600:+      dedupKey: '{{ .GroupLabels.alertname }}:{{ .GroupLabels.cluster }}:{{ .GroupLabels.service }}'
./dist/ops-lock-v1.0.1.mbox:23610:+    - routingKeySecret:
./dist/ops-lock-v1.0.1.mbox:23611:+        name: alertmanager-secrets
./dist/ops-lock-v1.0.1.mbox:23612:+        key: security_pd.routing_key
./dist/ops-lock-v1.0.1.mbox:23614:+      dedupKey: 'security:{{ .GroupLabels.alertname }}:{{ .GroupLabels.cluster }}'
./dist/ops-lock-v1.0.1.mbox:23622:+    - urlSecret:
./dist/ops-lock-v1.0.1.mbox:23623:+        name: alertmanager-secrets
./dist/ops-lock-v1.0.1.mbox:23624:+        key: slack.webhook
./dist/ops-lock-v1.0.1.mbox:23633:+    - urlSecret:
./dist/ops-lock-v1.0.1.mbox:23634:+        name: alertmanager-secrets
./dist/ops-lock-v1.0.1.mbox:23635:+        key: slack.webhook
./dist/ops-lock-v1.0.1.mbox:23666:+  resources: ["pods", "services", "secrets", "configmaps"]
./dist/ops-lock-v1.0.1.mbox:23707:+      # 비밀키 운영화 - KMS/Secrets Manager 연동
./dist/ops-lock-v1.0.1.mbox:23709:+      - name: hmac-key
./dist/ops-lock-v1.0.1.mbox:23710:+        secret:
./dist/ops-lock-v1.0.1.mbox:23711:+          secretName: duri-hmac-key
./dist/ops-lock-v1.0.1.mbox:23725:+        - name: DURI_HMAC_KEY_FILE
./dist/ops-lock-v1.0.1.mbox:23726:+          value: "/etc/secrets/hmac-key"
./dist/ops-lock-v1.0.1.mbox:23730:+        - name: hmac-key
./dist/ops-lock-v1.0.1.mbox:23731:+          mountPath: /etc/secrets
./dist/ops-lock-v1.0.1.mbox:23754:+        - name: DURI_HMAC_KEY_FILE
./dist/ops-lock-v1.0.1.mbox:23755:+          value: "/etc/secrets/hmac-key"
./dist/ops-lock-v1.0.1.mbox:23757:+        - name: hmac-key
./dist/ops-lock-v1.0.1.mbox:23758:+          mountPath: /etc/secrets
./dist/ops-lock-v1.0.1.mbox:23791:+        - name: DURI_HMAC_KEY_FILE
./dist/ops-lock-v1.0.1.mbox:23792:+          value: "/etc/secrets/hmac-key"
./dist/ops-lock-v1.0.1.mbox:23796:+        - name: hmac-key
./dist/ops-lock-v1.0.1.mbox:23797:+          mountPath: /etc/secrets
./dist/ops-lock-v1.0.1.mbox:23838:+kind: Secret
./dist/ops-lock-v1.0.1.mbox:23840:+  name: duri-hmac-key
./dist/ops-lock-v1.0.1.mbox:23843:+  # base64 encoded HMAC key (실제 운영에서는 KMS/Secrets Manager에서 주입)
./dist/ops-lock-v1.0.1.mbox:23844:+  hmac-key: <BASE64_ENCODED_HMAC_KEY>
./dist/ops-lock-v1.0.1.mbox:24147:+kubectl create secret generic duri-hmac-key-new \
./dist/ops-lock-v1.0.1.mbox:24148:+  --from-literal=hmac-key=$(openssl rand -hex 32)
./dist/ops-lock-v1.0.1.mbox:24161:+                "name": "DURI_HMAC_KEY_DUAL_VERIFY",
./dist/ops-lock-v1.0.1.mbox:24218:+  resources: ["pods", "services", "secrets", "configmaps"]
./dist/ops-lock-v1.0.1.mbox:24442:+kubectl create secret generic duri-hmac-key-new -n duri-prod \
./dist/ops-lock-v1.0.1.mbox:24443:+  --from-literal=hmac-key=$(openssl rand -hex 32)
./dist/ops-lock-v1.0.1.mbox:24456:+                "name": "DURI_HMAC_KEY_DUAL_VERIFY",
./dist/ops-lock-v1.0.1.mbox:24468:+kubectl delete secret duri-hmac-key-old -n duri-prod
./dist/ops-lock-v1.0.1.mbox:24847:+  GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
./dist/ops-lock-v1.0.1.mbox:24848:+  GRAFANA_TOKEN: ${{ secrets.GRAFANA_TOKEN }}
./dist/ops-lock-v1.0.1.mbox:24849:+  DASHBOARD_ID: ${{ secrets.DASHBOARD_ID }}
./dist/ops-lock-v1.0.1.mbox:24865:+        echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
./dist/ops-lock-v1.0.1.mbox:24891:+echo "   1. GitHub Secrets 설정: GRAFANA_URL, GRAFANA_TOKEN, DASHBOARD_ID, KUBECONFIG"
./dist/ops-lock-v1.0.1.mbox:24934:+DURI_HMAC_KEY=${DURI_HMAC_KEY:-""}
./dist/ops-lock-v1.0.1.mbox:24939:+echo "   - DURI_HMAC_KEY: ${DURI_HMAC_KEY:+설정됨}"
./dist/ops-lock-v1.0.1.mbox:25212:+kubectl create secret generic duri-hmac-key -n $NAMESPACE \
./dist/ops-lock-v1.0.1.mbox:25213:+  --from-literal=hmac-key=$(openssl rand -hex 32) \
./dist/ops-lock-v1.0.1.mbox:25227:+                "name": "DURI_HMAC_KEY",
./dist/ops-lock-v1.0.1.mbox:25229:+                  "secretKeyRef": {
./dist/ops-lock-v1.0.1.mbox:25230:+                    "name": "duri-hmac-key",
./dist/ops-lock-v1.0.1.mbox:25231:+                    "key": "hmac-key"
./dist/ops-lock-v1.0.1.mbox:25236:+                "name": "DURI_HMAC_KEY_DUAL_VERIFY",
./dist/ops-lock-v1.0.1.mbox:25249:+echo "   kubectl delete secret duri-hmac-key-old -n $NAMESPACE"
./dist/ops-lock-v1.0.1.mbox:25410:+            - name: AWS_ACCESS_KEY_ID
./dist/ops-lock-v1.0.1.mbox:25412:+                secretKeyRef:
./dist/ops-lock-v1.0.1.mbox:25414:+                  key: access-key-id
./dist/ops-lock-v1.0.1.mbox:25415:+            - name: AWS_SECRET_ACCESS_KEY
./dist/ops-lock-v1.0.1.mbox:25417:+                secretKeyRef:
./dist/ops-lock-v1.0.1.mbox:25419:+                  key: secret-access-key
./dist/ops-lock-v1.0.1.mbox:25572:+# 5. aws-credentials 시크릿 key 이름 재확인
./dist/ops-lock-v1.0.1.mbox:25573:+echo "5️⃣ aws-credentials 시크릿 key 이름 재확인..."
./dist/ops-lock-v1.0.1.mbox:25574:+kubectl get secret aws-credentials -n $NAMESPACE -o jsonpath='{.data}' | jq -r 'keys[]' || {
./dist/ops-lock-v1.0.1.mbox:25577:+    echo "   kubectl create secret generic aws-credentials -n $NAMESPACE \\"
./dist/ops-lock-v1.0.1.mbox:25578:+    echo "     --from-literal=access-key-id=your-access-key \\"
./dist/ops-lock-v1.0.1.mbox:25579:+    echo "     --from-literal=secret-access-key=your-secret-key"
./dist/ops-lock-v1.0.1.mbox:25590:+kubectl get deployment duri-app -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[0].env[?(@.name=="DURI_HMAC_KEY_DUAL_VERIFY")].value}' || {
./dist/ops-lock-v1.0.1.mbox:25639:+    kubectl apply -f k8s/alertmanager-secrets.yaml --dry-run=client
./dist/ops-lock-v1.0.1.mbox:25640:+    echo "✅ Alertmanager Secret 적용 준비 완료"
./dist/ops-lock-v1.0.1.mbox:25746:+echo "   kubectl create secret generic duri-hmac-key -n duri-prod --from-literal=hmac-key=\$(openssl rand -hex 32)"
./dist/ops-lock-v1.0.1.mbox:25757:+echo "                   \"name\": \"DURI_HMAC_KEY\","
./dist/ops-lock-v1.0.1.mbox:25759:+echo "                     \"secretKeyRef\": {"
./dist/ops-lock-v1.0.1.mbox:25760:+echo "                       \"name\": \"duri-hmac-key\","
./dist/ops-lock-v1.0.1.mbox:25761:+echo "                       \"key\": \"hmac-key\""
./dist/ops-lock-v1.0.1.mbox:25855:+rbac_check=$(kubectl auth can-i patch secrets -n duri-prod --as=system:serviceaccount:duri-prod:duri-integrity 2>/dev/null || echo "no")
./dist/ops-lock-v1.0.1.mbox:25859:+    echo "⚠️ RBAC 권한 부족 - secrets/configmaps/deployments 패치 권한 필요"
./dist/ops-lock-v1.0.1.mbox:26659:+# 배포 순서 1: Secrets/AMConfig/Rules 적용 → Prom/AM reload
./dist/ops-lock-v1.0.1.mbox:26660:+echo "1️⃣ Secrets/AMConfig/Rules 적용..."
./dist/ops-lock-v1.0.1.mbox:26661:+kubectl apply -f k8s/alertmanager-secrets.yaml
./dist/ops-lock-v1.0.1.mbox:26662:+echo "✅ Alertmanager Secret 적용 완료"
./dist/ops-lock-v1.0.1.mbox:26755:diff --git a/secrets/pg_password.txt b/secrets/pg_password.txt
./dist/ops-lock-v1.0.1.mbox:26759:+++ b/secrets/pg_password.txt
./dist/ops-lock-v1.0.1.mbox:27469:+def tmp_repo(monkeypatch):
./dist/ops-lock-v1.0.1.mbox:27481:+    monkeypatch.chdir(root)
./dist/ops-lock-v1.0.1.mbox:27483:+    monkeypatch.setenv("DURI_INTEGRITY_MODE", "strict")
./dist/ops-lock-v1.0.1.mbox:27484:+    # HMAC key (있으면 tampered 케이스도 커버)
./dist/ops-lock-v1.0.1.mbox:27485:+    monkeypatch.setenv("DURI_HMAC_KEY", "test-secret-key")
./dist/ops-lock-v1.0.1.mbox:27578:+    assert di.hmac_key, "HMAC 키가 설정되어 있어야 함"
./dist/ops-lock-v1.0.1.mbox:27640:+def tmp_repo(monkeypatch):
./dist/ops-lock-v1.0.1.mbox:27652:+    monkeypatch.chdir(root)
./dist/ops-lock-v1.0.1.mbox:27654:+    monkeypatch.setenv("DURI_INTEGRITY_MODE", "strict")
./dist/ops-lock-v1.0.1.mbox:27655:+    # HMAC key (있으면 tampered 케이스도 커버)
./dist/ops-lock-v1.0.1.mbox:27656:+    monkeypatch.setenv("DURI_HMAC_KEY", "test-secret-key")
./dist/ops-lock-v1.0.1.mbox:27749:+    os.environ.pop('DURI_HMAC_KEY', None)
./dist/ops-lock-v1.0.1a.mbox:151:+          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
./tools/audit_chain_check.py:18:            password=os.getenv("PGPASSWORD", None),  # 없으면 peer로 시도
./tools/pou_day7_extract.py:62:                    key in row for key in ["timestamp", "user_id", "variant", "event"]
./tools/pou_day7_extract.py:95:        first_event = min(events, key=lambda x: x[0])
./tools/classify_axes.sh:6:mkdir -p "$OUT"/{backup_engine,integrity_provenance,learning_system,quality_improvement,runtime_container,storage_topology,operations_incident,security_secrets,_unclassified}
./tools/classify_axes.sh:46:       || "$p" =~ (secret|token|credential|keypolicy).*\.md$ ]]; then echo security_secrets
./tools/fusion.py:18:    best = max(rag_candidates, key=score)
./tools/opa_policies/guard_test.rego:8:    "output": {"name_priv": "secret"}
./tools/db.py:19:        pwd = os.environ.get("PGPASSWORD", "postgres")
./tools/db.py:31:    key: str,
./tools/db.py:49:         where key = %s
./tools/db.py:52:        (key, PG_EPOCH_FAR),
./tools/db.py:58:          (key, value, bundle_hash, version, valid_from, valid_to)
./tools/db.py:62:        (key, json.dumps(value), bundle_hash, version, valid_from, valid_to),
./tools/policy_verify.sh.bak.2025-08-31_132246:58:  local key="$1" file="$2"
./tools/policy_verify.sh.bak.2025-08-31_132246:59:  awk -v key="$key" '
./tools/policy_verify.sh.bak.2025-08-31_132246:69:    $0 ~ "^"key":" {inlist=1; next}
./tools/test_metrics.py:74:    except KeyboardInterrupt:
./tools/production_hardening.sh:13:    echo "  - keyless/OIDC 서명 활성화 권장"
./tools/pilot_log_append.py:105:            f"Unknown domain: {domain}. Supported: {list(DOMAIN_ALIASES.keys())}"
./tools/pilot_log_append.py:181:        print(f"   Supported domains: {list(DOMAIN_ALIASES.keys())}")
./tools/policy_verify.sh.bak.2025-08-31_131930:62:grep -RIl --exclude-dir=.git -E 'AKIA[0-9A-Z]{16}|-----BEGIN (RSA|EC) PRIVATE KEY-----|secret_key|password=' . 2>/dev/null | while read -r s; do
./tools/policy_verify.sh.bak.2025-08-31_131930:63:  echo "[WARN] secret-like content: $s"
./tools/thinking.py:34:    majority = max(tally.items(), key=lambda x: x[1])[0]
./tools/rerank.py:48:    for key in ("combined_score", "score", "rerank_score", "ce_score"):
./tools/rerank.py:49:        v = doc.get(key)
./tools/rerank.py:71:items.sort(key=lambda x: (-x.get("combined_score", 0.0), x.get("rank", 1e9)))
./tools/extract_lists.py:21:# allow extra keys but ignore them here; schema check는 쉘에서 수행하거나 별도 경고만
./tools/e2e_capsule_test.py:47:    core_key = "profile.name_pub"
./tools/e2e_capsule_test.py:53:            key=core_key,
./tools/hashchain_auto_verify.py:19:        db_password = os.getenv("POSTGRES_PASSWORD", "postgres")
./tools/hashchain_auto_verify.py:25:            f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
./tools/hashchain_auto_verify.py:97:    except KeyboardInterrupt:
./tools/axis_dashboard.sh:35:=== KEY METRICS ===
./cursor_core/advanced_meta_learning.py:237:                else random.choice(list(self.strategies.keys()))
./cursor_core/advanced_meta_learning.py:266:            else random.choice(list(self.strategies.keys()))
./cursor_core/advanced_meta_learning.py:323:        recommendations.sort(key=lambda x: x[1], reverse=True)
./cursor_core/advanced_meta_learning.py:409:            max(matched_patterns, key=lambda x: x[1])[0]
./cursor_core/advanced_meta_learning.py:469:                error_keywords = self._get_error_keywords(pattern)
./cursor_core/advanced_meta_learning.py:470:                for keyword in error_keywords:
./cursor_core/advanced_meta_learning.py:471:                    if keyword.lower() in error_message.lower():
./cursor_core/advanced_meta_learning.py:479:    def _get_error_keywords(self, pattern: FailurePattern) -> List[str]:
./cursor_core/advanced_meta_learning.py:481:        keywords = {
./cursor_core/advanced_meta_learning.py:489:        return keywords.get(pattern, [])
./cursor_core/learning_config_demo.py:73:            f"  - 사용 모델: {list(self.config.learning_loop['external_llm_call']['models'].keys())}"
./.secrets.baseline:8:      "name": "AWSKeyDetector"
./.secrets.baseline:11:      "name": "AzureStorageKeyDetector"
./.secrets.baseline:49:      "name": "KeywordDetector",
./.secrets.baseline:50:      "keyword_exclude": ""
./.secrets.baseline:62:      "name": "PrivateKeyDetector"
./.secrets.baseline:86:      "name": "TwilioKeyDetector"
./.secrets.baseline:91:      "path": "detect_secrets.filters.allowlist.is_line_allowlisted"
./.secrets.baseline:94:      "path": "detect_secrets.filters.common.is_baseline_file",
./.secrets.baseline:95:      "filename": ".secrets.baseline"
./.secrets.baseline:98:      "path": "detect_secrets.filters.common.is_ignored_due_to_verification_policies",
./.secrets.baseline:102:      "path": "detect_secrets.filters.heuristic.is_indirect_reference"
./.secrets.baseline:105:      "path": "detect_secrets.filters.heuristic.is_likely_id_string"
./.secrets.baseline:108:      "path": "detect_secrets.filters.heuristic.is_lock_file"
./.secrets.baseline:111:      "path": "detect_secrets.filters.heuristic.is_not_alphanumeric_string"
./.secrets.baseline:114:      "path": "detect_secrets.filters.heuristic.is_potential_uuid"
./.secrets.baseline:117:      "path": "detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign"
./.secrets.baseline:120:      "path": "detect_secrets.filters.heuristic.is_sequential_string"
./.secrets.baseline:123:      "path": "detect_secrets.filters.heuristic.is_swagger_file"
./.secrets.baseline:126:      "path": "detect_secrets.filters.heuristic.is_templated_secret"
./.secrets.baseline:134:        "hashed_secret": "a9133cdb23535f86358481700f1450ace82aaf5e",
./.secrets.baseline:143:        "hashed_secret": "8a589786ba2a796a3ad7e2f2a6c699b0edc378d9",
./.secrets.baseline:150:        "hashed_secret": "e015fe8cde4554ba6e6e7178f41cf61e61c193dc",
./.secrets.baseline:157:        "hashed_secret": "71d9d5aa13d653c17f03e1384b60f7080c9858c1",
./.secrets.baseline:164:        "hashed_secret": "369f1e654dd1842e899e6ddcaf9850ffb42f7956",
./.secrets.baseline:171:        "hashed_secret": "e5c3adf06d8d4072707ffaaa6ad313bf95f48950",
./.secrets.baseline:178:        "hashed_secret": "eb6e99b05e445f51b2646fe311da1c757f35f020",
./.secrets.baseline:185:        "type": "Secret Keyword",
./.secrets.baseline:187:        "hashed_secret": "6acb8037443ed3c046179d95228b7cc5b07a87ce",
./.secrets.baseline:194:        "type": "Secret Keyword",
./.secrets.baseline:196:        "hashed_secret": "6acb8037443ed3c046179d95228b7cc5b07a87ce",
./.secrets.baseline:205:        "hashed_secret": "8a589786ba2a796a3ad7e2f2a6c699b0edc378d9",
./.secrets.baseline:212:        "hashed_secret": "e015fe8cde4554ba6e6e7178f41cf61e61c193dc",
./.secrets.baseline:219:        "hashed_secret": "71d9d5aa13d653c17f03e1384b60f7080c9858c1",
./.secrets.baseline:226:        "hashed_secret": "369f1e654dd1842e899e6ddcaf9850ffb42f7956",
./.secrets.baseline:233:        "hashed_secret": "e5c3adf06d8d4072707ffaaa6ad313bf95f48950",
./.secrets.baseline:240:        "hashed_secret": "eb6e99b05e445f51b2646fe311da1c757f35f020",
./.secrets.baseline:247:        "type": "Secret Keyword",
./.secrets.baseline:249:        "hashed_secret": "6acb8037443ed3c046179d95228b7cc5b07a87ce",
./.secrets.baseline:258:        "hashed_secret": "3581535e22e65dd3963713a12f9877fc3212499e",
./.secrets.baseline:265:        "type": "Secret Keyword",
./.secrets.baseline:267:        "hashed_secret": "f865b53623b121fd34ee5426c792e5c33af8c227",
./.secrets.baseline:274:        "type": "Secret Keyword",
./.secrets.baseline:276:        "hashed_secret": "f865b53623b121fd34ee5426c792e5c33af8c227",
./.secrets.baseline:285:        "hashed_secret": "5577a3795fa66a038b6ecb30514b5c91b13c2281",
./.secrets.baseline:292:        "hashed_secret": "6f9d489829bfb7241f3aef537031317db62040de",
./.secrets.baseline:299:        "hashed_secret": "fc57c9497a9caaf03cc711a444569f4e2c3baf17",
./.secrets.baseline:306:        "hashed_secret": "dba31345dfcad7bb2d91a430dfed3c21be759058",
./.secrets.baseline:313:        "hashed_secret": "5dac679279ea146defb033a914b42e0c2c13f3c4",
./.secrets.baseline:320:        "hashed_secret": "fd5d9c5d3e4d920da61c4c60967e066f14d2d50c",
./.secrets.baseline:327:        "hashed_secret": "1af73fcdef09fd87c8945f2476c74f40a3710b2c",
./.secrets.baseline:334:        "hashed_secret": "02d2cb0384a77976b27d7f639451fcadc8262c8b",
./.secrets.baseline:341:        "hashed_secret": "72b61521239682b58c6fa08becedf2f30cf59dce",
./.secrets.baseline:348:        "hashed_secret": "153ab2373a26d8cc05aa06cfbef79baba43630d1",
./.secrets.baseline:355:        "hashed_secret": "4d443715310dadbeb76e1721197400de7e3a8863",
./.secrets.baseline:362:        "hashed_secret": "467648aac00950f5d4597f33b938616c44b6aee0",
./.secrets.baseline:369:        "hashed_secret": "c50bc2ed37d56d064bc218960813e6a928ebb0fb",
./.secrets.baseline:376:        "hashed_secret": "42e7c6ddaac27e283592edeb4e17343f5541ba3d",
./.secrets.baseline:383:        "hashed_secret": "ed436667bb733bc468290402ff15f2b431d393d0",
./.secrets.baseline:390:        "hashed_secret": "a7cfd22638a9b8c40120dc5e2dd44bd523ebbae7",
./.secrets.baseline:397:        "hashed_secret": "e4c69f4cd39b4862a760cec995f8edfd27da5826",
./.secrets.baseline:404:        "hashed_secret": "7d1c5e5dbe5309c2e7c9cf6f5eed1d1ecb973ef0",
./.secrets.baseline:411:        "hashed_secret": "8a80f6fcb00e695486b6b3d05b767abdd54b7dae",
./.secrets.baseline:418:        "hashed_secret": "7df4000da5141cb520b47e00f51f0309ecbe5afc",
./.secrets.baseline:425:        "hashed_secret": "3c61dd325fbcde1ca1e780ac54f7c5e320af16a7",
./.secrets.baseline:432:        "hashed_secret": "3ea3b26e8e6a1db2f42c391e24c282e340487766",
./.secrets.baseline:439:        "hashed_secret": "b02db957fc53c2baa6a1b768332431ae5c3b80f1",
./.secrets.baseline:446:        "hashed_secret": "6bbada32bf09964b3d28c7dae804426a169cb88b",
./.secrets.baseline:453:        "hashed_secret": "25195dbc6047a7b79f59eaf402e1f89751170d26",
./.secrets.baseline:460:        "hashed_secret": "7f9b7e6e1b6ade270e118fdbbcd5631c4c62aef1",
./.secrets.baseline:467:        "hashed_secret": "25eca7dcc2fac348e07b58bb8bde130290e38381",
./.secrets.baseline:474:        "hashed_secret": "398454402cecaac43d5b3652b7b2eb6175dba449",
./.secrets.baseline:481:        "hashed_secret": "2e32d9a4af49bbd70bdf6df18d50dcb916f152c2",
./.secrets.baseline:488:        "hashed_secret": "05e6ebfd00bea5c795f01a38180a9012cd146a1d",
./.secrets.baseline:495:        "hashed_secret": "3b12a7d612f247205dfd66c42b38081aac88863f",
./.secrets.baseline:502:        "hashed_secret": "d16e229731a380d6f927f3e86b2cb1d7662e3389",
./.secrets.baseline:509:        "hashed_secret": "e0fb22eaca1056ca4aff1ce34f85d0ba973ded06",
./.secrets.baseline:516:        "hashed_secret": "62be310fef52362410950801f25d107bbd497664",
./.secrets.baseline:523:        "hashed_secret": "47a9ec310dfdfe8093a146e82abe232346b9c648",
./.secrets.baseline:530:        "hashed_secret": "d3bdc0f807f77e0c665d7cf9cd56d218a771514a",
./.secrets.baseline:537:        "hashed_secret": "ec0d02f07931e374720223abfb6a9ee89c781c3f",
./.secrets.baseline:544:        "hashed_secret": "10c75c2d8a375558802d23b57d016dd30a3a372f",
./.secrets.baseline:551:        "hashed_secret": "8b274986cbacbb69c90a7a07f3f05e595263cd02",
./.secrets.baseline:558:        "hashed_secret": "a62271767c2bed94d8f03ea631c1d487009e4f4d",
./.secrets.baseline:565:        "hashed_secret": "3a9d4d81052e3740e778d7b2310c192cd31e9e5c",
./.secrets.baseline:572:        "hashed_secret": "4a7768f7cb2ea53e4111095473c8fdfc57036da6",
./.secrets.baseline:579:        "hashed_secret": "4f6c7511e70ee28a911c0c166884f363d8b2c727",
./.secrets.baseline:586:        "hashed_secret": "740e301c597aa5df6a3a1f31f089b206795ff48f",
./.secrets.baseline:593:        "hashed_secret": "85bf8048fc15a85ea9ab4c52105eab0f384efa09",
./.secrets.baseline:600:        "hashed_secret": "7c3b3f01d8e53f300cbe83ca276143cafe15e317",
./.secrets.baseline:607:        "hashed_secret": "aebc59aa68320330281b3790b172a087b0442b87",
./.secrets.baseline:614:        "hashed_secret": "84c78eb2757e5008f8dd6c35b500e4d6e64e44f7",
./.secrets.baseline:621:        "hashed_secret": "13a14594ce85d95786bac1d0663d6a987535b4d3",
./.secrets.baseline:628:        "hashed_secret": "fd70905d9da8df35201bc2cd98b2f9cd4baac614",
./.secrets.baseline:635:        "hashed_secret": "bdef5eac4ce076cfa57eab8d9f577b2a0eb79f6b",
./.secrets.baseline:642:        "hashed_secret": "9e609dbe2c83dde6e56998bfb1c0fd820af8e981",
./.secrets.baseline:651:        "hashed_secret": "fd5d9c5d3e4d920da61c4c60967e066f14d2d50c",
./.secrets.baseline:660:        "hashed_secret": "fd5d9c5d3e4d920da61c4c60967e066f14d2d50c",
./.secrets.baseline:669:        "hashed_secret": "fd5d9c5d3e4d920da61c4c60967e066f14d2d50c",
./.secrets.baseline:678:        "hashed_secret": "5577a3795fa66a038b6ecb30514b5c91b13c2281",
./.secrets.baseline:685:        "hashed_secret": "fd5d9c5d3e4d920da61c4c60967e066f14d2d50c",
./.secrets.baseline:692:        "hashed_secret": "398454402cecaac43d5b3652b7b2eb6175dba449",
./.secrets.baseline:699:        "hashed_secret": "2e32d9a4af49bbd70bdf6df18d50dcb916f152c2",
./.secrets.baseline:706:        "hashed_secret": "05e6ebfd00bea5c795f01a38180a9012cd146a1d",
./.secrets.baseline:713:        "hashed_secret": "3b12a7d612f247205dfd66c42b38081aac88863f",
./.secrets.baseline:720:        "hashed_secret": "d16e229731a380d6f927f3e86b2cb1d7662e3389",
./.secrets.baseline:727:        "hashed_secret": "e0fb22eaca1056ca4aff1ce34f85d0ba973ded06",
./.secrets.baseline:734:        "hashed_secret": "62be310fef52362410950801f25d107bbd497664",
./.secrets.baseline:741:        "hashed_secret": "47a9ec310dfdfe8093a146e82abe232346b9c648",
./.secrets.baseline:748:        "hashed_secret": "d3bdc0f807f77e0c665d7cf9cd56d218a771514a",
./.secrets.baseline:755:        "hashed_secret": "10c75c2d8a375558802d23b57d016dd30a3a372f",
./.secrets.baseline:762:        "hashed_secret": "8b274986cbacbb69c90a7a07f3f05e595263cd02",
./.secrets.baseline:769:        "hashed_secret": "a62271767c2bed94d8f03ea631c1d487009e4f4d",
./.secrets.baseline:776:        "hashed_secret": "3a9d4d81052e3740e778d7b2310c192cd31e9e5c",
./.secrets.baseline:783:        "hashed_secret": "4a7768f7cb2ea53e4111095473c8fdfc57036da6",
./.secrets.baseline:790:        "hashed_secret": "aebc59aa68320330281b3790b172a087b0442b87",
./.secrets.baseline:797:        "hashed_secret": "13a14594ce85d95786bac1d0663d6a987535b4d3",
./.secrets.baseline:804:        "hashed_secret": "fd70905d9da8df35201bc2cd98b2f9cd4baac614",
./.secrets.baseline:811:        "hashed_secret": "bdef5eac4ce076cfa57eab8d9f577b2a0eb79f6b",
./.secrets.baseline:818:        "hashed_secret": "9e609dbe2c83dde6e56998bfb1c0fd820af8e981",
./.secrets.baseline:827:        "hashed_secret": "6f9d489829bfb7241f3aef537031317db62040de",
./.secrets.baseline:834:        "hashed_secret": "fc57c9497a9caaf03cc711a444569f4e2c3baf17",
./.secrets.baseline:841:        "hashed_secret": "dba31345dfcad7bb2d91a430dfed3c21be759058",
./.secrets.baseline:848:        "hashed_secret": "5dac679279ea146defb033a914b42e0c2c13f3c4",
./.secrets.baseline:855:        "hashed_secret": "4f6c7511e70ee28a911c0c166884f363d8b2c727",
./.secrets.baseline:862:        "hashed_secret": "740e301c597aa5df6a3a1f31f089b206795ff48f",
./.secrets.baseline:869:        "hashed_secret": "85bf8048fc15a85ea9ab4c52105eab0f384efa09",
./.secrets.baseline:876:        "hashed_secret": "7c3b3f01d8e53f300cbe83ca276143cafe15e317",
./.secrets.baseline:885:        "hashed_secret": "bc3a271a27e8d51d1de69801eec616b348a2193f",
./.secrets.baseline:892:        "hashed_secret": "8b7d6ecdbcaf471ae8d0551f24e4e3c4916bfae7",
./.secrets.baseline:899:        "hashed_secret": "edd9d77d30d7d92e9580eb0b9d1d063f9df1c2ca",
./.secrets.baseline:906:        "type": "Secret Keyword",
./.secrets.baseline:908:        "hashed_secret": "e5e9fa1ba31ecd1ae84f75caaa474f3a663f05f4",
./.secrets.baseline:915:        "type": "Secret Keyword",
./.secrets.baseline:917:        "hashed_secret": "1490308b99092cead2e55c31cac0a5acd660ba97",
./.secrets.baseline:922:        "type": "Secret Keyword",
./.secrets.baseline:924:        "hashed_secret": "2a3744dfa0547a4f99f520ffb3c95a37844ffd5d",
./.secrets.baseline:933:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:942:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:951:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:960:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:965:        "type": "Secret Keyword",
./.secrets.baseline:967:        "hashed_secret": "3799f07eff18e7900c8568bd27e83e5bafab610e",
./.secrets.baseline:976:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:985:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:994:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:999:        "type": "Secret Keyword",
./.secrets.baseline:1001:        "hashed_secret": "3799f07eff18e7900c8568bd27e83e5bafab610e",
./.secrets.baseline:1010:        "hashed_secret": "0816e8a0e15e113323dac2c929058cad273ebff1",
./.secrets.baseline:1017:        "hashed_secret": "6377d9683ae782cd904cabd9b16dd262122dd194",
./.secrets.baseline:1026:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1031:        "type": "Secret Keyword",
./.secrets.baseline:1033:        "hashed_secret": "3799f07eff18e7900c8568bd27e83e5bafab610e",
./.secrets.baseline:1042:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1051:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1060:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1069:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1074:        "type": "Secret Keyword",
./.secrets.baseline:1076:        "hashed_secret": "3799f07eff18e7900c8568bd27e83e5bafab610e",
./.secrets.baseline:1085:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1090:        "type": "Secret Keyword",
./.secrets.baseline:1092:        "hashed_secret": "3799f07eff18e7900c8568bd27e83e5bafab610e",
./.secrets.baseline:1101:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1110:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1115:        "type": "Secret Keyword",
./.secrets.baseline:1117:        "hashed_secret": "3799f07eff18e7900c8568bd27e83e5bafab610e",
./.secrets.baseline:1126:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1131:        "type": "Secret Keyword",
./.secrets.baseline:1133:        "hashed_secret": "3799f07eff18e7900c8568bd27e83e5bafab610e",
./.secrets.baseline:1142:        "hashed_secret": "1bd568a7722b53f040998fb9991122b26fc33014",
./.secrets.baseline:1151:        "hashed_secret": "efb73aebf1382f179dba9f31dc6953987555f159",
./.secrets.baseline:1158:        "type": "Secret Keyword",
./.secrets.baseline:1160:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1169:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1178:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1187:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1194:        "type": "Secret Keyword",
./.secrets.baseline:1196:        "hashed_secret": "29b8dca3de5ff27bcf8bd3b622adf9970f29381c",
./.secrets.baseline:1203:        "type": "Secret Keyword",
./.secrets.baseline:1205:        "hashed_secret": "29b8dca3de5ff27bcf8bd3b622adf9970f29381c",
./.secrets.baseline:1214:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./.secrets.baseline:1221:        "type": "Secret Keyword",
./.secrets.baseline:1223:        "hashed_secret": "60b0a6382f821df6a8975da4d08d995e9822c3c6",
./.secrets.baseline:1230:        "hashed_secret": "60b0a6382f821df6a8975da4d08d995e9822c3c6",
./.secrets.baseline:1235:        "type": "Secret Keyword",
./.secrets.baseline:1237:        "hashed_secret": "1490308b99092cead2e55c31cac0a5acd660ba97",
./.secrets.baseline:1242:        "type": "Secret Keyword",
./.secrets.baseline:1244:        "hashed_secret": "30794f4dba0ec56109f731b0a4879ebcef05a161",
./.secrets.baseline:1249:        "type": "Secret Keyword",
./.secrets.baseline:1251:        "hashed_secret": "123933c837ffbb236869d09d49bdbc9646bd4484",
./.secrets.baseline:1256:        "type": "Secret Keyword",
./.secrets.baseline:1258:        "hashed_secret": "9dd301c1cf1ab1b529a1b59584a943a83eb36ebb",
./.secrets.baseline:1267:        "hashed_secret": "0816e8a0e15e113323dac2c929058cad273ebff1",
./.secrets.baseline:1274:        "hashed_secret": "6377d9683ae782cd904cabd9b16dd262122dd194",
./.secrets.baseline:1279:    "test_secret.env": [
./.secrets.baseline:1281:        "type": "Secret Keyword",
./.secrets.baseline:1282:        "filename": "test_secret.env",
./.secrets.baseline:1283:        "hashed_secret": "a6c4db13d228623406a2d868e2fded86b19568ef",
./.secrets.baseline:1290:        "type": "Secret Keyword",
./.secrets.baseline:1292:        "hashed_secret": "b87d913014bf6574b5f2f7f26301288d9a42949e",
./.secrets.baseline:1301:        "hashed_secret": "0816e8a0e15e113323dac2c929058cad273ebff1",
./.secrets.baseline:1308:        "hashed_secret": "9c51056af3d80e0866d52045d4104dcea1bde00b",
./.secrets.baseline:1315:        "hashed_secret": "90eed62c80b01867e36ff05e1063e16f59942b54",
./.secrets.baseline:1322:        "hashed_secret": "9b2aa083eabde113931233e746b5fc936c2e00b8",
./.secrets.baseline:1329:        "hashed_secret": "1af73fcdef09fd87c8945f2476c74f40a3710b2c",
./.secrets.baseline:1336:        "hashed_secret": "02d2cb0384a77976b27d7f639451fcadc8262c8b",
./.secrets.baseline:1343:        "hashed_secret": "1f0805d015fc7559230948c92a3017edef079541",
./.secrets.baseline:1350:        "hashed_secret": "6cfa59415ed69eb3686d5af6286efce1c36c4fd9",
./.secrets.baseline:1357:        "hashed_secret": "4d443715310dadbeb76e1721197400de7e3a8863",
./.secrets.baseline:1364:        "hashed_secret": "d704b46935b6454489193fe2119e8ca361df8028",
./.secrets.baseline:1371:        "hashed_secret": "467648aac00950f5d4597f33b938616c44b6aee0",
./.secrets.baseline:1378:        "hashed_secret": "fdf862f4b95f376f78ac5a8b1658ae37354b8d7b",
./.secrets.baseline:1385:        "hashed_secret": "153ab2373a26d8cc05aa06cfbef79baba43630d1",
./.secrets.baseline:1392:        "hashed_secret": "ef4442dea6b6f98b9f934bcca7536470dce61028",
./.secrets.baseline:1399:        "hashed_secret": "45cd79ecf3ab84de06c8bbd202986a4035ac38a9",
./.secrets.baseline:1406:        "hashed_secret": "1406bcb219d1970f127c029042b460e0b9288bc3",
./.secrets.baseline:1413:        "hashed_secret": "bd41439587a386a7b1c9678a327b988b36716b5f",
./.secrets.baseline:1420:        "hashed_secret": "72b61521239682b58c6fa08becedf2f30cf59dce",
./.secrets.baseline:1427:        "hashed_secret": "eac305ba7583ad525cf8dd8c3d1435d1a84529a2",
./.secrets.baseline:1434:        "hashed_secret": "3dc88c97fcc2e55956fe785ac3995ec1f8b22308",
./.secrets.baseline:1441:        "hashed_secret": "6377d9683ae782cd904cabd9b16dd262122dd194",
./.secrets.baseline:1448:        "type": "Secret Keyword",
./.secrets.baseline:1450:        "hashed_secret": "1143c37686d57609ba142491a025665a7bea5d8a",
./test_self_evolution_system.py:94:                key_insights = getattr(integrated_result, "key_insights", [])
./test_self_evolution_system.py:101:                key_insights = integrated_result.get("key_insights", [])
./test_self_evolution_system.py:106:            if key_insights:
./test_self_evolution_system.py:108:                for insight in key_insights[:3]:
./test_self_evolution_system.py:157:        key_insights = comprehensive_report.get("key_insights", [])
./test_self_evolution_system.py:158:        if key_insights:
./test_self_evolution_system.py:160:            for insight in key_insights:
./test_self_evolution_system.py:170:            achievements = summary.get("key_achievements", [])
./test_self_evolution_system.py:231:        key_insights = summary_result.get("key_insights", [])
./test_self_evolution_system.py:232:        if key_insights:
./test_self_evolution_system.py:234:            for insight in key_insights:
./duri_finale/phase_25_ethical_judgment_system.py:197:        welfare_keywords = ["사용자", "사람", "사용자", "복지", "안전", "건강", "권익"]
./duri_finale/phase_25_ethical_judgment_system.py:198:        return any(keyword in action for keyword in welfare_keywords)
./duri_finale/phase_25_ethical_judgment_system.py:202:        autonomy_keywords = ["선택", "결정", "자율", "권리", "의사"]
./duri_finale/phase_25_ethical_judgment_system.py:203:        return any(keyword in action for keyword in autonomy_keywords)
./duri_finale/phase_25_ethical_judgment_system.py:207:        fairness_keywords = ["차별", "공정", "평등", "기회", "접근"]
./duri_finale/phase_25_ethical_judgment_system.py:208:        return any(keyword in action for keyword in fairness_keywords)
./duri_finale/phase_25_ethical_judgment_system.py:212:        transparency_keywords = ["설명", "공개", "투명", "이해", "명확"]
./duri_finale/phase_25_ethical_judgment_system.py:213:        return any(keyword in action for keyword in transparency_keywords)
./duri_finale/phase_25_ethical_judgment_system.py:217:        accountability_keywords = ["책임", "결과", "영향", "평가", "검증"]
./duri_finale/phase_25_ethical_judgment_system.py:218:        return any(keyword in action for keyword in accountability_keywords)
./duri_finale/phase_25_ethical_judgment_system.py:250:        personal_keywords = ["개인", "사용자", "프라이버시", "데이터", "정보"]
./duri_finale/phase_25_ethical_judgment_system.py:251:        return any(keyword in action for keyword in personal_keywords)
./duri_finale/phase_25_ethical_judgment_system.py:255:        social_keywords = ["사회", "커뮤니티", "집단", "문화", "관습"]
./duri_finale/phase_25_ethical_judgment_system.py:256:        return any(keyword in action for keyword in social_keywords)
./duri_finale/phase_25_ethical_judgment_system.py:260:        economic_keywords = ["경제", "비용", "수익", "시장", "금융"]
./duri_finale/phase_25_ethical_judgment_system.py:261:        return any(keyword in action for keyword in economic_keywords)
./duri_finale/phase_25_ethical_judgment_system.py:265:        environmental_keywords = ["환경", "자원", "에너지", "폐기물", "지속가능"]
./duri_finale/phase_25_ethical_judgment_system.py:266:        return any(keyword in action for keyword in environmental_keywords)
./duri_finale/phase_25_ethical_judgment_system.py:270:        technological_keywords = ["기술", "시스템", "알고리즘", "자동화", "디지털"]
./duri_finale/phase_25_ethical_judgment_system.py:271:        return any(keyword in action for keyword in technological_keywords)
./duri_finale/phase_25_future_design_system.py:39:    key_factors: List[str]
./duri_finale/phase_25_future_design_system.py:51:    key_events: List[str]
./duri_finale/phase_25_future_design_system.py:90:                    "key_factors": ["컴퓨팅 파워", "데이터 품질", "알고리즘 개선"],
./duri_finale/phase_25_future_design_system.py:99:                    "key_factors": [
./duri_finale/phase_25_future_design_system.py:118:                    "key_factors": ["기술 인프라", "문화 변화", "정책 지원"],
./duri_finale/phase_25_future_design_system.py:131:                    "key_factors": ["출산율 감소", "의료 기술 발전", "정책 대응"],
./duri_finale/phase_25_future_design_system.py:146:                    "key_factors": ["정부 정책", "기술 발전", "사용자 수용도"],
./duri_finale/phase_25_future_design_system.py:161:                    "key_factors": ["국제 협약", "기술 발전", "정치적 의지"],
./duri_finale/phase_25_future_design_system.py:174:                "key_factors": ["긍정적 정책", "기술적 돌파구", "사회적 합의"],
./duri_finale/phase_25_future_design_system.py:180:                "key_factors": ["정책 실패", "기술적 사고", "자원 고갈"],
./duri_finale/phase_25_future_design_system.py:186:                "key_factors": ["정책적 조정", "기술적 진화", "사회적 적응"],
./duri_finale/phase_25_future_design_system.py:192:                "key_factors": ["기술적 돌파구", "사회적 혼란", "정치적 변화"],
./duri_finale/phase_25_future_design_system.py:241:                            key_factors=trend_data["key_factors"],
./duri_finale/phase_25_future_design_system.py:257:                            key_factors=trend_data["key_factors"],
./duri_finale/phase_25_future_design_system.py:263:        trends.sort(key=lambda x: x.impact_level, reverse=True)
./duri_finale/phase_25_future_design_system.py:303:        key_events = self._generate_key_events(trends, scenario_type)
./duri_finale/phase_25_future_design_system.py:318:            key_events=key_events,
./duri_finale/phase_25_future_design_system.py:352:    def _generate_key_events(
./duri_finale/phase_25_future_design_system.py:452:            key=lambda x: x.novelty_score + x.feasibility_score + x.impact_potential,
./duri_finale/phase_25_future_design_system.py:562:                "key_initiatives": self._generate_short_term_initiatives(ideas),
./duri_finale/phase_25_future_design_system.py:568:                "key_initiatives": self._generate_medium_term_initiatives(scenarios),
./duri_finale/phase_25_future_design_system.py:574:                "key_initiatives": self._generate_long_term_initiatives(scenarios),
./duri_finale/phase_25_creative_collaboration_system.py:91:        goal_keywords = {
./duri_finale/phase_25_creative_collaboration_system.py:100:        for keyword, goal in goal_keywords.items():
./duri_finale/phase_25_creative_collaboration_system.py:101:            if keyword in user_input:
./duri_finale/phase_25_final_evolution_ai.py:90:        if any(keyword in safe_input for keyword in ["함께", "협력", "시너지"]):
./duri_finale/phase_25_final_evolution_ai.py:92:        elif any(keyword in safe_input for keyword in ["윤리", "책임", "사회적"]):
./duri_finale/phase_25_final_evolution_ai.py:94:        elif any(keyword in safe_input for keyword in ["미래", "트렌드", "예측"]):
./duri_finale/phase_25_final_evolution_ai.py:96:        elif any(keyword in safe_input for keyword in ["혁신", "창조", "새로운"]):
./.vscode/keybindings.json:3:    "key": "ctrl+c",
./.vscode/keybindings.json:11:    "key": "ctrl+alt+c",
./.vscode/keybindings.json:16:    "key": "ctrl+alt+v",
./runbooks/integrity_incident_response.md:213:kubectl create secret generic duri-hmac-key-new \
./runbooks/integrity_incident_response.md:214:  --from-literal=hmac-key=$(openssl rand -hex 32)
./runbooks/integrity_incident_response.md:227:                "name": "DURI_HMAC_KEY_DUAL_VERIFY",
./runbooks/integrity_incident_response_improved.md:34:  resources: ["pods", "services", "secrets", "configmaps"]
./runbooks/integrity_incident_response_improved.md:258:kubectl create secret generic duri-hmac-key-new -n duri-prod \
./runbooks/integrity_incident_response_improved.md:259:  --from-literal=hmac-key=$(openssl rand -hex 32)
./runbooks/integrity_incident_response_improved.md:272:                "name": "DURI_HMAC_KEY_DUAL_VERIFY",
./runbooks/integrity_incident_response_improved.md:284:kubectl delete secret duri-hmac-key-old -n duri-prod
./tests/test_integrity_advanced.py:19:def tmp_repo(monkeypatch):
./tests/test_integrity_advanced.py:31:    monkeypatch.chdir(root)
./tests/test_integrity_advanced.py:33:    monkeypatch.setenv("DURI_INTEGRITY_MODE", "strict")
./tests/test_integrity_advanced.py:34:    # HMAC key (있으면 tampered 케이스도 커버)
./tests/test_integrity_advanced.py:35:    monkeypatch.setenv("DURI_HMAC_KEY", "test-secret-key")
./tests/test_integrity_advanced.py:128:    os.environ.pop('DURI_HMAC_KEY', None)
./tests/test_logging_integration.py:101:    print(f"✅ 컨텍스트 필드 확인: {list(ctx.keys())}")
./tests/test_logging_integration.py:157:        for key, value in record.extra_kwargs.items():
./tests/test_logging_integration.py:158:            if key in sensitive_data and value != "[REDACTED]":
./tests/test_logging_integration.py:159:                print(f"❌ PII 마스킹 실패: {key} = {value}")
./tests/test_emotion_vector.py:45:    def test_from_keyword(self):
./tests/test_emotion_vector.py:47:        vector = EmotionVector.from_keyword("칭찬")
./tests/contracts_unified/test_rollout_contract.py:11:def test_rollout_0_uses_base(monkeypatch):
./tests/contracts_unified/test_rollout_contract.py:12:    monkeypatch.setenv("DURI_UNIFIED_REASONING_MODE", "auto")
./tests/contracts_unified/test_rollout_contract.py:13:    monkeypatch.setenv("DURI_UNIFIED_REASONING_ROLLOUT", "0")
./tests/contracts_unified/test_rollout_contract.py:19:def test_rollout_force_unified(monkeypatch):
./tests/contracts_unified/test_rollout_contract.py:20:    monkeypatch.setenv("DURI_UNIFIED_REASONING_MODE", "force")
./tests/test_integrity.py:17:def tmp_repo(monkeypatch):
./tests/test_integrity.py:29:    monkeypatch.chdir(root)
./tests/test_integrity.py:31:    monkeypatch.setenv("DURI_INTEGRITY_MODE", "strict")
./tests/test_integrity.py:32:    # HMAC key (있으면 tampered 케이스도 커버)
./tests/test_integrity.py:33:    monkeypatch.setenv("DURI_HMAC_KEY", "test-secret-key")
./tests/test_integrity.py:126:    assert di.hmac_key, "HMAC 키가 설정되어 있어야 함"
./tests/test_phase11_regression.py:15:        for name in sys.modules.keys()
./tests/test_pilot_rollup_min.py:16:def test_rollup_keys():
./tests/test_pilot_rollup_min.py:29:    required_keys = ["p_error", "p_timeout", "explain_score", "total_entries"]
./tests/test_pilot_rollup_min.py:30:    for key in required_keys:
./tests/test_pilot_rollup_min.py:31:        assert key in metrics, f"Required key '{key}' missing from metrics"
./tests/contracts/test_reasoning_smoke.py:44:    except (ValueError, KeyError, TypeError, AssertionError):
./tests/test_settings_v2.py:21:def test_env_override_priority(monkeypatch):
./tests/test_settings_v2.py:22:    monkeypatch.setenv("DURI_ENV", "prod")
./tests/test_settings_v2.py:27:def test_json_fallback_compat(tmp_path, monkeypatch):
./tests/test_settings_v2.py:37:    monkeypatch.setenv("DURI_CONFIG_JSON", str(p))
./tests/test_settings_v2.py:44:def test_env_beats_json(tmp_path, monkeypatch):
./tests/test_settings_v2.py:49:    monkeypatch.setenv("DURI_CONFIG_JSON", str(p))
./tests/test_settings_v2.py:50:    monkeypatch.setenv("DURI_ENV", "prod")
./tests/test_settings_v2.py:70:    assert s.monitoring.grafana_password == "DuRi@2025!"
./tests/test_settings_v2.py:82:def test_nested_env_override(monkeypatch):
./tests/test_settings_v2.py:83:    monkeypatch.setenv("DURI_MONITORING__PROMETHEUS_URL", "http://x:9091")
./tests/test_settings_v2.py:88:def test_unknown_key_rejected(monkeypatch):
./tests/test_settings_v2.py:89:    monkeypatch.setenv("DURI__UNKNOWN_KEY", "x")
./tests/test_settings_v2.py:92:        assert False, "unknown key should fail"
./tests/test_promotion_gate.py:62:def test_policy_key_missing_protection():
./configs/storage_policy.yml:125:        - "**/*.key"
./configs/storage_policy.yml:127:        - "secrets/**"
./configs/storage_policy.yml:167:    keys: ["track", "ignore", "size_limits", "submodules"]
./configs/storage_policy.yml:169:    keys: ["include", "exclude", "retention"]
./configs/storage_policy.yml:171:    keys: ["protect", "never_delete", "dangerous_patterns"]
./configs/storage_policy.yml:173:    keys: ["checks"]
./configs/storage_policy.yml:175:    keys: ["gitignore", "backup_exclude", "retention_cron"]
./src/pou/manager.py:113:            "domains": list(latest["results"].keys()),
./config/production_checklist.md:5:### KMS/Secrets Manager 연동
./config/production_checklist.md:8:DURI_HMAC_KEY_FILE=/etc/secrets/hmac-key
./config/production_checklist.md:9:DURI_HMAC_KEY_ROTATION_PERIOD=90  # 90일 회전 주기
./config/production_checklist.md:10:DURI_HMAC_KEY_DUAL_VERIFY=true    # 회전 중 이중 서명 허용
./config/config_app.json:54:    "url": "redis://:your_redis_password@duri-redis:6379/0",
./config/config_app.json:74:    "api_key": "your_evolution_api_key_here",
./config/final_policy_observation_checklist.md:28:- [x] **PagerDuty `routing_key`** 사용 (v2 표준)
./config/final_policy_observation_checklist.md:29:- [x] **Slack/Webhook/PagerDuty** 전부 Secret 참조로 완료
./config/final_policy_observation_checklist.md:58:- `k8s/alertmanager-secrets.yaml` - K8s Secret/배포 예시
./config/brain/core/app.json:54:    "url": "redis://:your_redis_password@duri-redis:6379/0",
./config/brain/core/app.json:74:    "api_key": "your_evolution_api_key_here",
./config/duri_common_app.json:38:    "url": "redis://:your_redis_password@duri-redis:6379/0",
./config/duri_common_app.json:42:    "api_keys": {
./config/duri_common_app.json:43:      "brain": "your_brain_api_key_here",
./config/duri_common_app.json:44:      "evolution": "your_evolution_api_key_here"
./config/alertmanager_routing.yml:107:  - service_key: 'your-pagerduty-key'
./config/alertmanager_routing.yml:123:  - service_key: 'your-security-pagerduty-key'
./config/production_readiness_checklist.md:7:- [ ] PagerDuty **Events v2** 키 사용 중인지 (`routing_key`)
./config/production_readiness_checklist.md:8:- [ ] **비밀은 파일 또는 K8s Secret**로 분리되었는지
./config/production_readiness_checklist.md:9:- [ ] `dedup_key`가 서비스 관점에서 **충분히 고유**한지
./config/production_readiness_checklist.md:35:- [ ] **Secret 마운트**가 올바르게 설정되어 있는지
./config/production_readiness_checklist.md:40:- [ ] **HMAC 키**가 KMS/Secrets Manager에서 주입되는지
./config/production_readiness_checklist.md:71:- [x] K8s Secret/배포 예시 개선안 적용 (AlertmanagerConfig CRD)
./config/common_app.json:38:    "url": "redis://:your_redis_password@duri-redis:6379/0",
./config/common_app.json:42:    "api_keys": {
./config/common_app.json:43:      "brain": "your_brain_api_key_here",
./config/common_app.json:44:      "evolution": "your_evolution_api_key_here"
./config/core_app.json:74:    "api_key": "${API_KEY}",
./config/common/app.json:38:    "url": "redis://:your_redis_password@duri-redis:6379/0",
./config/common/app.json:42:    "api_keys": {
./config/common/app.json:43:      "brain": "your_brain_api_key_here",
./config/common/app.json:44:      "evolution": "your_evolution_api_key_here"
./config/common/config.py:239:            for key, value in settings.items():
./config/common/config.py:240:                print(f"  {key}: {value}")
./config/core/app.json:54:    "url": "redis://:your_redis_password@duri-redis:6379/0",
./config/core/app.json:74:    "api_key": "your_evolution_api_key_here",
./config/.gitignore:2:secrets.json
./config/evolution/brain/core/app.json:54:    "url": "redis://:your_redis_password@duri-redis:6379/0",
./config/evolution/brain/core/app.json:74:    "api_key": "your_evolution_api_key_here",
./config/evolution/core/app.json:54:    "url": "redis://:your_redis_password@duri-redis:6379/0",
./config/evolution/core/app.json:74:    "api_key": "your_evolution_api_key_here",
./config/alertmanager_improved.yml:37:      - url_file: /etc/alertmanager/secrets/webhook.url
./config/alertmanager_improved.yml:42:      - routing_key_file: /etc/alertmanager/secrets/pagerduty.routing_key   # v2
./config/alertmanager_improved.yml:44:        dedup_key: '{{ .GroupLabels.alertname }}:{{ .GroupLabels.cluster }}:{{ .GroupLabels.service }}'
./config/alertmanager_improved.yml:54:      - routing_key_file: /etc/alertmanager/secrets/security_pd.routing_key
./config/alertmanager_improved.yml:56:        dedup_key: 'security:{{ .GroupLabels.alertname }}:{{ .GroupLabels.cluster }}'
./config/alertmanager_improved.yml:64:      - api_url_file: /etc/alertmanager/secrets/slack.webhook
./config/alertmanager_improved.yml:73:      - api_url_file: /etc/alertmanager/secrets/slack.webhook
./DuRi_Adaptive_Learning_System_Success_Backup_20250801.md:60:    def generate_keyword_format(self, conversation)
./DuRi_Adaptive_Learning_System_Backup_20250801.md:60:    def generate_keyword_format(self, conversation)
./cursor_extension/src/duriAPI.ts:9:        [key: string]: any;
./cursor_extension/src/duriAPI.ts:20:        [key: string]: any;
./duri_control/drift_guard.py:17:CANARY_KEY = "canary:ratio"
./duri_control/drift_guard.py:26:    password=os.getenv("POSTGRES_PASSWORD", "duri"),
./duri_control/drift_guard.py:104:                            self.redis_client.set(CANARY_KEY, 0.0)
./duri_control/app/models/user_model.py:13:    password_hash: str
./duri_control/app/models/user_model.py:20:    password: str = Field(..., example="secret")
./duri_control/app/models/user_model.py:25:    password: str = Field(..., example="secret")
./duri_control/app/models/notify_model.py:54:    email_password: Optional[str] = None
./duri_control/app/middleware/auth.py:42:            request.url.path.startswith("/auth/activate-password") or
./duri_control/app/__init__.py:58:        'password': 'duri'
./duri_control/app/utils/resource_utils.py:98:                default_interface = list(interfaces.keys())[0]
./duri_control/app/services/log_service.py:223:        filtered_logs.sort(key=lambda x: x.timestamp, reverse=True)
./duri_control/app/services/backup_service.py:53:                    id SERIAL PRIMARY KEY,
./duri_control/app/services/backup_service.py:646:            'password': 'duri'
./duri_control/app/services/notify_service.py:54:                    id SERIAL PRIMARY KEY,
./duri_control/app/services/notify_service.py:64:                    id VARCHAR(100) PRIMARY KEY,
./duri_control/app/services/notify_service.py:324:            self.config.email_password,
./duri_control/app/services/notify_service.py:364:            server.login(self.config.email_username, self.config.email_password)
./duri_control/app/services/notify_service.py:510:        threshold_key = resource_type.value
./duri_control/app/services/notify_service.py:511:        threshold_value = self.config.thresholds.get(threshold_key, 80.0)
./duri_control/app/services/notify_service.py:542:            'password': 'duri'
./duri_control/app/services/config_service.py:32:            'password': 'duri'
./duri_control/app/services/config_service.py:55:                    id SERIAL PRIMARY KEY,
./duri_control/app/services/log_query_service.py:75:            filtered_logs.sort(key=lambda x: x.timestamp, reverse=True)
./duri_control/app/services/log_query_service.py:169:                hour_key = log.timestamp.strftime("%Y-%m-%d %H:00")
./duri_control/app/services/log_query_service.py:170:                stats["hourly_distribution"][hour_key] += 1
./duri_control/app/services/log_query_service.py:173:                day_key = log.timestamp.strftime("%Y-%m-%d")
./duri_control/app/services/log_query_service.py:174:                stats["daily_distribution"][day_key] += 1
./duri_control/app/services/log_query_service.py:206:                    peak_hour = max(stats["hourly_distribution"].items(), key=lambda x: x[1])
./duri_control/app/services/log_query_service.py:207:                    quiet_hour = min(stats["hourly_distribution"].items(), key=lambda x: x[1])
./duri_control/app/services/log_query_service.py:221:                service_logs.sort(key=lambda x: x.timestamp, reverse=True)
./duri_control/app/services/log_query_service.py:262:                hour_key = error.timestamp.strftime("%Y-%m-%d %H:00")
./duri_control/app/services/log_query_service.py:263:                error_summary["error_timeline"][hour_key] += 1
./duri_control/app/services/log_query_service.py:270:                if any(keyword in message_lower for keyword in ["timeout", "connection", "failed", "exception"]):
./duri_control/app/services/log_query_service.py:272:                elif any(keyword in message_lower for keyword in ["memory", "out of memory"]):
./duri_control/app/services/log_query_service.py:274:                elif any(keyword in message_lower for keyword in ["permission", "access denied"]):
./duri_control/app/services/log_query_service.py:320:                last_log = max(service_logs, key=lambda x: x.timestamp)
./duri_control/app/services/config_backup_service.py:37:                    id SERIAL PRIMARY KEY,
./duri_control/app/services/auth_service.py:16:JWT_SECRET = os.getenv("JWT_SECRET", "duri_super_secret_key")
./duri_control/app/services/auth_service.py:20:PASSWORD_SALT = os.getenv("PASSWORD_SALT", "duri_salt")
./duri_control/app/services/auth_service.py:24:DEFAULT_ADMIN_PASSWORD = os.getenv("DEFAULT_ADMIN_PASSWORD", "secret")
./duri_control/app/services/auth_service.py:36:            'password': 'duri'
./duri_control/app/services/auth_service.py:55:                    id SERIAL PRIMARY KEY,
./duri_control/app/services/auth_service.py:57:                    password_hash VARCHAR(128) NOT NULL,
./duri_control/app/services/auth_service.py:72:        """최초 관리자 계정 자동 생성 (admin/secret) - 표준 시드 패턴(로깅+감사로그)"""
./duri_control/app/services/auth_service.py:80:                self.create_user(UserCreate(username=DEFAULT_ADMIN_USERNAME, password=DEFAULT_ADMIN_PASSWORD, role=DEFAULT_ADMIN_ROLE))
./duri_control/app/services/auth_service.py:81:                message = f"🟢 최초 관리자 계정({DEFAULT_ADMIN_USERNAME}/{DEFAULT_ADMIN_PASSWORD}) 생성 완료"
./duri_control/app/services/auth_service.py:98:    def hash_password(self, password: str) -> str:
./duri_control/app/services/auth_service.py:100:            'sha256', password.encode(), PASSWORD_SALT.encode(), 100_000
./duri_control/app/services/auth_service.py:103:    def verify_password(self, password: str, password_hash: str) -> bool:
./duri_control/app/services/auth_service.py:104:        return hmac.compare_digest(self.hash_password(password), password_hash)
./duri_control/app/services/auth_service.py:110:            password_hash = self.hash_password(user.password)
./duri_control/app/services/auth_service.py:112:                INSERT INTO users (username, password_hash, role)
./duri_control/app/services/auth_service.py:115:            ''', (user.username, password_hash, user.role.value if hasattr(user.role, 'value') else user.role))
./duri_control/app/services/auth_service.py:144:    def authenticate_user(self, username: str, password: str) -> Optional[UserInDB]:
./duri_control/app/services/auth_service.py:146:        if user and user.is_active and self.verify_password(password, user.password_hash):
./duri_control/app/services/auth_service.py:158:        return jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)
./duri_control/app/services/auth_service.py:168:        return jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)
./duri_control/app/services/auth_service.py:172:            payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
./duri_control/app/api/logs.py:163:        services = list(log_service.container_names.keys())
./duri_control/app/api/auth.py:17:    user = auth_service.authenticate_user(login_data.username, login_data.password)
./duri_control/cost_guard.py:17:CANARY_KEY = "canary:ratio"
./duri_control/cost_guard.py:26:    password=os.getenv("POSTGRES_PASSWORD", "duri"),
./duri_control/cost_guard.py:98:                            self.redis_client.set(CANARY_KEY, 0.0)
./duri_control/srm_guard.py:17:CANARY_KEY = "canary:ratio"
./duri_control/srm_guard.py:28:    password=os.getenv("POSTGRES_PASSWORD", "duri"),
./duri_control/srm_guard.py:75:            current_ratio = float(self.redis_client.get(CANARY_KEY) or EXPECT_RATIO)
./duri_control/srm_guard.py:110:                            self.redis_client.set(CANARY_KEY, new_ratio)
./duri_control/canary_router.py:16:CANARY_KEY = "canary:ratio"
./duri_control/canary_router.py:64:            v = self.redis_client.get(CANARY_KEY)
./batch_verify_delete_advanced_v2_final.sh:94:  size_desc)  sort -z -nr --field-separator=$'\t' --key=1,1 "$TSV" > "$SORTED0" ;;
./batch_verify_delete_advanced_v2_final.sh:95:  *)          sort -z -n  --field-separator=$'\t' --key=1,1 "$TSV" > "$SORTED0" ;;
./test_evolution_log_system.py:163:    print(f"핵심 인사이트: {', '.join(evolution_log.key_insights)}")
./k8s/alertmanager-secrets.yaml:1:# K8s Secret/배포 예시 - 개선안
./k8s/alertmanager-secrets.yaml:4:kind: Secret
./k8s/alertmanager-secrets.yaml:6:  name: alertmanager-secrets
./k8s/alertmanager-secrets.yaml:11:  pagerduty.routing_key: <pd_v2_routing_key>
./k8s/alertmanager-secrets.yaml:12:  security_pd.routing_key: <pd_v2_security_routing_key>
./k8s/alertmanager-secrets.yaml:47:    - urlSecret:
./k8s/alertmanager-secrets.yaml:48:        name: alertmanager-secrets
./k8s/alertmanager-secrets.yaml:49:        key: webhook.url
./k8s/alertmanager-secrets.yaml:54:    - routingKeySecret:
./k8s/alertmanager-secrets.yaml:55:        name: alertmanager-secrets
./k8s/alertmanager-secrets.yaml:56:        key: pagerduty.routing_key
./k8s/alertmanager-secrets.yaml:58:      dedupKey: '{{ .GroupLabels.alertname }}:{{ .GroupLabels.cluster }}:{{ .GroupLabels.service }}'
./k8s/alertmanager-secrets.yaml:68:    - routingKeySecret:
./k8s/alertmanager-secrets.yaml:69:        name: alertmanager-secrets
./k8s/alertmanager-secrets.yaml:70:        key: security_pd.routing_key
./k8s/alertmanager-secrets.yaml:72:      dedupKey: 'security:{{ .GroupLabels.alertname }}:{{ .GroupLabels.cluster }}'
./k8s/alertmanager-secrets.yaml:80:    - urlSecret:
./k8s/alertmanager-secrets.yaml:81:        name: alertmanager-secrets
./k8s/alertmanager-secrets.yaml:82:        key: slack.webhook
./k8s/alertmanager-secrets.yaml:91:    - urlSecret:
./k8s/alertmanager-secrets.yaml:92:        name: alertmanager-secrets
./k8s/alertmanager-secrets.yaml:93:        key: slack.webhook
./k8s/alertmanager-secrets.yaml:124:  resources: ["pods", "services", "secrets", "configmaps"]
./k8s/duri-integrity-deployment.yaml:17:      # 비밀키 운영화 - KMS/Secrets Manager 연동
./k8s/duri-integrity-deployment.yaml:19:      - name: hmac-key
./k8s/duri-integrity-deployment.yaml:20:        secret:
./k8s/duri-integrity-deployment.yaml:21:          secretName: duri-hmac-key
./k8s/duri-integrity-deployment.yaml:35:        - name: DURI_HMAC_KEY_FILE
./k8s/duri-integrity-deployment.yaml:36:          value: "/etc/secrets/hmac-key"
./k8s/duri-integrity-deployment.yaml:40:        - name: hmac-key
./k8s/duri-integrity-deployment.yaml:41:          mountPath: /etc/secrets
./k8s/duri-integrity-deployment.yaml:64:        - name: DURI_HMAC_KEY_FILE
./k8s/duri-integrity-deployment.yaml:65:          value: "/etc/secrets/hmac-key"
./k8s/duri-integrity-deployment.yaml:67:        - name: hmac-key
./k8s/duri-integrity-deployment.yaml:68:          mountPath: /etc/secrets
./k8s/duri-integrity-deployment.yaml:101:        - name: DURI_HMAC_KEY_FILE
./k8s/duri-integrity-deployment.yaml:102:          value: "/etc/secrets/hmac-key"
./k8s/duri-integrity-deployment.yaml:106:        - name: hmac-key
./k8s/duri-integrity-deployment.yaml:107:          mountPath: /etc/secrets
./k8s/duri-integrity-deployment.yaml:148:kind: Secret
./k8s/duri-integrity-deployment.yaml:150:  name: duri-hmac-key
./k8s/duri-integrity-deployment.yaml:153:  # base64 encoded HMAC key (실제 운영에서는 KMS/Secrets Manager에서 주입)
./k8s/duri-integrity-deployment.yaml:154:  hmac-key: <BASE64_ENCODED_HMAC_KEY>
./test_phase2_2_integration.py:137:    print(f"✅ 상황 이해 - 핵심 요소: {context_analysis.key_factors}")
./test_phase2_2_integration.py:229:    print(f"🤝 사회적 이해: {social_analysis.key_factors[:3]}")
./memory/core/ddl.sql:3:  key text,
./memory/core/ddl.sql:11:  primary key (key, tx_from)
./memory/core/ddl.sql:13:create index if not exists mc_bt_lookup on memory_canonical_bt(key, valid_from, valid_to);
./memory/core/ddl.sql:14:create index if not exists mc_bt_asof on memory_canonical_bt(key, valid_from, valid_to, tx_from);
./memory/core/ddl.sql:18:  qid text primary key,
./memory/core/ddl.sql:25:  id bigserial primary key,
./check_learning_status.py:167:        for key, value in system.items():
./check_learning_status.py:168:            if key != "system":
./check_learning_status.py:170:                    print(f"  {key}:")
./check_learning_status.py:171:                    for sub_key, sub_value in value.items():
./check_learning_status.py:172:                        print(f"    {sub_key}: {sub_value}")
./check_learning_status.py:174:                    print(f"  {key}: {value}")
./.env.grafana.example:2:GF_SECURITY_ADMIN_PASSWORD=<strong-secret>
./duri_improved_learning_activation.log:210:2025-08-08 09:32:27,001 - duri_brain.learning.learning_loop_manager - ERROR - 자율 목표 설정 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:215:2025-08-08 09:32:27,002 - duri_brain.learning.learning_loop_manager - ERROR - 창의성 고도화 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:242:2025-08-08 09:32:28,103 - duri_brain.learning.learning_loop_manager - ERROR - 자율 목표 설정 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:247:2025-08-08 09:32:28,104 - duri_brain.learning.learning_loop_manager - ERROR - 창의성 고도화 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:273:2025-08-08 09:32:29,206 - duri_brain.learning.learning_loop_manager - ERROR - 자율 목표 설정 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:278:2025-08-08 09:32:29,206 - duri_brain.learning.learning_loop_manager - ERROR - 창의성 고도화 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:403:2025-08-08 09:36:43,636 - duri_brain.learning.learning_loop_manager - ERROR - 감정/윤리 판단 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:411:2025-08-08 09:36:43,636 - duri_brain.learning.learning_loop_manager - ERROR - 자율 목표 설정 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:416:2025-08-08 09:36:43,637 - duri_brain.learning.learning_loop_manager - ERROR - 창의성 고도화 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:440:2025-08-08 09:36:44,739 - duri_brain.learning.learning_loop_manager - ERROR - 감정/윤리 판단 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:448:2025-08-08 09:36:44,739 - duri_brain.learning.learning_loop_manager - ERROR - 자율 목표 설정 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:453:2025-08-08 09:36:44,739 - duri_brain.learning.learning_loop_manager - ERROR - 창의성 고도화 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:476:2025-08-08 09:36:45,841 - duri_brain.learning.learning_loop_manager - ERROR - 감정/윤리 판단 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:484:2025-08-08 09:36:45,841 - duri_brain.learning.learning_loop_manager - ERROR - 자율 목표 설정 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:489:2025-08-08 09:36:45,842 - duri_brain.learning.learning_loop_manager - ERROR - 창의성 고도화 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:512:2025-08-08 09:36:46,943 - duri_brain.learning.learning_loop_manager - ERROR - 감정/윤리 판단 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:520:2025-08-08 09:36:46,944 - duri_brain.learning.learning_loop_manager - ERROR - 자율 목표 설정 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:525:2025-08-08 09:36:46,944 - duri_brain.learning.learning_loop_manager - ERROR - 창의성 고도화 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:548:2025-08-08 09:36:48,045 - duri_brain.learning.learning_loop_manager - ERROR - 감정/윤리 판단 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:556:2025-08-08 09:36:48,046 - duri_brain.learning.learning_loop_manager - ERROR - 자율 목표 설정 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:561:2025-08-08 09:36:48,046 - duri_brain.learning.learning_loop_manager - ERROR - 창의성 고도화 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:584:2025-08-08 09:36:49,147 - duri_brain.learning.learning_loop_manager - ERROR - 감정/윤리 판단 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:592:2025-08-08 09:36:49,148 - duri_brain.learning.learning_loop_manager - ERROR - 자율 목표 설정 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:597:2025-08-08 09:36:49,148 - duri_brain.learning.learning_loop_manager - ERROR - 창의성 고도화 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:620:2025-08-08 09:36:50,250 - duri_brain.learning.learning_loop_manager - ERROR - 감정/윤리 판단 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:628:2025-08-08 09:36:50,250 - duri_brain.learning.learning_loop_manager - ERROR - 자율 목표 설정 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:633:2025-08-08 09:36:50,250 - duri_brain.learning.learning_loop_manager - ERROR - 창의성 고도화 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:656:2025-08-08 09:36:51,352 - duri_brain.learning.learning_loop_manager - ERROR - 감정/윤리 판단 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:664:2025-08-08 09:36:51,352 - duri_brain.learning.learning_loop_manager - ERROR - 자율 목표 설정 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./duri_improved_learning_activation.log:669:2025-08-08 09:36:51,352 - duri_brain.learning.learning_loop_manager - ERROR - 창의성 고도화 사이클 실행 중 오류: MemorySync.store_experience() got an unexpected keyword argument 'experience_type'
./docker-compose.yml.backup.20250922_135023:91:      POSTGRES_PASSWORD: duri
./DuRi_Improvement_Plan_20250807.md:120:    def get(self, key: str, default=None):
./DuRi_Improvement_Plan_20250807.md:121:        if key in self.cache and time.time() < self.ttl.get(key, 0):
./DuRi_Improvement_Plan_20250807.md:122:            return self.cache[key]
./DuRi_Improvement_Plan_20250807.md:125:    def set(self, key: str, value: Any, ttl: int = 300):
./DuRi_Improvement_Plan_20250807.md:126:        self.cache[key] = value
./DuRi_Improvement_Plan_20250807.md:127:        self.ttl[key] = time.time() + ttl
./duri_emotion_proxy.patch:72:+    id SERIAL PRIMARY KEY,
./DuRiCore/reasoning_path_validator.py:152:        cache_key = f"{path.path_id}_{len(path.nodes)}_{len(path.edges)}"
./DuRiCore/reasoning_path_validator.py:153:        if cache_key in self.path_cache:
./DuRiCore/reasoning_path_validator.py:154:            return self.path_cache[cache_key]
./DuRiCore/reasoning_path_validator.py:194:            self.path_cache[cache_key] = result
./DuRiCore/reasoning_path_validator.py:349:        keywords1 = set(re.findall(r"\w+", text1.lower()))
./DuRiCore/reasoning_path_validator.py:350:        keywords2 = set(re.findall(r"\w+", text2.lower()))
./DuRiCore/reasoning_path_validator.py:352:        if not keywords1 or not keywords2:
./DuRiCore/reasoning_path_validator.py:355:        intersection = len(keywords1.intersection(keywords2))
./DuRiCore/reasoning_path_validator.py:356:        union = len(keywords1.union(keywords2))
./DuRiCore/reasoning_path_validator.py:430:        keywords1 = set(re.findall(r"\w+", text1.lower()))
./DuRiCore/reasoning_path_validator.py:431:        keywords2 = set(re.findall(r"\w+", text2.lower()))
./DuRiCore/reasoning_path_validator.py:433:        if not keywords1 or not keywords2:
./DuRiCore/reasoning_path_validator.py:436:        intersection = len(keywords1.intersection(keywords2))
./DuRiCore/reasoning_path_validator.py:437:        union = len(keywords1.union(keywords2))
./DuRiCore/reasoning_path_validator.py:464:        optimal_paths.sort(key=lambda p: p.confidence, reverse=True)
./DuRiCore/reasoning_path_validator.py:742:        all_node_ids = list(graph.nodes.keys())
./DuRiCore/reasoning_path_validator.py:814:        evaluation_results.sort(key=lambda x: x["overall_score"], reverse=True)
./DuRiCore/cache_optimization_test_results.json:13:      "cache_key": "74e09b3c683ccb7364a8e1e5108bf1b8"
./DuRiCore/cache_optimization_test_results.json:24:      "cache_key": "aa4a1ac50e285233647a670f98d72e71"
./DuRiCore/cache_optimization_test_results.json:35:      "cache_key": "c6106bdb382509e4d40bb2443dea08e4"
./DuRiCore/cache_optimization_test_results.json:46:      "cache_key": "74e09b3c683ccb7364a8e1e5108bf1b8"
./DuRiCore/cache_optimization_test_results.json:57:      "cache_key": "aa4a1ac50e285233647a670f98d72e71"
./DuRiCore/cache_optimization_test_results.json:71:      "cache_key": "826ffafa289ba0b2390b70a2c0406cfa",
./DuRiCore/cache_optimization_test_results.json:73:      "key_length": 32
./DuRiCore/cache_optimization_test_results.json:77:      "cache_key": "9d9cfbb7a49ac0dd257a908685e00032",
./DuRiCore/cache_optimization_test_results.json:79:      "key_length": 32
./DuRiCore/cache_optimization_test_results.json:83:      "cache_key": "9f1ae072fe11f19a546af29949be5a38",
./DuRiCore/cache_optimization_test_results.json:85:      "key_length": 32
./DuRiCore/insight_evaluation_system.py:78:                "keywords": ["논리", "일관성", "모순", "전제", "결론"],
./DuRiCore/insight_evaluation_system.py:83:                "keywords": ["증거", "사실", "데이터", "근거", "입증"],
./DuRiCore/insight_evaluation_system.py:88:                "keywords": ["깊이", "분석", "탐구", "고찰", "사고"],
./DuRiCore/insight_evaluation_system.py:93:                "keywords": ["독창", "새로운", "혁신", "창의", "독특"],
./DuRiCore/insight_evaluation_system.py:98:                "keywords": ["실용", "적용", "실제", "유용", "효과"],
./DuRiCore/insight_evaluation_system.py:179:        logical_keywords = ["따라서", "그러므로", "결론적으로", "이유로", "때문에"]
./DuRiCore/insight_evaluation_system.py:180:        keyword_count = sum(1 for keyword in logical_keywords if keyword in content)
./DuRiCore/insight_evaluation_system.py:181:        score += min(keyword_count * 0.1, 0.3)
./DuRiCore/insight_evaluation_system.py:190:        contradiction_keywords = ["하지만", "그런데", "반면", "다른 한편"]
./DuRiCore/insight_evaluation_system.py:192:            1 for keyword in contradiction_keywords if keyword in content
./DuRiCore/insight_evaluation_system.py:205:        evidence_keywords = ["증거", "사실", "데이터", "근거", "입증", "확인", "검증"]
./DuRiCore/insight_evaluation_system.py:206:        evidence_count = sum(1 for keyword in evidence_keywords if keyword in content)
./DuRiCore/insight_evaluation_system.py:218:                p for p in premises if any(kw in str(p) for kw in evidence_keywords)
./DuRiCore/insight_evaluation_system.py:232:        depth_keywords = ["분석", "탐구", "고찰", "사고", "검토", "연구", "조사"]
./DuRiCore/insight_evaluation_system.py:233:        depth_count = sum(1 for keyword in depth_keywords if keyword in content)
./DuRiCore/insight_evaluation_system.py:255:        originality_keywords = ["새로운", "독창", "혁신", "창의", "독특", "차별화"]
./DuRiCore/insight_evaluation_system.py:257:            1 for keyword in originality_keywords if keyword in content
./DuRiCore/insight_evaluation_system.py:281:        practical_keywords = ["실용", "적용", "실제", "유용", "효과", "결과", "해결"]
./DuRiCore/insight_evaluation_system.py:282:        practical_count = sum(1 for keyword in practical_keywords if keyword in content)
./DuRiCore/insight_evaluation_system.py:286:        action_keywords = ["해야 한다", "해야 한다", "필요하다", "권장한다", "제안한다"]
./DuRiCore/insight_evaluation_system.py:287:        action_count = sum(1 for keyword in action_keywords if keyword in content)
./DuRiCore/insight_evaluation_system.py:293:            if any(keyword in conclusion for keyword in practical_keywords):
./DuRiCore/insight_evaluation_system.py:358:                "keywords": ["모든", "항상", "절대", "완전히", "전혀"],
./DuRiCore/insight_evaluation_system.py:363:                "keywords": ["끔찍한", "놀라운", "믿을 수 없는", "충격적인"],
./DuRiCore/insight_evaluation_system.py:368:                "keywords": ["따라서", "그러므로", "결론적으로"],
./DuRiCore/insight_evaluation_system.py:373:                "keywords": ["아마도", "어쩌면", "추정", "가능성"],
./DuRiCore/insight_evaluation_system.py:378:                "keywords": ["하지만", "그런데", "반면", "다른 한편"],
./DuRiCore/insight_evaluation_system.py:388:                "keywords": ["연구에 따르면", "데이터는", "사실은", "증거로"],
./DuRiCore/insight_evaluation_system.py:393:                "keywords": ["한편으로는", "다른 한편으로는", "양면적", "복합적"],
./DuRiCore/insight_evaluation_system.py:398:                "keywords": ["해결책은", "방법은", "전략은", "접근법은"],
./DuRiCore/insight_evaluation_system.py:403:                "keywords": ["분석해보면", "탐구해보면", "고찰해보면", "검토해보면"],
./DuRiCore/insight_evaluation_system.py:408:                "keywords": ["새로운 관점", "혁신적", "독창적", "차별화된"],
./DuRiCore/insight_evaluation_system.py:483:        evidence_keywords = ["연구", "데이터", "사실", "증거", "확인", "검증", "입증"]
./DuRiCore/insight_evaluation_system.py:484:        evidence_count = sum(1 for keyword in evidence_keywords if keyword in content)
./DuRiCore/insight_evaluation_system.py:491:                p for p in premises if any(kw in str(p) for kw in evidence_keywords)
./DuRiCore/insight_evaluation_system.py:505:        logical_keywords = [
./DuRiCore/insight_evaluation_system.py:514:        logical_count = sum(1 for keyword in logical_keywords if keyword in content)
./DuRiCore/insight_evaluation_system.py:532:        originality_keywords = ["새로운", "독창", "혁신", "창의", "독특", "차별화"]
./DuRiCore/insight_evaluation_system.py:534:            1 for keyword in originality_keywords if keyword in content
./DuRiCore/insight_evaluation_system.py:553:        practical_keywords = ["실용", "적용", "실제", "유용", "효과", "해결", "방법"]
./DuRiCore/insight_evaluation_system.py:554:        practical_count = sum(1 for keyword in practical_keywords if keyword in content)
./DuRiCore/insight_evaluation_system.py:560:            if any(keyword in conclusion for keyword in practical_keywords):
./DuRiCore/insight_evaluation_system.py:571:            keywords = pattern["keywords"]
./DuRiCore/insight_evaluation_system.py:574:            keyword_count = sum(1 for keyword in keywords if keyword in content)
./DuRiCore/insight_evaluation_system.py:575:            if keyword_count > 0:
./DuRiCore/insight_evaluation_system.py:577:                    f"{pattern_name}: {keyword_count}개 키워드 발견 (심각도: {severity})"
./DuRiCore/insight_evaluation_system.py:588:            keywords = pattern["keywords"]
./DuRiCore/insight_evaluation_system.py:591:            keyword_count = sum(1 for keyword in keywords if keyword in content)
./DuRiCore/insight_evaluation_system.py:592:            if keyword_count > 0:
./DuRiCore/insight_evaluation_system.py:594:                    f"{pattern_name}: {keyword_count}개 키워드 발견 (강도: {strength})"
./DuRiCore/day8_integration_test.py:113:                async def get_data(self, key: str):
./DuRiCore/day8_integration_test.py:114:                    return {"system": self.name, "key": key, "value": f"data_{key}"}
./DuRiCore/day8_integration_test.py:136:                {"data_key": "attention_data"},
./DuRiCore/day8_integration_test.py:149:                    "parameters": {"key": "test"},
./DuRiCore/inner_thinking_system.py:799:        complex_keywords = ["복잡", "다차원", "통합", "시스템", "관계", "상호작용"]
./DuRiCore/inner_thinking_system.py:800:        for keyword in complex_keywords:
./DuRiCore/inner_thinking_system.py:801:            if keyword in topic:
./DuRiCore/test_goal_stack_integration.py:172:                "goal_result_keys": list(goal_result.keys()),
./DuRiCore/test_goal_stack_integration.py:230:                priority_scores, key=lambda x: x["score"], reverse=True
./DuRiCore/test_goal_stack_integration.py:404:                "goal_result_keys": list(goal_result.keys()),
./DuRiCore/DAY12_COMPLETION_REPORT.md:113:        self.emotion_keywords = {
./DuRiCore/snapshot_manager.py:211:                self.snapshots.values(), key=lambda x: x.timestamp, reverse=True
./DuRiCore/final_integration_system_backup.py:727:        for key in metrics_before:
./DuRiCore/final_integration_system_backup.py:728:            if key in metrics_after:
./DuRiCore/final_integration_system_backup.py:729:                before = metrics_before[key]
./DuRiCore/final_integration_system_backup.py:730:                after = metrics_after[key]
./DuRiCore/final_integration_system_backup.py:745:        for key in metrics_before:
./DuRiCore/final_integration_system_backup.py:746:            if key in metrics_after and "usage" in key.lower():
./DuRiCore/final_integration_system_backup.py:747:                before = metrics_before[key]
./DuRiCore/final_integration_system_backup.py:748:                after = metrics_after[key]
./DuRiCore/final_integration_system_backup.py:814:            for key, value in point["metrics"].items():
./DuRiCore/final_integration_system_backup.py:815:                if "_performance" in key and key != "overall_performance":
./DuRiCore/final_integration_system_backup.py:816:                    system_name = key.replace("_performance", "")
./DuRiCore/reasoning_graph_system.py:107:        root_nodes.extend(situation_nodes.keys())
./DuRiCore/reasoning_graph_system.py:122:        leaf_nodes.extend(conclusion_nodes.keys())
./DuRiCore/reasoning_graph_system.py:469:        conclusion_keywords = set(re.findall(r"\w+", conclusion.lower()))
./DuRiCore/reasoning_graph_system.py:470:        premise_keywords = set()
./DuRiCore/reasoning_graph_system.py:472:            premise_keywords.update(re.findall(r"\w+", premise.lower()))
./DuRiCore/reasoning_graph_system.py:475:        if not conclusion_keywords.issubset(premise_keywords):
./DuRiCore/reasoning_graph_system.py:530:        premise_keywords = set()
./DuRiCore/reasoning_graph_system.py:532:            premise_keywords.update(re.findall(r"\w+", premise.lower()))
./DuRiCore/reasoning_graph_system.py:534:        conclusion_keywords = set(re.findall(r"\w+", conclusion.lower()))
./DuRiCore/reasoning_graph_system.py:536:        overlap = len(premise_keywords.intersection(conclusion_keywords))
./DuRiCore/reasoning_graph_system.py:537:        total = len(premise_keywords.union(conclusion_keywords))
./DuRiCore/emotion_weight_system.py:594:            emotion_key = current_emotion.value
./DuRiCore/emotion_weight_system.py:595:            if emotion_key in weights:
./DuRiCore/emotion_weight_system.py:596:                weights[emotion_key] = min(0.5, weights[emotion_key] + intensity * 0.3)
./DuRiCore/emotion_weight_system.py:665:        positive_keywords = [
./DuRiCore/emotion_weight_system.py:673:        if any(keyword in context_text for keyword in positive_keywords):
./DuRiCore/emotion_weight_system.py:678:        negative_keywords = [
./DuRiCore/emotion_weight_system.py:686:        if any(keyword in context_text for keyword in negative_keywords):
./DuRiCore/emotion_weight_system.py:691:        urgent_keywords = ["urgent", "critical", "emergency", "deadline", "pressure"]
./DuRiCore/emotion_weight_system.py:692:        if any(keyword in context_text for keyword in urgent_keywords):
./DuRiCore/emotion_weight_system.py:697:        creative_keywords = [
./DuRiCore/emotion_weight_system.py:704:        if any(keyword in context_text for keyword in creative_keywords):
./DuRiCore/ethical_judgment_system.py:406:        for keyword, related_principles in principle_mapping.items():
./DuRiCore/ethical_judgment_system.py:407:            if keyword in description:
./DuRiCore/ethical_judgment_system.py:537:        return max(evaluated_alternatives, key=lambda x: x["overall_score"])
./DuRiCore/test_auto_registration.py:264:    except KeyboardInterrupt:
./DuRiCore/final_integration_system.py:269:        remaining_systems = set(self.systems.keys())
./DuRiCore/final_integration_system.py:392:        for system_name in self.systems.keys():
./DuRiCore/final_integration_system.py:588:            systems_validated = list(self.systems.keys())
./DuRiCore/emotional_thinking_system.py:345:        emotion_keywords = {
./DuRiCore/emotional_thinking_system.py:358:        for emotion, keywords in emotion_keywords.items():
./DuRiCore/emotional_thinking_system.py:359:            for keyword in keywords:
./DuRiCore/emotional_thinking_system.py:360:                if keyword in context_text:
./DuRiCore/emotional_thinking_system.py:364:            primary_emotion = max(emotion_scores.items(), key=lambda x: x[1])[0]
./DuRiCore/emotional_thinking_system.py:382:        intensity_keywords = ["강렬", "심각", "중요", "긴급", "위험", "극적"]
./DuRiCore/emotional_thinking_system.py:383:        keyword_intensity = 0.0
./DuRiCore/emotional_thinking_system.py:385:        for keyword in intensity_keywords:
./DuRiCore/emotional_thinking_system.py:386:            if keyword in context_text:
./DuRiCore/emotional_thinking_system.py:387:                keyword_intensity += 0.2
./DuRiCore/emotional_thinking_system.py:389:        keyword_intensity = min(keyword_intensity, 1.0)
./DuRiCore/emotional_thinking_system.py:395:            + keyword_intensity * 0.3
./DuRiCore/emotional_thinking_system.py:732:        best_insight = max(insights, key=lambda x: x.confidence)
./DuRiCore/DAY3_COMPLETION_REPORT.md:32:special_complexity_keywords = ["다양한", "여러", "다중", "다면적", "복합적", "통합적", "종합적", "포괄적"]
./DuRiCore/DAY3_COMPLETION_REPORT.md:46:special_general_keywords = ["일반", "일상", "보통", "평상시", "평소", "일반적", "일상적"]
./DuRiCore/DAY3_COMPLETION_REPORT.md:115:special_complexity_keywords = ["다양한", "여러", "다중", "다면적", "복합적", "통합적", "종합적", "포괄적"]
./DuRiCore/DAY3_COMPLETION_REPORT.md:116:special_complexity_score = sum(1.0 for kw in special_complexity_keywords if kw in text) / len(special_complexity_keywords)
./DuRiCore/DAY3_COMPLETION_REPORT.md:121:special_general_keywords = ["일반", "일상", "보통", "평상시", "평소", "일반적", "일상적"]
./DuRiCore/DAY3_COMPLETION_REPORT.md:122:special_general_score = sum(1.0 for kw in special_general_keywords if kw in text) / len(special_general_keywords)
./DuRiCore/self_directed_learning_system.py:448:        goals.sort(key=lambda x: x.priority, reverse=True)
./DuRiCore/performance_enhancement_system.py:303:                target_metrics=list(adjustment_data.keys()),
./DuRiCore/loop_performance_optimizer.py:150:            bottlenecks.sort(key=lambda x: x.severity, reverse=True)
./DuRiCore/phase2_results/phase2_completion_report.json:192:    "key_innovations": [
./DuRiCore/realtime_learning_system.py:309:        filtered_data.sort(key=lambda x: x.timestamp, reverse=True)
./DuRiCore/realtime_learning_system.py:632:        keywords1 = set(re.findall(r"[가-힣a-zA-Z]+", text1.lower()))
./DuRiCore/realtime_learning_system.py:633:        keywords2 = set(re.findall(r"[가-힣a-zA-Z]+", text2.lower()))
./DuRiCore/realtime_learning_system.py:635:        if not keywords1 or not keywords2:
./DuRiCore/realtime_learning_system.py:638:        intersection = len(keywords1.intersection(keywords2))
./DuRiCore/realtime_learning_system.py:639:        union = len(keywords1.union(keywords2))
./DuRiCore/CACHE_OPTIMIZATION_COMPLETION_SUMMARY.md:18:def _optimize_cache_key(self, input_data: Dict[str, Any], context: Dict[str, Any]) -> str:
./DuRiCore/CACHE_OPTIMIZATION_COMPLETION_SUMMARY.md:28:    key_content = f"{normalized_data}:{normalized_context}"
./DuRiCore/CACHE_OPTIMIZATION_COMPLETION_SUMMARY.md:29:    return hashlib.md5(key_content.encode()).hexdigest()
./DuRiCore/CACHE_OPTIMIZATION_COMPLETION_SUMMARY.md:56:        key=lambda x: x[1].get('last_accessed', x[1]['timestamp'])
./DuRiCore/CACHE_OPTIMIZATION_COMPLETION_SUMMARY.md:63:            key = sorted_items[i][0]
./DuRiCore/CACHE_OPTIMIZATION_COMPLETION_SUMMARY.md:64:            del self.cache[key]
./DuRiCore/CACHE_OPTIMIZATION_COMPLETION_SUMMARY.md:120:def _advanced_cache_key_generation(self, input_data: Dict[str, Any], context: Dict[str, Any]) -> str:
./DuRiCore/INTEGRATED_PERFORMANCE_OPTIMIZATION_SUMMARY.md:63:def _generate_cache_key(self, input_data: Dict[str, Any], context: Dict[str, Any]) -> str:
./DuRiCore/INTEGRATED_PERFORMANCE_OPTIMIZATION_SUMMARY.md:64:    content = f"{json.dumps(input_data, sort_keys=True)}:{json.dumps(context, sort_keys=True)}"
./DuRiCore/INTEGRATED_PERFORMANCE_OPTIMIZATION_SUMMARY.md:77:    sorted_tasks = sorted(tasks, key=lambda x: x.priority.value)
./DuRiCore/INTEGRATED_PERFORMANCE_OPTIMIZATION_SUMMARY.md:89:    return max(available_nodes, key=lambda x: x[1])[0]
./DuRiCore/semantic_connection_system.py:122:            "keyword_overlap": {"weight": 0.3, "description": "키워드 중복도"},
./DuRiCore/semantic_connection_system.py:130:        cache_key = f"{hash(text1)}_{hash(text2)}"
./DuRiCore/semantic_connection_system.py:131:        if cache_key in self.similarity_cache:
./DuRiCore/semantic_connection_system.py:132:            return self.similarity_cache[cache_key]
./DuRiCore/semantic_connection_system.py:138:        keyword_overlap = await self._calculate_keyword_overlap(text1, text2)
./DuRiCore/semantic_connection_system.py:149:            + keyword_overlap * 0.4  # 0.3 -> 0.4
./DuRiCore/semantic_connection_system.py:155:        overall_similarity = max(overall_similarity, keyword_overlap * 0.5)
./DuRiCore/semantic_connection_system.py:159:            self.similarity_cache[cache_key] = overall_similarity
./DuRiCore/semantic_connection_system.py:177:    async def _calculate_keyword_overlap(self, text1: str, text2: str) -> float:
./DuRiCore/semantic_connection_system.py:180:        keywords1 = set(re.findall(r"[가-힣a-zA-Z]+", text1.lower()))
./DuRiCore/semantic_connection_system.py:181:        keywords2 = set(re.findall(r"[가-힣a-zA-Z]+", text2.lower()))
./DuRiCore/semantic_connection_system.py:184:        keywords1 = {word for word in keywords1 if len(word) >= 2}
./DuRiCore/semantic_connection_system.py:185:        keywords2 = {word for word in keywords2 if len(word) >= 2}
./DuRiCore/semantic_connection_system.py:187:        if not keywords1 or not keywords2:
./DuRiCore/semantic_connection_system.py:191:        intersection = len(keywords1.intersection(keywords2))
./DuRiCore/semantic_connection_system.py:192:        union = len(keywords1.union(keywords2))
./DuRiCore/semantic_connection_system.py:198:        common_keywords = keywords1.intersection(keywords2)
./DuRiCore/semantic_connection_system.py:199:        if common_keywords:
./DuRiCore/semantic_connection_system.py:201:            keyword_bonus = min(0.4, len(common_keywords) * 0.15)
./DuRiCore/semantic_connection_system.py:202:            jaccard_similarity += keyword_bonus
./DuRiCore/semantic_connection_system.py:205:        if common_keywords:
./DuRiCore/semantic_connection_system.py:213:        keyword_overlap = await self._calculate_keyword_overlap(text1, text2)
./DuRiCore/semantic_connection_system.py:214:        semantic_distance = 1.0 - keyword_overlap
./DuRiCore/semantic_connection_system.py:222:        context_keywords1 = self._extract_context_keywords(text1)
./DuRiCore/semantic_connection_system.py:223:        context_keywords2 = self._extract_context_keywords(text2)
./DuRiCore/semantic_connection_system.py:225:        if not context_keywords1 or not context_keywords2:
./DuRiCore/semantic_connection_system.py:229:        intersection = len(context_keywords1.intersection(context_keywords2))
./DuRiCore/semantic_connection_system.py:230:        union = len(context_keywords1.union(context_keywords2))
./DuRiCore/semantic_connection_system.py:234:    def _extract_context_keywords(self, text: str) -> Set[str]:
./DuRiCore/semantic_connection_system.py:237:        keywords = set()
./DuRiCore/semantic_connection_system.py:281:                keywords.add(word)
./DuRiCore/semantic_connection_system.py:283:        return keywords
./DuRiCore/semantic_connection_system.py:341:        potential_connections.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/semantic_connection_system.py:716:        keywords1 = set(re.findall(r"\w+", text1.lower()))
./DuRiCore/semantic_connection_system.py:717:        keywords2 = set(re.findall(r"\w+", text2.lower()))
./DuRiCore/semantic_connection_system.py:719:        if not keywords1 or not keywords2:
./DuRiCore/semantic_connection_system.py:722:        intersection = len(keywords1.intersection(keywords2))
./DuRiCore/semantic_connection_system.py:723:        union = len(keywords1.union(keywords2))
./DuRiCore/comprehensive_system_integration.py:291:                system_names = list(self.systems.keys())
./DuRiCore/comprehensive_system_integration.py:356:                system_names = list(self.systems.keys())
./DuRiCore/comprehensive_system_integration.py:950:    system_names = list(comprehensive_integration.systems.keys())
./DuRiCore/simple_test.py:110:    except KeyboardInterrupt:
./DuRiCore/adaptive_reasoning_system.py:253:        emotional_keywords = [
./DuRiCore/adaptive_reasoning_system.py:262:        creative_keywords = [
./DuRiCore/adaptive_reasoning_system.py:270:        logical_keywords = ["analyze", "logic", "reason", "proof", "evidence", "fact"]
./DuRiCore/adaptive_reasoning_system.py:275:            1 for keyword in emotional_keywords if keyword in data_str
./DuRiCore/adaptive_reasoning_system.py:277:        creative_count = sum(1 for keyword in creative_keywords if keyword in data_str)
./DuRiCore/adaptive_reasoning_system.py:278:        logical_count = sum(1 for keyword in logical_keywords if keyword in data_str)
./DuRiCore/philosophical_reasoning_system.py:201:        instrumentalization_keywords = ["이용", "수단", "도구", "조작", "사용"]
./DuRiCore/philosophical_reasoning_system.py:202:        for keyword in instrumentalization_keywords:
./DuRiCore/philosophical_reasoning_system.py:203:            if keyword in action:
./DuRiCore/philosophical_reasoning_system.py:207:                        "reasoning": f"'{keyword}' 행위는 인간을 수단으로만 취급한다",
./DuRiCore/philosophical_reasoning_system.py:208:                        "violations": [f"human_instrumentalization_{keyword}"],
./DuRiCore/philosophical_reasoning_system.py:215:        dignity_violation_keywords = ["모욕", "경멸", "무시", "억압"]
./DuRiCore/philosophical_reasoning_system.py:216:        for keyword in dignity_violation_keywords:
./DuRiCore/philosophical_reasoning_system.py:217:            if keyword in action:
./DuRiCore/philosophical_reasoning_system.py:221:                        "reasoning": f"'{keyword}' 행위는 인간의 존엄성을 침해한다",
./DuRiCore/philosophical_reasoning_system.py:222:                        "violations": [f"dignity_violation_{keyword}"],
./DuRiCore/modules/memory/memory_manager.py:56:    def store_long_term(self, key: str, data: Any):
./DuRiCore/modules/memory/memory_manager.py:60:        self.long_term_memory[key] = {
./DuRiCore/modules/memory/memory_manager.py:68:    def retrieve_long_term(self, key: str) -> Optional[Any]:
./DuRiCore/modules/memory/memory_manager.py:72:        if key in self.long_term_memory:
./DuRiCore/modules/memory/memory_manager.py:73:            self.long_term_memory[key]["access_count"] += 1
./DuRiCore/modules/memory/memory_manager.py:75:            return self.long_term_memory[key]["data"]
./DuRiCore/modules/memory/memory_manager.py:78:    def store_short_term(self, key: str, data: Any):
./DuRiCore/modules/memory/memory_manager.py:82:        self.short_term_memory[key] = {
./DuRiCore/modules/memory/memory_manager.py:88:    def retrieve_short_term(self, key: str) -> Optional[Any]:
./DuRiCore/modules/memory/memory_manager.py:92:        return self.short_term_memory.get(key, {}).get("data")
./DuRiCore/modules/thought_flow/self_reflection_loop.py:270:                belief_key = f"belief_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
./DuRiCore/modules/thought_flow/self_reflection_loop.py:278:                self.core_beliefs[belief_key] = belief_value
./DuRiCore/modules/thought_flow/self_reflection_loop.py:279:                updated_beliefs.append(belief_key)
./DuRiCore/modules/thought_flow/self_reflection_loop.py:290:                rule_key = f"rule_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
./DuRiCore/modules/thought_flow/self_reflection_loop.py:299:                self.judgment_rules[rule_key] = rule_value
./DuRiCore/modules/thought_flow/self_reflection_loop.py:300:                updated_rules.append(rule_key)
./DuRiCore/modules/evolution/self_evolution_manager.py:210:        beliefs_to_update.sort(key=lambda x: x["priority"], reverse=True)
./DuRiCore/modules/evolution/self_evolution_manager.py:258:        rules_to_update.sort(key=lambda x: x["priority"], reverse=True)
./DuRiCore/modules/evolution/self_evolution_manager.py:267:            belief_key = f"belief_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
./DuRiCore/modules/evolution/self_evolution_manager.py:276:            self.core_beliefs[belief_key] = belief_value
./DuRiCore/modules/evolution/self_evolution_manager.py:277:            updated_beliefs.append(belief_key)
./DuRiCore/modules/evolution/self_evolution_manager.py:286:            rule_key = f"rule_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
./DuRiCore/modules/evolution/self_evolution_manager.py:296:            self.judgment_rules[rule_key] = rule_value
./DuRiCore/modules/evolution/self_evolution_manager.py:297:            updated_rules.append(rule_key)
./DuRiCore/modules/evolution/self_evolution_manager.py:324:                    behavior_key = (
./DuRiCore/modules/evolution/self_evolution_manager.py:344:                    self.behavior_patterns[behavior_key] = behavior_value
./DuRiCore/modules/evolution/self_evolution_manager.py:345:                    updated_behaviors.append(behavior_key)
./DuRiCore/modules/evolution/self_evolution_manager.py:440:        for belief_key, belief_value in self.core_beliefs.items():
./DuRiCore/evolution_algorithm.py:488:            targets.sort(key=lambda x: x["optimization_potential"], reverse=True)
./DuRiCore/evolution_algorithm.py:589:            opportunities.sort(key=lambda x: x["improvement_potential"], reverse=True)
./DuRiCore/evolution_algorithm.py:969:            targets.sort(key=lambda x: x["optimization_potential"], reverse=True)
./DuRiCore/evolution_algorithm.py:1046:            opportunities.sort(key=lambda x: x["improvement_potential"], reverse=True)
./DuRiCore/evolution_algorithm.py:1396:                "complexity": len(pattern.get("key_factors", [])),
./DuRiCore/evolution_algorithm.py:1726:                "key_factors": ["timing", "context"],
./DuRiCore/evolution_algorithm.py:1734:                "key_factors": ["complexity"],
./DuRiCore/consistency_enhancement_system.py:189:        common_keys = set(step1.keys()) & set(step2.keys())
./DuRiCore/consistency_enhancement_system.py:190:        if not common_keys:
./DuRiCore/consistency_enhancement_system.py:194:        for key in common_keys:
./DuRiCore/consistency_enhancement_system.py:195:            if step1[key] == step2[key]:
./DuRiCore/consistency_enhancement_system.py:225:        common_elements = set(prev_step.keys()) & set(current_step.keys())
./DuRiCore/consistency_enhancement_system.py:455:        common_keys = set(source1.keys()) & set(source2.keys())
./DuRiCore/consistency_enhancement_system.py:456:        if not common_keys:
./DuRiCore/consistency_enhancement_system.py:459:        connectivity_score = len(common_keys) / max(
./DuRiCore/consistency_enhancement_system.py:460:            len(source1.keys()), len(source2.keys())
./DuRiCore/health/runbook_map.py:205:        "recommended_actions": list(action_commands.keys())
./DuRiCore/health/canary_endpoint.py:17:from DuRiCore.health.alert_dedupe import should_send_alert, canary_failure_key, integrity_failure_key, record_failure
./DuRiCore/health/canary_endpoint.py:115:        canary_alert_key = canary_failure_key(overall_ok, recommendation, failure_reasons)
./DuRiCore/health/canary_endpoint.py:116:        integrity_alert_key = integrity_failure_key(
./DuRiCore/health/canary_endpoint.py:125:            record_failure(failure_reasons, canary_alert_key)
./DuRiCore/health/canary_endpoint.py:170:            if should_send_alert("canary", canary_alert_key, {
./DuRiCore/health/canary_endpoint.py:180:            if should_send_alert("integrity", integrity_alert_key, {
./DuRiCore/health/alert_dedupe.py:19:    def __init__(self, ttl_sec: int = None, max_keys: int = None):
./DuRiCore/health/alert_dedupe.py:23:            max_keys: 최대 키 수 (ENV에서 가져오거나 기본값 사용)
./DuRiCore/health/alert_dedupe.py:27:        self.max = max_keys or int(os.getenv("DURI_ALERT_DEDUPE_MAX_KEYS", "512"))
./DuRiCore/health/alert_dedupe.py:28:        self.store = OrderedDict()  # key -> (timestamp, metadata)
./DuRiCore/health/alert_dedupe.py:34:        logger.info(f"DedupeCache 초기화: ttl={self.ttl}s, max_keys={self.max}")
./DuRiCore/health/alert_dedupe.py:36:    def seen(self, key: str, metadata: Dict[str, Any] = None) -> bool:
./DuRiCore/health/alert_dedupe.py:41:            key: 디듀프 키
./DuRiCore/health/alert_dedupe.py:52:        if key in self.store:
./DuRiCore/health/alert_dedupe.py:54:            self.store.move_to_end(key)
./DuRiCore/health/alert_dedupe.py:58:        self.store[key] = (now, metadata or {})
./DuRiCore/health/alert_dedupe.py:62:            oldest_key = self.store.popitem(last=False)[0]
./DuRiCore/health/alert_dedupe.py:65:            logger.debug(f"DedupeCache 키 제거: {oldest_key}")
./DuRiCore/health/alert_dedupe.py:69:    def get_metadata(self, key: str) -> Dict[str, Any]:
./DuRiCore/health/alert_dedupe.py:71:        if key in self.store:
./DuRiCore/health/alert_dedupe.py:72:            return self.store[key][1]
./DuRiCore/health/alert_dedupe.py:81:            "total_keys": len(self.store),
./DuRiCore/health/alert_dedupe.py:83:            "max_keys": self.max,
./DuRiCore/health/alert_dedupe.py:87:            "oldest_key": min(self.store.keys()) if self.store else None,
./DuRiCore/health/alert_dedupe.py:88:            "newest_key": max(self.store.keys()) if self.store else None
./DuRiCore/health/alert_dedupe.py:93:        expired_keys = []
./DuRiCore/health/alert_dedupe.py:95:        for key, (timestamp, _) in self.store.items():
./DuRiCore/health/alert_dedupe.py:97:                expired_keys.append(key)
./DuRiCore/health/alert_dedupe.py:99:        for key in expired_keys:
./DuRiCore/health/alert_dedupe.py:100:            self.store.pop(key, None)
./DuRiCore/health/alert_dedupe.py:102:        if expired_keys:
./DuRiCore/health/alert_dedupe.py:103:            logger.debug(f"DedupeCache 만료된 키 제거: {len(expired_keys)}개")
./DuRiCore/health/alert_dedupe.py:122:        self.failure_history = deque()  # (timestamp, failure_reasons, alert_key)
./DuRiCore/health/alert_dedupe.py:127:    def record_failure(self, failure_reasons: List[str], alert_key: str):
./DuRiCore/health/alert_dedupe.py:133:            alert_key: 알람 키
./DuRiCore/health/alert_dedupe.py:138:            self.failure_history.append((now, failure_reasons, alert_key))
./DuRiCore/health/alert_dedupe.py:169:                (ts, reasons, key) for ts, reasons, key in self.failure_history 
./DuRiCore/health/alert_dedupe.py:185:            for ts, reasons, key in window_failures:
./DuRiCore/health/alert_dedupe.py:188:                reason_key = "|".join(sorted_reasons)
./DuRiCore/health/alert_dedupe.py:190:                failure_counts[reason_key] += 1
./DuRiCore/health/alert_dedupe.py:191:                details = failure_details[reason_key]
./DuRiCore/health/alert_dedupe.py:199:            for reason_key, count in sorted(failure_counts.items(), key=lambda x: x[1], reverse=True)[:top_n]:
./DuRiCore/health/alert_dedupe.py:200:                details = failure_details[reason_key]
./DuRiCore/health/alert_dedupe.py:206:                    "failure_key": reason_key,
./DuRiCore/health/alert_dedupe.py:313:def alarm_key(reasons: List[str]) -> str:
./DuRiCore/health/alert_dedupe.py:328:    key = hashlib.sha1(payload.encode('utf-8')).hexdigest()
./DuRiCore/health/alert_dedupe.py:330:    logger.debug(f"알람 키 생성: reasons={reasons} -> key={key}")
./DuRiCore/health/alert_dedupe.py:331:    return key
./DuRiCore/health/alert_dedupe.py:333:def canary_failure_key(canary_ok: bool, recommendation: str, failure_reasons: List[str]) -> str:
./DuRiCore/health/alert_dedupe.py:351:    return alarm_key(all_reasons)
./DuRiCore/health/alert_dedupe.py:353:def integrity_failure_key(integrity_ok: bool, integrity_status: str, 
./DuRiCore/health/alert_dedupe.py:380:    return alarm_key(reasons)
./DuRiCore/health/alert_dedupe.py:387:def should_send_alert(alert_type: str, key: str, metadata: Dict[str, Any] = None) -> bool:
./DuRiCore/health/alert_dedupe.py:393:        key: 디듀프 키
./DuRiCore/health/alert_dedupe.py:399:    if not key:  # 빈 키는 전송하지 않음
./DuRiCore/health/alert_dedupe.py:407:    full_key = f"{alert_type}:{key}"
./DuRiCore/health/alert_dedupe.py:410:    is_duplicate = dedupe_cache.seen(full_key, metadata)
./DuRiCore/health/alert_dedupe.py:413:        logger.debug(f"알람 디듀프: {alert_type} 키 {key} 중복 감지")
./DuRiCore/health/alert_dedupe.py:416:    logger.info(f"알람 전송: {alert_type} 키 {key} 새로운 알람")
./DuRiCore/health/alert_dedupe.py:419:def record_failure(failure_reasons: List[str], alert_key: str):
./DuRiCore/health/alert_dedupe.py:421:    failure_tracker.record_failure(failure_reasons, alert_key)
./DuRiCore/health/config.py:110:    def get(self, key: str, default: Any = None) -> Any:
./DuRiCore/health/config.py:115:            key: 설정 키
./DuRiCore/health/config.py:122:        return config.get(key, default or self._defaults.get(key))
./DuRiCore/memory_optimization_system.py:707:            expired_keys = []
./DuRiCore/memory_optimization_system.py:710:            for key, metadata in self.cache_metadata.items():
./DuRiCore/memory_optimization_system.py:712:                    expired_keys.append(key)
./DuRiCore/memory_optimization_system.py:715:            for key in expired_keys:
./DuRiCore/memory_optimization_system.py:716:                del self.memory_cache[key]
./DuRiCore/memory_optimization_system.py:717:                del self.cache_metadata[key]
./DuRiCore/memory_optimization_system.py:724:                    key=lambda x: x[1].get("last_accessed", current_time),
./DuRiCore/memory_optimization_system.py:730:                        key = sorted_items[i][0]
./DuRiCore/memory_optimization_system.py:731:                        del self.memory_cache[key]
./DuRiCore/memory_optimization_system.py:732:                        del self.cache_metadata[key]
./DuRiCore/memory_optimization_system.py:734:            logger.debug(f"메모리 캐시 정리 완료: {len(expired_keys)}개 항목 제거")
./DuRiCore/async_optimization_system.py:187:                sorted(self.task_queue, key=lambda x: x[0], reverse=True)
./DuRiCore/semantic_situation_classifier.py:118:                    "keywords": ["보호", "위험", "상처", "걱정"],
./DuRiCore/semantic_situation_classifier.py:124:                    "keywords": ["이익", "이득", "편의", "회피"],
./DuRiCore/semantic_situation_classifier.py:132:                    "keywords": ["희생", "구원", "더 많은", "최대"],
./DuRiCore/semantic_situation_classifier.py:142:                    "keywords": ["강제", "어쩔 수 없이", "불가피"],
./DuRiCore/semantic_situation_classifier.py:150:                    "keywords": ["효율", "최적화", "생산성", "비용"],
./DuRiCore/semantic_situation_classifier.py:156:                    "keywords": ["공정", "평등", "분배", "기회"],
./DuRiCore/semantic_situation_classifier.py:164:                    "keywords": ["갈등", "싸움", "불화", "대립"],
./DuRiCore/semantic_situation_classifier.py:170:                    "keywords": ["체계", "제도", "구조", "시스템"],
./DuRiCore/semantic_situation_classifier.py:363:        motivation_keywords = ["위해", "때문에", "이유로", "목적으로", "결과로"]
./DuRiCore/semantic_situation_classifier.py:364:        for keyword in motivation_keywords:
./DuRiCore/semantic_situation_classifier.py:365:            if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:366:                context["motivations"].append(keyword)
./DuRiCore/semantic_situation_classifier.py:369:        circumstance_keywords = ["상황", "경우", "때", "상황에서", "경우에"]
./DuRiCore/semantic_situation_classifier.py:370:        for keyword in circumstance_keywords:
./DuRiCore/semantic_situation_classifier.py:371:            if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:372:                context["circumstances"].append(keyword)
./DuRiCore/semantic_situation_classifier.py:390:        for intent_type, keywords in self.intent_patterns.items():
./DuRiCore/semantic_situation_classifier.py:392:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier.py:393:                if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:398:        max_intent = max(intent_scores.items(), key=lambda x: x[1])
./DuRiCore/semantic_situation_classifier.py:451:        for stakeholder_type, keywords in basic_stakeholders.items():
./DuRiCore/semantic_situation_classifier.py:452:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier.py:453:                if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:494:        for value_type, keywords in self.value_patterns.items():
./DuRiCore/semantic_situation_classifier.py:495:            if any(keyword in situation for keyword in keywords):
./DuRiCore/semantic_situation_classifier.py:618:        unique_keywords = len(set(situation.split()))
./DuRiCore/semantic_situation_classifier.py:619:        if unique_keywords > 10:
./DuRiCore/semantic_situation_classifier.py:635:        urgency_keywords = ["긴급", "즉시", "당장", "빨리", "시급", "위험", "위기"]
./DuRiCore/semantic_situation_classifier.py:636:        for keyword in urgency_keywords:
./DuRiCore/semantic_situation_classifier.py:637:            if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:642:        time_keywords = ["시간", "마감", "기한", "마지막", "최후"]
./DuRiCore/semantic_situation_classifier.py:643:        for keyword in time_keywords:
./DuRiCore/semantic_situation_classifier.py:644:            if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:673:        matched_keywords = 0
./DuRiCore/semantic_situation_classifier.py:674:        total_keywords = 0
./DuRiCore/semantic_situation_classifier.py:676:        for intent_type, keywords in self.intent_patterns.items():
./DuRiCore/semantic_situation_classifier.py:677:            total_keywords += len(keywords)
./DuRiCore/semantic_situation_classifier.py:678:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier.py:679:                if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:680:                    matched_keywords += 1
./DuRiCore/semantic_situation_classifier.py:682:        if total_keywords > 0:
./DuRiCore/semantic_situation_classifier.py:683:            keyword_accuracy = matched_keywords / total_keywords
./DuRiCore/semantic_situation_classifier.py:684:            confidence_score += keyword_accuracy * 0.2
./DuRiCore/semantic_situation_classifier.py:778:        for context_type, keywords in self.contextual_patterns[
./DuRiCore/semantic_situation_classifier.py:781:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier.py:782:                if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:788:        for context_type, keywords in self.contextual_patterns[
./DuRiCore/semantic_situation_classifier.py:791:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier.py:792:                if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:798:        for context_type, keywords in self.contextual_patterns[
./DuRiCore/semantic_situation_classifier.py:801:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier.py:802:                if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:808:        for context_type, keywords in self.contextual_patterns[
./DuRiCore/semantic_situation_classifier.py:811:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier.py:812:                if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:819:        for dynamic_type, keywords in self.power_dynamics_patterns.items():
./DuRiCore/semantic_situation_classifier.py:820:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier.py:821:                if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:829:        for factor_type, keywords in self.cultural_patterns.items():
./DuRiCore/semantic_situation_classifier.py:830:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier.py:831:                if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:838:        historical_keywords = ["과거", "이전", "전에", "지난", "경험", "기억"]
./DuRiCore/semantic_situation_classifier.py:839:        for keyword in historical_keywords:
./DuRiCore/semantic_situation_classifier.py:840:            if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:847:        urgency_keywords = {
./DuRiCore/semantic_situation_classifier.py:854:        for factor_type, keywords in urgency_keywords.items():
./DuRiCore/semantic_situation_classifier.py:855:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier.py:856:                if keyword in situation:
./DuRiCore/semantic_situation_classifier.py:869:        intensity_keywords = {
./DuRiCore/semantic_situation_classifier.py:875:        for level, keywords in intensity_keywords.items():
./DuRiCore/semantic_situation_classifier.py:876:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier.py:877:                if keyword in situation:
./DuRiCore/user_feedback_collector.py:73:    key_topics: List[str]
./DuRiCore/user_feedback_collector.py:259:                key=lambda x: self._calculate_suggestion_priority(x), reverse=True
./DuRiCore/user_feedback_collector.py:470:        issue_keywords = {
./DuRiCore/user_feedback_collector.py:483:                for issue_type, keywords in issue_keywords.items():
./DuRiCore/user_feedback_collector.py:484:                    if any(keyword in content for keyword in keywords):
./DuRiCore/user_feedback_collector.py:507:            most_common_type = max(type_counts, key=type_counts.get)
./DuRiCore/user_feedback_collector.py:518:            most_common_low = max(set(low_rating_types), key=low_rating_types.count)
./DuRiCore/error_handler.py:265:            for e in sorted(self.errors, key=lambda x: x.created_at, reverse=True)[:10]
./DuRiCore/duri_logging/setup.py:53:        safe_key = "component" if k == "module" else k
./DuRiCore/duri_logging/setup.py:56:        if safe_key in RESERVED:
./DuRiCore/duri_logging/setup.py:57:            safe_key = f"extra_{safe_key}"
./DuRiCore/duri_logging/setup.py:59:        out[safe_key] = v
./DuRiCore/duri_orchestrator.py:268:        for system_name in self.systems.keys():
./DuRiCore/duri_orchestrator.py:803:    except KeyboardInterrupt:
./DuRiCore/global_logging_manager.py:135:        (re.compile(r'(?i)\bpassword\s*[:=]\s*([^\s",}]+)'), r'password="***"'),
./DuRiCore/global_logging_manager.py:136:        (re.compile(r'(?i)\bapi[_-]?key\s*[:=]\s*([^\s",}]+)'), r'api_key="***"'),
./DuRiCore/global_logging_manager.py:138:        (re.compile(r'(?i)\bsecret\s*[:=]\s*([^\s",}]+)'), r'secret="***"'),
./DuRiCore/global_logging_manager.py:168:        for key, value in record.__dict__.items():
./DuRiCore/global_logging_manager.py:169:            if key not in ['name', 'msg', 'args', 'levelname', 'levelno', 'pathname', 
./DuRiCore/global_logging_manager.py:176:                log_entry[key] = value
./DuRiCore/unified_performance_optimizer.py:722:            expired_keys = []
./DuRiCore/unified_performance_optimizer.py:725:            for key, expiry_time in self.cache_ttl.items():
./DuRiCore/unified_performance_optimizer.py:727:                    expired_keys.append(key)
./DuRiCore/unified_performance_optimizer.py:730:            for key in expired_keys:
./DuRiCore/unified_performance_optimizer.py:731:                del self.cache[key]
./DuRiCore/unified_performance_optimizer.py:732:                del self.cache_ttl[key]
./DuRiCore/unified_performance_optimizer.py:737:                sorted_items = sorted(self.cache_ttl.items(), key=lambda x: x[1])
./DuRiCore/unified_performance_optimizer.py:742:                        key = sorted_items[i][0]
./DuRiCore/unified_performance_optimizer.py:743:                        del self.cache[key]
./DuRiCore/unified_performance_optimizer.py:744:                        del self.cache_ttl[key]
./DuRiCore/unified_performance_optimizer.py:746:            logger.debug(f"캐시 정리 완료: {len(expired_keys)}개 항목 제거")
./DuRiCore/goal_stack_system.py:240:            self.goal_stack.active_goals, key=lambda g: g.priority.value
./DuRiCore/goal_stack_system.py:300:                self.goal_stack.suspended_goals, key=lambda g: g.priority.value
./DuRiCore/goal_stack_system.py:433:            key=lambda g: self.calculate_goal_priority_score(g, context),
./DuRiCore/goal_stack_system.py:609:            best_goal = max(goals, key=lambda g: g.priority.value)
./DuRiCore/goal_stack_system.py:829:        urgency_keywords = ["urgent", "critical", "emergency", "deadline", "immediate"]
./DuRiCore/goal_stack_system.py:833:            1 for keyword in urgency_keywords if keyword in context_text
./DuRiCore/goal_stack_system.py:839:        importance_keywords = [
./DuRiCore/goal_stack_system.py:844:            "key",
./DuRiCore/goal_stack_system.py:850:            1 for keyword in importance_keywords if keyword in context_text
./DuRiCore/act_r_parallel_processor.py:106:            sorted_tasks = sorted(tasks, key=lambda x: x.priority.value)
./DuRiCore/self_improvement_system.py:689:            for key, value in current_performance.items():
./DuRiCore/self_improvement_system.py:691:                    if key in ["response_time"]:
./DuRiCore/self_improvement_system.py:692:                        improved_metrics[key] = max(value * 0.9, 0.2)
./DuRiCore/self_improvement_system.py:694:                        improved_metrics[key] = min(value * 1.1, 0.95)
./DuRiCore/self_improvement_system.py:696:                    improved_metrics[key] = value
./DuRiCore/phase_omega_evolution_integration.py:330:                assessments.items(), key=lambda x: x[1].complexity_score, reverse=True
./DuRiCore/quick_test.py:111:    except KeyboardInterrupt:
./DuRiCore/strategic_thinking_system.py:59:    key_metrics: Dict[str, float]
./DuRiCore/strategic_thinking_system.py:66:    def get(self, key: str, default=None):
./DuRiCore/strategic_thinking_system.py:68:        return getattr(self, key, default)
./DuRiCore/strategic_thinking_system.py:138:            key_metrics = await self._define_key_metrics(objectives)
./DuRiCore/strategic_thinking_system.py:161:                key_metrics=key_metrics,
./DuRiCore/strategic_thinking_system.py:469:    async def _define_key_metrics(self, objectives: List[str]) -> Dict[str, float]:
./DuRiCore/strategic_thinking_system.py:1067:            key_metrics={},
./DuRiCore/test_integrated_learning_system.py:222:        for key, value in final_summary.items():
./DuRiCore/test_integrated_learning_system.py:223:            if key != "test_timestamp":
./DuRiCore/test_integrated_learning_system.py:224:                print(f"  - {key}: {value}")
./DuRiCore/test_social_intelligence_registration.py:177:    except KeyboardInterrupt:
./DuRiCore/phase14_cursor_integration.py:126:            for key, value in kwargs.items():
./DuRiCore/phase14_cursor_integration.py:127:                if hasattr(context, key):
./DuRiCore/phase14_cursor_integration.py:128:                    setattr(context, key, value)
./DuRiCore/DAY2_COMPLETION_REPORT.md:38:ethical_keywords = {
./DuRiCore/DAY2_COMPLETION_REPORT.md:45:practical_keywords = {
./DuRiCore/DAY2_COMPLETION_REPORT.md:69:self.keyword_cache = {}
./DuRiCore/intrinsic_motivation_system.py:371:            return sorted(goals, key=lambda x: x.priority, reverse=True)
./DuRiCore/genetic_evolution_engine.py:229:                top_candidates, key=lambda x: x.fitness_score, reverse=True
./DuRiCore/genetic_evolution_engine.py:314:                best_individual = max(self.population, key=lambda x: x.fitness_score)
./DuRiCore/genetic_evolution_engine.py:358:            final_best = max(self.population, key=lambda x: x.fitness_score)
./DuRiCore/genetic_evolution_engine.py:443:                winner = max(tournament, key=lambda x: x.fitness_score)
./DuRiCore/deployment_system.py.backup:993:            "SECRET_KEY": "duri-phase9-secret-key",
./DuRiCore/deployment_system.py.backup:1002:            for key, value in env_vars.items():
./DuRiCore/deployment_system.py.backup:1003:                f.write(f"{key}={value}\n")
./DuRiCore/deployment_system.py.backup:1036:        return list(self.platform_configs.keys())
./DuRiCore/memory/vector_store.py:155:            similarities.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/memory/vector_store.py:227:        combined = f"{content}_{json.dumps(emotion_data, sort_keys=True)}_{json.dumps(context_data, sort_keys=True)}"
./DuRiCore/memory/vector_store.py:293:        context_keywords = [
./DuRiCore/memory/vector_store.py:312:        for i, keyword in enumerate(context_keywords):
./DuRiCore/memory/vector_store.py:315:            if keyword in str(context_data):
./DuRiCore/memory/vector_store.py:340:            for key, value in context_data.items():
./DuRiCore/memory/vector_store.py:342:                    tags.append(f"context:{key}:{value}")
./DuRiCore/memory/vector_store.py:417:            self.memories.values(), key=lambda x: x.accessed_count, reverse=True
./DuRiCore/memory/vector_store.py:427:            self.memories.values(), key=lambda x: x.importance, reverse=True
./DuRiCore/memory/judgment_strategy_applier.py:90:            key_fields = ["content", "situation", "context", "type", "description"]
./DuRiCore/memory/judgment_strategy_applier.py:93:            for field in key_fields:
./DuRiCore/memory/judgment_strategy_applier.py:112:            pattern_keywords = pattern_lower.split()
./DuRiCore/memory/judgment_strategy_applier.py:113:            matched_keywords = 0
./DuRiCore/memory/judgment_strategy_applier.py:115:            for keyword in pattern_keywords:
./DuRiCore/memory/judgment_strategy_applier.py:116:                if keyword in context_lower:
./DuRiCore/memory/judgment_strategy_applier.py:117:                    matched_keywords += 1
./DuRiCore/memory/judgment_strategy_applier.py:119:            if pattern_keywords:
./DuRiCore/memory/judgment_strategy_applier.py:120:                return matched_keywords / len(pattern_keywords)
./DuRiCore/memory/memory_sync/memory_synchronizer.py:128:                        sync_id TEXT PRIMARY KEY,
./DuRiCore/memory/memory_sync/memory_synchronizer.py:147:                        conflict_id TEXT PRIMARY KEY,
./DuRiCore/duri_expression_engine.py:255:            key_points = await self._extract_key_points(
./DuRiCore/duri_expression_engine.py:264:                key_points, template, context
./DuRiCore/duri_expression_engine.py:303:    async def _extract_key_points(
./DuRiCore/duri_expression_engine.py:310:        key_points = {
./DuRiCore/duri_expression_engine.py:321:            key_points["decision"] = judgment_data.get("decision", "")
./DuRiCore/duri_expression_engine.py:322:            key_points["reasoning"] = judgment_data.get("reasoning", "")
./DuRiCore/duri_expression_engine.py:323:            key_points["confidence"] = judgment_data.get("confidence", 0.0)
./DuRiCore/duri_expression_engine.py:324:            key_points["alternatives"] = judgment_data.get("alternatives", [])
./DuRiCore/duri_expression_engine.py:325:            key_points["context"] = judgment_data.get("context", {})
./DuRiCore/duri_expression_engine.py:330:                key_points["decision"] = thought_flow["final_decision"]
./DuRiCore/duri_expression_engine.py:332:                key_points["reasoning"] = self._extract_reasoning_from_thought_flow(
./DuRiCore/duri_expression_engine.py:336:                key_points["insights"].append(thought_flow["reflection_result"])
./DuRiCore/duri_expression_engine.py:341:                key_points["decision"] = decision_tree["final_decision"]
./DuRiCore/duri_expression_engine.py:343:                key_points["reasoning"] = decision_tree["reasoning_path"]
./DuRiCore/duri_expression_engine.py:345:        return key_points
./DuRiCore/duri_expression_engine.py:381:        key_points: Dict[str, Any],
./DuRiCore/duri_expression_engine.py:392:                key_points["confidence"]
./DuRiCore/duri_expression_engine.py:396:            if key_points["reasoning"] and len(key_points["reasoning"]) > 10:
./DuRiCore/duri_expression_engine.py:401:                    reasoning=key_points["reasoning"]
./DuRiCore/duri_expression_engine.py:408:            if key_points["alternatives"] and len(key_points["alternatives"]) > 0:
./DuRiCore/duri_expression_engine.py:414:                    key_points["alternatives"][:2]
./DuRiCore/duri_expression_engine.py:425:                decision=key_points["decision"] or "이 상황을 분석한 결과",
./DuRiCore/day18_hitl_quality_verifier.py:117:                    most_common = max(unique_labels, key=labels.count)
./DuRiCore/language_system/understanding/intent_recognizer.py:63:                max(intent_scores.items(), key=lambda x: x[1])[0]
./DuRiCore/language_system/understanding/semantic_analyzer.py:25:    keywords: List[str]
./DuRiCore/language_system/understanding/semantic_analyzer.py:26:    key_concepts: List[str]
./DuRiCore/language_system/understanding/semantic_analyzer.py:44:            keywords = self._extract_keywords(text)
./DuRiCore/language_system/understanding/semantic_analyzer.py:47:            key_concepts = self._extract_key_concepts(text)
./DuRiCore/language_system/understanding/semantic_analyzer.py:53:                "keywords": keywords,
./DuRiCore/language_system/understanding/semantic_analyzer.py:54:                "key_concepts": key_concepts,
./DuRiCore/language_system/understanding/semantic_analyzer.py:62:    def _extract_keywords(self, text: str) -> List[str]:
./DuRiCore/language_system/understanding/semantic_analyzer.py:68:            keywords = [
./DuRiCore/language_system/understanding/semantic_analyzer.py:71:            return keywords
./DuRiCore/language_system/understanding/semantic_analyzer.py:76:    def _extract_key_concepts(self, text: str) -> List[str]:
./DuRiCore/language_system/understanding/semantic_analyzer.py:135:            "keywords": [],
./DuRiCore/language_system/understanding/semantic_analyzer.py:136:            "key_concepts": [],
./DuRiCore/language_system/understanding/emotion_analyzer.py:34:        self.emotion_keywords = {
./DuRiCore/language_system/understanding/emotion_analyzer.py:56:            for emotion, keywords in self.emotion_keywords.items():
./DuRiCore/language_system/understanding/emotion_analyzer.py:58:                for keyword in keywords:
./DuRiCore/language_system/understanding/emotion_analyzer.py:59:                    if keyword in text:
./DuRiCore/language_system/understanding/emotion_analyzer.py:65:                max(emotion_scores.items(), key=lambda x: x[1])[0]
./DuRiCore/language_system/understanding/context_analyzer.py:93:        temporal_keywords = []
./DuRiCore/language_system/understanding/context_analyzer.py:96:            temporal_keywords.extend(matches)
./DuRiCore/language_system/understanding/context_analyzer.py:99:            "temporal_keywords": temporal_keywords,
./DuRiCore/language_system/understanding/context_analyzer.py:101:                len(temporal_keywords) / len(text.split()) if text.split() else 0
./DuRiCore/language_system/understanding/context_analyzer.py:114:        spatial_keywords = []
./DuRiCore/language_system/understanding/context_analyzer.py:117:            spatial_keywords.extend(matches)
./DuRiCore/language_system/understanding/context_analyzer.py:120:            "spatial_keywords": spatial_keywords,
./DuRiCore/language_system/understanding/context_analyzer.py:122:                len(spatial_keywords) / len(text.split()) if text.split() else 0
./DuRiCore/language_system/understanding/context_analyzer.py:129:        social_keywords = re.findall(
./DuRiCore/language_system/understanding/context_analyzer.py:134:            "social_keywords": social_keywords,
./DuRiCore/language_system/understanding/context_analyzer.py:136:                len(social_keywords) / len(text.split()) if text.split() else 0
./DuRiCore/language_system/understanding/context_analyzer.py:143:        topic_keywords = re.findall(
./DuRiCore/language_system/understanding/context_analyzer.py:148:            "topic_keywords": topic_keywords,
./DuRiCore/language_system/understanding/context_analyzer.py:150:                len(topic_keywords) / len(text.split()) if text.split() else 0
./DuRiCore/language_system/understanding/context_analyzer.py:157:        emotion_keywords = re.findall(
./DuRiCore/language_system/understanding/context_analyzer.py:162:            "emotion_keywords": emotion_keywords,
./DuRiCore/language_system/understanding/context_analyzer.py:164:                len(emotion_keywords) / len(text.split()) if text.split() else 0
./DuRiCore/language_system/understanding/context_analyzer.py:202:            "temporal_context": {"temporal_keywords": [], "temporal_relevance": 0.0},
./DuRiCore/language_system/understanding/context_analyzer.py:203:            "spatial_context": {"spatial_keywords": [], "spatial_relevance": 0.0},
./DuRiCore/language_system/understanding/context_analyzer.py:204:            "social_context": {"social_keywords": [], "social_relevance": 0.0},
./DuRiCore/language_system/understanding/context_analyzer.py:205:            "topical_context": {"topic_keywords": [], "topic_relevance": 0.0},
./DuRiCore/language_system/understanding/context_analyzer.py:206:            "emotional_context": {"emotion_keywords": [], "emotion_relevance": 0.0},
./DuRiCore/language_system/generation/emotional_generator.py:65:            emotion_keywords = {
./DuRiCore/language_system/generation/emotional_generator.py:72:            for emotion, keywords in emotion_keywords.items():
./DuRiCore/language_system/generation/emotional_generator.py:73:                for keyword in keywords:
./DuRiCore/language_system/generation/emotional_generator.py:74:                    if keyword in text:
./DuRiCore/language_system/generation/contextual_generator.py:60:            context_keywords = context.get("keywords", [])
./DuRiCore/language_system/generation/contextual_generator.py:63:            if not context_keywords:
./DuRiCore/language_system/generation/contextual_generator.py:66:            relevant_words = sum(1 for word in text_words if word in context_keywords)
./DuRiCore/language_system/core/integrated_language_system.py:76:                    understanding_result.key_concepts[0]
./DuRiCore/language_system/core/integrated_language_system.py:77:                    if understanding_result.key_concepts
./DuRiCore/language_system/core/integrated_language_system.py:81:                "keywords": understanding_result.key_concepts,
./DuRiCore/language_system/core/integrated_language_system.py:85:                    "key_concepts": understanding_result.key_concepts,
./DuRiCore/language_system/core/integrated_language_system.py:148:            if understanding_result.key_concepts:
./DuRiCore/language_system/core/integrated_language_system.py:149:                semantic_score = min(1.0, len(understanding_result.key_concepts) * 0.1)
./DuRiCore/language_system/core/deep_understanding_engine.py:56:            cache_key = hashlib.md5(
./DuRiCore/language_system/core/deep_understanding_engine.py:57:                f"{text}_{json.dumps(context, sort_keys=True) if context else '{}'}".encode()
./DuRiCore/language_system/core/deep_understanding_engine.py:59:            if cache_key in self.understanding_cache:
./DuRiCore/language_system/core/deep_understanding_engine.py:60:                return self.understanding_cache[cache_key]
./DuRiCore/language_system/core/deep_understanding_engine.py:93:                key_concepts=semantic_analysis.get("key_concepts", []),
./DuRiCore/language_system/core/deep_understanding_engine.py:107:            self.understanding_cache[cache_key] = understanding_result
./DuRiCore/language_system/core/deep_understanding_engine.py:143:            key_concepts=[],
./DuRiCore/language_system/core/data_structures.py:56:    key_concepts: List[str]
./DuRiCore/language_system/core/advanced_generation_engine.py:54:            cache_key = hashlib.md5(
./DuRiCore/language_system/core/advanced_generation_engine.py:55:                f"{json.dumps(context, sort_keys=True) if context else '{}'}_{generation_type.value}".encode()
./DuRiCore/language_system/core/advanced_generation_engine.py:57:            if cache_key in self.generation_cache:
./DuRiCore/language_system/core/advanced_generation_engine.py:58:                return self.generation_cache[cache_key]
./DuRiCore/language_system/core/advanced_generation_engine.py:63:            key_concepts = context.get("keywords", [])
./DuRiCore/language_system/core/advanced_generation_engine.py:72:            if key_concepts:
./DuRiCore/language_system/core/advanced_generation_engine.py:73:                enhanced_context["key_concepts"] = key_concepts
./DuRiCore/language_system/core/advanced_generation_engine.py:149:            self.generation_cache[cache_key] = generation_result
./DuRiCore/language_system/core/advanced_generation_engine.py:180:                key_concepts = context.get("key_concepts", [])
./DuRiCore/language_system/core/advanced_generation_engine.py:181:                if key_concepts:
./DuRiCore/language_system/core/advanced_generation_engine.py:183:                        1.0, semantic_quality + len(key_concepts) * 0.1
./DuRiCore/self_reflection_evolution_system.py:662:            "key_insights": len(self.evolution_state.self_reflections),
./DuRiCore/test_cache_optimization.py:52:            cache_key = system._generate_cache_key(test_input, test_context)
./DuRiCore/test_cache_optimization.py:53:            cached_result = system._get_from_cache(cache_key)
./DuRiCore/test_cache_optimization.py:63:                    "cache_key": cache_key,
./DuRiCore/test_cache_optimization.py:99:                    "nested": {"key": "value"},
./DuRiCore/test_cache_optimization.py:118:            cache_key = system._optimize_cache_key(
./DuRiCore/test_cache_optimization.py:126:                    "cache_key": cache_key,
./DuRiCore/test_cache_optimization.py:128:                    "key_length": len(cache_key),
./DuRiCore/test_cache_optimization.py:133:                f"   {test_case['name']}: {optimization_time:.3f}초, 키 길이: {len(cache_key)}"
./DuRiCore/logical_reasoning_engine.py:219:        self.keyword_cache = {}
./DuRiCore/logical_reasoning_engine.py:411:        keywords = self._extract_semantic_keywords(situation)
./DuRiCore/logical_reasoning_engine.py:414:        for keyword, weight in keywords.items():
./DuRiCore/logical_reasoning_engine.py:417:                ethical in keyword
./DuRiCore/logical_reasoning_engine.py:447:                practical in keyword
./DuRiCore/logical_reasoning_engine.py:478:                logical in keyword
./DuRiCore/logical_reasoning_engine.py:509:                value in keyword
./DuRiCore/logical_reasoning_engine.py:538:        conflict_keywords = [
./DuRiCore/logical_reasoning_engine.py:560:            for keyword, weight in keywords.items()
./DuRiCore/logical_reasoning_engine.py:561:            if any(conflict in keyword for conflict in conflict_keywords)
./DuRiCore/logical_reasoning_engine.py:567:        decision_keywords = [
./DuRiCore/logical_reasoning_engine.py:589:            for keyword, weight in keywords.items()
./DuRiCore/logical_reasoning_engine.py:590:            if any(decision in keyword for decision in decision_keywords)
./DuRiCore/logical_reasoning_engine.py:605:        keywords = self._extract_semantic_keywords(action)
./DuRiCore/logical_reasoning_engine.py:608:        for keyword, weight in keywords.items():
./DuRiCore/logical_reasoning_engine.py:611:                ethical in keyword
./DuRiCore/logical_reasoning_engine.py:636:                ethical in keyword
./DuRiCore/logical_reasoning_engine.py:662:                practical in keyword
./DuRiCore/logical_reasoning_engine.py:693:                logical in keyword
./DuRiCore/logical_reasoning_engine.py:724:                value in keyword
./DuRiCore/logical_reasoning_engine.py:770:            action in keyword
./DuRiCore/logical_reasoning_engine.py:771:            for keyword, weight in keywords.items()
./DuRiCore/logical_reasoning_engine.py:793:            action in keyword
./DuRiCore/logical_reasoning_engine.py:794:            for keyword, weight in keywords.items()
./DuRiCore/logical_reasoning_engine.py:801:    def _extract_semantic_keywords(self, text: str) -> Dict[str, float]:
./DuRiCore/logical_reasoning_engine.py:804:        if text in self.keyword_cache:
./DuRiCore/logical_reasoning_engine.py:805:            self._update_cache_stats("keyword_cache", True)
./DuRiCore/logical_reasoning_engine.py:806:            return self.keyword_cache[text]
./DuRiCore/logical_reasoning_engine.py:808:        self._update_cache_stats("keyword_cache", False)
./DuRiCore/logical_reasoning_engine.py:810:        keywords = {}
./DuRiCore/logical_reasoning_engine.py:813:        ethical_keywords = {
./DuRiCore/logical_reasoning_engine.py:841:        practical_keywords = {
./DuRiCore/logical_reasoning_engine.py:868:        logical_keywords = {
./DuRiCore/logical_reasoning_engine.py:895:        value_keywords = {
./DuRiCore/logical_reasoning_engine.py:922:        conflict_keywords = {
./DuRiCore/logical_reasoning_engine.py:944:        decision_keywords = {
./DuRiCore/logical_reasoning_engine.py:966:        all_keywords = {
./DuRiCore/logical_reasoning_engine.py:967:            **ethical_keywords,
./DuRiCore/logical_reasoning_engine.py:968:            **practical_keywords,
./DuRiCore/logical_reasoning_engine.py:969:            **logical_keywords,
./DuRiCore/logical_reasoning_engine.py:970:            **value_keywords,
./DuRiCore/logical_reasoning_engine.py:971:            **conflict_keywords,
./DuRiCore/logical_reasoning_engine.py:972:            **decision_keywords,
./DuRiCore/logical_reasoning_engine.py:976:        for keyword, weight in all_keywords.items():
./DuRiCore/logical_reasoning_engine.py:977:            if keyword in text:
./DuRiCore/logical_reasoning_engine.py:978:                keywords[keyword] = weight
./DuRiCore/logical_reasoning_engine.py:980:            elif len(keyword) > 2 and any(keyword in word for word in text.split()):
./DuRiCore/logical_reasoning_engine.py:981:                keywords[keyword] = weight * 0.7  # 부분 매칭은 70% 가중치
./DuRiCore/logical_reasoning_engine.py:984:        if len(self.keyword_cache) < self.max_cache_size:
./DuRiCore/logical_reasoning_engine.py:985:            self.keyword_cache[text] = keywords
./DuRiCore/logical_reasoning_engine.py:987:        return keywords
./DuRiCore/logical_reasoning_engine.py:1058:        cache_key = (tuple(vector1), tuple(vector2))
./DuRiCore/logical_reasoning_engine.py:1059:        if cache_key in self.similarity_cache:
./DuRiCore/logical_reasoning_engine.py:1060:            return self.similarity_cache[cache_key]
./DuRiCore/logical_reasoning_engine.py:1074:            self.similarity_cache[cache_key] = enhanced_similarity
./DuRiCore/logical_reasoning_engine.py:2335:        keywords1 = set(self._extract_semantic_keywords(text1).keys())
./DuRiCore/logical_reasoning_engine.py:2336:        keywords2 = set(self._extract_semantic_keywords(text2).keys())
./DuRiCore/logical_reasoning_engine.py:2338:        if not keywords1 and not keywords2:
./DuRiCore/logical_reasoning_engine.py:2341:        intersection = len(keywords1.intersection(keywords2))
./DuRiCore/logical_reasoning_engine.py:2342:        union = len(keywords1.union(keywords2))
./DuRiCore/logical_reasoning_engine.py:2551:        all_keywords = []
./DuRiCore/logical_reasoning_engine.py:2553:            keywords = self._extract_semantic_keywords(perspective.final_conclusion)
./DuRiCore/logical_reasoning_engine.py:2554:            all_keywords.extend(list(keywords.keys()))
./DuRiCore/logical_reasoning_engine.py:2559:        keyword_counts = Counter(all_keywords)
./DuRiCore/logical_reasoning_engine.py:2560:        common_keywords = [
./DuRiCore/logical_reasoning_engine.py:2561:            keyword
./DuRiCore/logical_reasoning_engine.py:2562:            for keyword, count in keyword_counts.items()
./DuRiCore/logical_reasoning_engine.py:2566:        if common_keywords:
./DuRiCore/logical_reasoning_engine.py:2567:            return f"공통 요소: {', '.join(common_keywords[:3])}"
./DuRiCore/logical_reasoning_engine.py:2667:        self.keyword_cache.clear()
./DuRiCore/logical_reasoning_engine.py:2678:            ("keyword", self.keyword_cache),
./DuRiCore/logical_reasoning_engine.py:2854:        expected_keywords = expected_outcome.lower().split()
./DuRiCore/logical_reasoning_engine.py:2855:        actual_keywords = result.final_conclusion.lower().split()
./DuRiCore/logical_reasoning_engine.py:2858:        common_keywords = set(expected_keywords) & set(actual_keywords)
./DuRiCore/logical_reasoning_engine.py:2860:        if not expected_keywords:
./DuRiCore/logical_reasoning_engine.py:2863:        accuracy = len(common_keywords) / len(expected_keywords)
./DuRiCore/emotional_self_awareness_system.py:412:        return max(emotion_counts.items(), key=lambda x: x[1])[0]
./DuRiCore/DuRiCore/modules/emotion_engine.py:37:        self.api_key = None  # 환경변수에서 로드
./DuRiCore/DuRiCore/modules/emotion_engine.py:65:        emotion_keywords = {
./DuRiCore/DuRiCore/modules/emotion_engine.py:77:        for emotion, keywords in emotion_keywords.items():
./DuRiCore/DuRiCore/modules/emotion_engine.py:78:            for keyword in keywords:
./DuRiCore/DuRiCore/modules/emotion_engine.py:79:                if keyword in text:
./DuRiCore/DuRiCore/modules/emotion_engine.py:83:        primary_emotion = max(emotion_scores.items(), key=lambda x: x[1])[0]
./DuRiCore/DuRiCore/modules/learning_engine.py:36:        self.api_key = None
./DuRiCore/DuRiCore/modules/learning_engine.py:47:            "key_topics": ["general"],
./DuRiCore/DuRiCore/modules/learning_engine.py:130:            video_keywords = ["영상", "동영상", "비디오", "자막", "subtitle", "video"]
./DuRiCore/DuRiCore/modules/learning_engine.py:131:            if any(keyword in content_lower for keyword in video_keywords):
./DuRiCore/DuRiCore/modules/learning_engine.py:135:            family_keywords = ["가족", "부모", "아이", "아버지", "어머니", "family"]
./DuRiCore/DuRiCore/modules/learning_engine.py:136:            if any(keyword in content_lower for keyword in family_keywords):
./DuRiCore/DuRiCore/modules/learning_engine.py:140:            metacognitive_keywords = ["생각", "사고", "분석", "이해", "학습", "meta"]
./DuRiCore/DuRiCore/modules/learning_engine.py:141:            if any(keyword in content_lower for keyword in metacognitive_keywords):
./DuRiCore/DuRiCore/modules/learning_engine.py:145:            autonomous_keywords = ["스스로", "자율", "독립", "autonomous", "self"]
./DuRiCore/DuRiCore/modules/learning_engine.py:146:            if any(keyword in content_lower for keyword in autonomous_keywords):
./DuRiCore/DuRiCore/modules/learning_engine.py:150:            social_keywords = ["사람", "관계", "소통", "대화", "social", "interaction"]
./DuRiCore/DuRiCore/modules/learning_engine.py:151:            if any(keyword in content_lower for keyword in social_keywords):
./DuRiCore/DuRiCore/modules/learning_engine.py:267:                "key_concepts": self._extract_key_concepts(content),
./DuRiCore/DuRiCore/modules/learning_engine.py:312:    def _extract_key_concepts(self, content: str) -> List[str]:
./DuRiCore/DuRiCore/modules/learning_engine.py:324:            key_concepts = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[
./DuRiCore/DuRiCore/modules/learning_engine.py:328:            return [concept[0] for concept in key_concepts]
./DuRiCore/DuRiCore/modules/learning_engine.py:461:            reflection_keywords = [
./DuRiCore/DuRiCore/modules/learning_engine.py:471:                1 for keyword in reflection_keywords if keyword in content
./DuRiCore/DuRiCore/modules/learning_engine.py:483:            self_keywords = ["나", "저", "내", "제", "스스로", "자신"]
./DuRiCore/DuRiCore/modules/learning_engine.py:484:            self_count = sum(1 for keyword in self_keywords if keyword in content)
./DuRiCore/DuRiCore/modules/learning_engine.py:565:            family_keywords = [
./DuRiCore/DuRiCore/modules/learning_engine.py:574:            family_count = sum(1 for keyword in family_keywords if keyword in content)
./DuRiCore/DuRiCore/modules/learning_engine.py:585:            emotion_keywords = ["사랑", "기쁨", "슬픔", "화", "걱정", "감사", "미안"]
./DuRiCore/DuRiCore/modules/learning_engine.py:586:            emotion_count = sum(1 for keyword in emotion_keywords if keyword in content)
./DuRiCore/DuRiCore/modules/learning_engine.py:667:            autonomy_keywords = ["스스로", "자율", "독립", "스스로", "자신", "스스로"]
./DuRiCore/DuRiCore/modules/learning_engine.py:669:                1 for keyword in autonomy_keywords if keyword in content
./DuRiCore/DuRiCore/modules/learning_engine.py:681:            direction_keywords = ["계획", "목표", "결정", "선택", "의지", "노력"]
./DuRiCore/DuRiCore/modules/learning_engine.py:683:                1 for keyword in direction_keywords if keyword in content
./DuRiCore/DuRiCore/modules/learning_engine.py:765:            social_keywords = ["사람", "관계", "친구", "동료", "상호작용", "교류"]
./DuRiCore/DuRiCore/modules/learning_engine.py:766:            social_count = sum(1 for keyword in social_keywords if keyword in content)
./DuRiCore/DuRiCore/modules/learning_engine.py:777:            communication_keywords = ["대화", "소통", "이해", "표현", "듣기", "말하기"]
./DuRiCore/DuRiCore/modules/learning_engine.py:779:                1 for keyword in communication_keywords if keyword in content
./DuRiCore/DuRiCore/modules/judgment/self_critique.py:127:        self.improvement_keywords = {
./DuRiCore/DuRiCore/modules/judgment/self_critique.py:338:        for area, keywords in self.improvement_keywords.items():
./DuRiCore/DuRiCore/modules/judgment/self_critique.py:339:            keyword_count = sum(1 for keyword in keywords if keyword in judgment_text)
./DuRiCore/DuRiCore/modules/judgment/self_critique.py:340:            if keyword_count > 2:
./DuRiCore/DuRiCore/modules/judgment/self_critique.py:519:        judgment_keys = list(judgment_data.keys())
./DuRiCore/DuRiCore/modules/judgment/self_critique.py:520:        if len(judgment_keys) > 5:
./DuRiCore/DuRiCore/modules/judgment/self_critique.py:620:            improvement_counts.items(), key=lambda x: x[1], reverse=True
./DuRiCore/DuRiCore/modules/ethical_reasoning.py:37:        self.api_key = None
./DuRiCore/DuRiCore/modules/ethical_reasoning.py:518:            ethical_keywords = [
./DuRiCore/DuRiCore/modules/ethical_reasoning.py:529:                1 for keyword in ethical_keywords if keyword in situation
./DuRiCore/DuRiCore/modules/ethical_reasoning.py:750:            social_keywords = ["대화", "소통", "관계", "이해", "공감", "협력"]
./DuRiCore/DuRiCore/modules/ethical_reasoning.py:752:                1 for keyword in social_keywords if keyword in input_text
./DuRiCore/DuRiCore/modules/self_evolution.py:497:        self.api_key = None
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:41:    emotional_keywords: List[str]
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:50:        self.emotion_keywords = {
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:194:        self.context_keywords = {
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:208:            detected_emotions = self._detect_emotion_keywords(text)
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:235:            emotional_keywords = self._extract_emotional_keywords(
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:249:                emotional_keywords=emotional_keywords,
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:257:    def _detect_emotion_keywords(self, text: str) -> Dict[EmotionCategory, List[str]]:
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:262:        for emotion, keywords in self.emotion_keywords.items():
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:263:            found_keywords = []
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:264:            for keyword in keywords:
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:265:                if keyword in text_lower:
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:266:                    found_keywords.append(keyword)
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:268:            if found_keywords:
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:269:                detected[emotion] = found_keywords
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:288:        total_keywords = sum(len(keywords) for keywords in detected_emotions.values())
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:289:        if total_keywords > 3:
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:306:        max_keywords = 0
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:309:        for emotion, keywords in detected_emotions.items():
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:310:            if len(keywords) > max_keywords:
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:311:                max_keywords = len(keywords)
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:323:        for emotion in detected_emotions.keys():
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:337:        total_keywords = sum(len(keywords) for keywords in detected_emotions.values())
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:338:        keyword_confidence = min(1.0, total_keywords / 5.0)
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:344:        confidence = (keyword_confidence + intensity_confidence) / 2.0
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:352:        for context, keywords in self.context_keywords.items():
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:353:            for keyword in keywords:
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:354:                if keyword in text:
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:392:    def _extract_emotional_keywords(
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:396:        keywords = []
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:397:        for emotion_keywords in detected_emotions.values():
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:398:            keywords.extend(emotion_keywords)
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:400:        return list(set(keywords))  # 중복 제거
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:444:            emotional_keywords=[],
./DuRiCore/DuRiCore/modules/emotion/emotion_embedding.py:456:            "keywords": embedding.emotional_keywords,
./DuRiCore/DuRiCore/core/main_loop.py:502:            self.memory_store, key=lambda x: x.created_at, reverse=True
./DuRiCore/DuRiCore/utils/llm_interface.py:102:            "api_key": os.getenv("OPENAI_API_KEY"),
./DuRiCore/DuRiCore/utils/llm_interface.py:113:            "api_key": os.getenv("ANTHROPIC_API_KEY"),
./DuRiCore/DuRiCore/utils/llm_interface.py:124:            "api_key": os.getenv("GOOGLE_API_KEY"),
./DuRiCore/DuRiCore/utils/llm_interface.py:135:            "api_key": None,
./DuRiCore/DuRiCore/utils/llm_interface.py:165:            cache_key = self._generate_cache_key(prompt, query_type, context, provider)
./DuRiCore/DuRiCore/utils/llm_interface.py:166:            if cache_key in self.response_cache:
./DuRiCore/DuRiCore/utils/llm_interface.py:168:                logger.info(f"캐시 히트: {cache_key}")
./DuRiCore/DuRiCore/utils/llm_interface.py:169:                return self.response_cache[cache_key]
./DuRiCore/DuRiCore/utils/llm_interface.py:206:                self.response_cache[cache_key] = response
./DuRiCore/DuRiCore/utils/llm_interface.py:244:            "Authorization": f'Bearer {config["api_key"]}',
./DuRiCore/DuRiCore/utils/llm_interface.py:292:            "x-api-key": config["api_key"],
./DuRiCore/DuRiCore/utils/llm_interface.py:335:        url = f"{config['api_url']}?key={config['api_key']}"
./DuRiCore/DuRiCore/utils/llm_interface.py:409:    def _generate_cache_key(
./DuRiCore/DuRiCore/utils/llm_interface.py:417:        content = f"{prompt}_{query_type.value}_{provider.value}_{json.dumps(context, sort_keys=True)}"
./DuRiCore/DuRiCore/utils/memory_manager.py:160:            cache_key = self._generate_query_cache_key(query)
./DuRiCore/DuRiCore/utils/memory_manager.py:161:            if cache_key in self.query_cache:
./DuRiCore/DuRiCore/utils/memory_manager.py:163:                logger.info(f"쿼리 캐시 히트: {cache_key}")
./DuRiCore/DuRiCore/utils/memory_manager.py:164:                return self.query_cache[cache_key]
./DuRiCore/DuRiCore/utils/memory_manager.py:187:            results.sort(key=lambda x: (x.importance, x.accessed_count), reverse=True)
./DuRiCore/DuRiCore/utils/memory_manager.py:198:            self.query_cache[cache_key] = results
./DuRiCore/DuRiCore/utils/memory_manager.py:294:                self.memories.values(), key=lambda x: x.accessed_count, reverse=True
./DuRiCore/DuRiCore/utils/memory_manager.py:369:    def _generate_query_cache_key(self, query: MemoryQuery) -> str:
./DuRiCore/DuRiCore/utils/memory_manager.py:379:        return hashlib.md5(json.dumps(query_data, sort_keys=True).encode()).hexdigest()
./DuRiCore/DuRiCore/utils/memory_manager.py:432:                expired_keys = []
./DuRiCore/DuRiCore/utils/memory_manager.py:434:                for key in self.query_cache.keys():
./DuRiCore/DuRiCore/utils/memory_manager.py:437:                        expired_keys.append(key)
./DuRiCore/DuRiCore/utils/memory_manager.py:439:                for key in expired_keys:
./DuRiCore/DuRiCore/utils/memory_manager.py:440:                    del self.query_cache[key]
./DuRiCore/DuRiCore/utils/memory_manager.py:442:                if expired_keys:
./DuRiCore/DuRiCore/utils/memory_manager.py:443:                    logger.info(f"캐시 정리 완료: {len(expired_keys)}개")
./DuRiCore/phase_omega_integration.py:172:        self.key_patterns = defaultdict(int)
./DuRiCore/phase_omega_integration.py:193:    def _optimize_cache_key(
./DuRiCore/phase_omega_integration.py:208:                semantic_key = self._generate_semantic_key(
./DuRiCore/phase_omega_integration.py:211:                if semantic_key:
./DuRiCore/phase_omega_integration.py:212:                    return semantic_key
./DuRiCore/phase_omega_integration.py:215:            key_content = f"{normalized_data}:{normalized_context}"
./DuRiCore/phase_omega_integration.py:216:            cache_key = hashlib.md5(key_content.encode()).hexdigest()
./DuRiCore/phase_omega_integration.py:219:            self.key_patterns[cache_key[:8]] += 1
./DuRiCore/phase_omega_integration.py:221:            return cache_key
./DuRiCore/phase_omega_integration.py:226:            fallback_content = json.dumps(input_data, sort_keys=True) + json.dumps(
./DuRiCore/phase_omega_integration.py:227:                context, sort_keys=True
./DuRiCore/phase_omega_integration.py:231:    def _generate_semantic_key(
./DuRiCore/phase_omega_integration.py:325:                semantic_key = hashlib.md5(semantic_content.encode()).hexdigest()
./DuRiCore/phase_omega_integration.py:326:                return f"semantic_{semantic_key}"
./DuRiCore/phase_omega_integration.py:365:        keywords = {
./DuRiCore/phase_omega_integration.py:404:        for category, words in keywords.items():
./DuRiCore/phase_omega_integration.py:430:        important_keys = [
./DuRiCore/phase_omega_integration.py:442:        for key in important_keys:
./DuRiCore/phase_omega_integration.py:443:            if key in data:
./DuRiCore/phase_omega_integration.py:444:                important_data[key] = data[key]
./DuRiCore/phase_omega_integration.py:450:        important_keys = [
./DuRiCore/phase_omega_integration.py:460:        for key in important_keys:
./DuRiCore/phase_omega_integration.py:461:            if key in context:
./DuRiCore/phase_omega_integration.py:462:                important_context[key] = context[key]
./DuRiCore/phase_omega_integration.py:470:            normalized = json.dumps(data, sort_keys=True, separators=(",", ":"))
./DuRiCore/phase_omega_integration.py:477:        cache_key = self._optimize_cache_key(input_data, context)
./DuRiCore/phase_omega_integration.py:481:        if cache_key in self.cache:
./DuRiCore/phase_omega_integration.py:482:            cached_item = self.cache[cache_key]
./DuRiCore/phase_omega_integration.py:489:                self.access_patterns[cache_key] += 1
./DuRiCore/phase_omega_integration.py:492:                self.cache.move_to_end(cache_key)
./DuRiCore/phase_omega_integration.py:499:                logger.debug(f"⚡ 캐시 히트: {cache_key[:8]}...")
./DuRiCore/phase_omega_integration.py:503:                del self.cache[cache_key]
./DuRiCore/phase_omega_integration.py:510:                logger.debug(f"🔮 예측적 캐시 히트: {cache_key[:8]}...")
./DuRiCore/phase_omega_integration.py:518:                logger.debug(f"🧠 시맨틱 캐시 히트: {cache_key[:8]}...")
./DuRiCore/phase_omega_integration.py:525:        logger.debug(f"❌ 캐시 미스: {cache_key[:8]}...")
./DuRiCore/phase_omega_integration.py:537:                    self.access_patterns.items(), key=lambda x: x[1], reverse=True
./DuRiCore/phase_omega_integration.py:541:                for cache_key, access_count in sorted_patterns[:3]:
./DuRiCore/phase_omega_integration.py:543:                        if cache_key in self.cache:
./DuRiCore/phase_omega_integration.py:544:                            cached_item = self.cache[cache_key]
./DuRiCore/phase_omega_integration.py:567:            semantic_key = self._generate_semantic_key(
./DuRiCore/phase_omega_integration.py:572:            if semantic_key and semantic_key in self.semantic_cache:
./DuRiCore/phase_omega_integration.py:573:                semantic_item = self.semantic_cache[semantic_key]
./DuRiCore/phase_omega_integration.py:590:        cache_key = self._optimize_cache_key(input_data, context)
./DuRiCore/phase_omega_integration.py:606:        self.cache[cache_key] = cache_item
./DuRiCore/phase_omega_integration.py:607:        self.cache.move_to_end(cache_key)
./DuRiCore/phase_omega_integration.py:611:            semantic_key = self._generate_semantic_key(
./DuRiCore/phase_omega_integration.py:615:            if semantic_key:
./DuRiCore/phase_omega_integration.py:616:                self.semantic_cache[semantic_key] = cache_item.copy()
./DuRiCore/phase_omega_integration.py:618:        logger.debug(f"💾 캐시 저장: {cache_key[:8]}...")
./DuRiCore/phase_omega_integration.py:619:        return cache_key
./DuRiCore/phase_omega_integration.py:628:                    key=lambda x: (
./DuRiCore/phase_omega_integration.py:637:                    key=lambda x: x[1].get("last_accessed", x[1]["timestamp"]),
./DuRiCore/phase_omega_integration.py:645:                    key = sorted_items[i][0]
./DuRiCore/phase_omega_integration.py:646:                    del self.cache[key]
./DuRiCore/phase_omega_integration.py:675:            "key_patterns": dict(self.key_patterns),
./DuRiCore/phase_omega_integration.py:687:        self.key_patterns.clear()
./DuRiCore/phase_omega_integration.py:730:            current_semantic_key = self._generate_semantic_key(
./DuRiCore/phase_omega_integration.py:735:            if current_semantic_key:
./DuRiCore/phase_omega_integration.py:737:                for semantic_key in self.semantic_cache.keys():
./DuRiCore/phase_omega_integration.py:738:                    if semantic_key.startswith("semantic_"):
./DuRiCore/phase_omega_integration.py:741:                            current_semantic_key, semantic_key
./DuRiCore/phase_omega_integration.py:840:    def _compare_semantic_patterns(self, key1: str, key2: str) -> bool:
./DuRiCore/phase_omega_integration.py:844:            if key1 == key2:
./DuRiCore/phase_omega_integration.py:848:            if len(key1) > 8 and len(key2) > 8:
./DuRiCore/phase_omega_integration.py:850:                if key1[:8] == key2[:8]:
./DuRiCore/phase_omega_integration.py:854:                if len(key1) > 16 and len(key2) > 16:
./DuRiCore/phase_omega_integration.py:855:                    if key1[8:16] == key2[8:16]:
./DuRiCore/phase_omega_integration.py:859:            similarity = self._calculate_hash_similarity(key1, key2)
./DuRiCore/phase_omega_integration.py:865:    def _calculate_hash_similarity(self, key1: str, key2: str) -> float:
./DuRiCore/phase_omega_integration.py:868:            if len(key1) != len(key2):
./DuRiCore/phase_omega_integration.py:872:            matches = sum(1 for a, b in zip(key1, key2) if a == b)
./DuRiCore/phase_omega_integration.py:873:            return matches / len(key1)
./DuRiCore/phase_omega_integration.py:1455:            valid_keys = [
./DuRiCore/phase_omega_integration.py:1465:            for key, value in new_config.items():
./DuRiCore/phase_omega_integration.py:1466:                if key in valid_keys and isinstance(value, bool):
./DuRiCore/phase_omega_integration.py:1467:                    self.integration_config[key] = value
./DuRiCore/test_duri_expression_engine.py:334:    except KeyboardInterrupt:
./DuRiCore/decision_support_system.py:112:                options[0].criteria_scores.keys()
./DuRiCore/decision_support_system.py:127:            option_scores.keys(), key=lambda x: option_scores[x]["score"]
./DuRiCore/decision_support_system.py:228:            criteria_weights.items(), key=lambda x: x[1], reverse=True
./DuRiCore/decision_support_system.py:337:        high_risk_keywords = ["높은", "위험", "불확실", "복잡", "새로운"]
./DuRiCore/decision_support_system.py:338:        medium_risk_keywords = ["보통", "일반", "평균"]
./DuRiCore/decision_support_system.py:339:        low_risk_keywords = ["낮은", "안전", "확실", "단순", "기존"]
./DuRiCore/decision_support_system.py:343:        for keyword in high_risk_keywords:
./DuRiCore/decision_support_system.py:344:            if keyword in risk_factor_lower:
./DuRiCore/decision_support_system.py:347:        for keyword in medium_risk_keywords:
./DuRiCore/decision_support_system.py:348:            if keyword in risk_factor_lower:
./DuRiCore/decision_support_system.py:351:        for keyword in low_risk_keywords:
./DuRiCore/decision_support_system.py:352:            if keyword in risk_factor_lower:
./DuRiCore/coala_module_interface.py:626:            "methods": list(interface.methods.keys()),
./DuRiCore/real_wisdom_system.py:181:            "key_elements": [],
./DuRiCore/real_wisdom_system.py:189:            analysis["key_elements"].append("deception")
./DuRiCore/real_wisdom_system.py:192:            analysis["key_elements"].append("life_death")
./DuRiCore/real_wisdom_system.py:195:            analysis["key_elements"].append("theft")
./DuRiCore/real_wisdom_system.py:198:            analysis["key_elements"].append("violence")
./DuRiCore/real_wisdom_system.py:252:        key_elements = analysis.get("key_elements", [])
./DuRiCore/duri_diagnostic_report.json:1145:        "_get_link_key",
./DuRiCore/duri_diagnostic_report.json:1184:        "_classify_by_keywords",
./DuRiCore/duri_diagnostic_report.json:1525:        "_extract_key_concepts",
./DuRiCore/duri_diagnostic_report.json:1717:        "_detect_emotion_keywords",
./DuRiCore/duri_diagnostic_report.json:1724:        "_extract_emotional_keywords",
./DuRiCore/duri_diagnostic_report.json:1857:        "_generate_cache_key",
./DuRiCore/duri_diagnostic_report.json:1929:        "_generate_query_cache_key",
./DuRiCore/duri_diagnostic_report.json:2312:        "_extract_key_concepts",
./DuRiCore/duri_diagnostic_report.json:2504:        "_detect_emotion_keywords",
./DuRiCore/duri_diagnostic_report.json:2511:        "_extract_emotional_keywords",
./DuRiCore/duri_diagnostic_report.json:2644:        "_generate_cache_key",
./DuRiCore/duri_diagnostic_report.json:2716:        "_generate_query_cache_key",
./DuRiCore/advanced_feature_engine.py:520:            requirements, key=lambda x: (x.priority, -x.complexity), reverse=True
./DuRiCore/integration_success_system.py:298:        priorities.sort(key=lambda x: x.priority_score, reverse=True)
./DuRiCore/decision/judgment_system.py.bak:36:    key_factors: List[str]
./DuRiCore/decision/judgment_system.py.bak:275:            key_factors = await self._identify_key_factors(input_data, context)
./DuRiCore/decision/judgment_system.py.bak:294:                key_factors=key_factors,
./DuRiCore/decision/judgment_system.py.bak:307:                key_factors=[],
./DuRiCore/decision/judgment_system.py.bak:423:                "key_fields": list(input_data.keys()) if isinstance(input_data, dict) else [],
./DuRiCore/decision/judgment_system.py.bak:436:            for key, value in context.items():
./DuRiCore/decision/judgment_system.py.bak:438:                    elements.append(f"{key}:{value}")
./DuRiCore/decision/judgment_system.py.bak:440:                    elements.append(f"{key}:{value}")
./DuRiCore/decision/judgment_system.py.bak:442:                    elements.extend([f"{key}.{k}:{v}" for k, v in value.items()])
./DuRiCore/decision/judgment_system.py.bak:444:                    elements.append(f"{key}:{len(value)}_items")
./DuRiCore/decision/judgment_system.py.bak:465:            for pattern_name, keywords in patterns.items():
./DuRiCore/decision/judgment_system.py.bak:466:                if any(keyword in content for keyword in keywords):
./DuRiCore/decision/judgment_system.py.bak:478:    async def _identify_key_factors(self, input_data: Dict[str, Any],
./DuRiCore/decision/judgment_system.py.bak:928:    def _extract_keywords_from_content(self, content: str) -> List[str]:
./DuRiCore/decision/judgment_system.py.bak:934:        important_keywords = [
./DuRiCore/decision/judgment_system.py.bak:943:        keywords = [word for word in words if word in important_keywords]
./DuRiCore/decision/judgment_system.py.bak:945:        return list(set(keywords))
./DuRiCore/decision/judgment_system.py.bak:967:    def _analyze_priority(self, content: str, keywords: List[str]) -> str:
./DuRiCore/decision/judgment_system.py.bak:969:        urgent_keywords = ["urgent", "critical", "emergency", "immediate", "important"]
./DuRiCore/decision/judgment_system.py.bak:970:        urgent_count = sum(1 for keyword in keywords if keyword in urgent_keywords)
./DuRiCore/decision/judgment_system.py.bak:1005:            keywords = self._extract_keywords_from_content(content)
./DuRiCore/decision/judgment_system.py.bak:1008:            situation_type = self._classify_situation_type(keywords, context)
./DuRiCore/decision/judgment_system.py.bak:1011:            risk_level = self._assess_risk_level_real(keywords, context)
./DuRiCore/decision/judgment_system.py.bak:1014:            urgency_level = self._assess_urgency_level_real(keywords, context)
./DuRiCore/decision/judgment_system.py.bak:1021:                "keywords": keywords,
./DuRiCore/decision/judgment_system.py.bak:1033:                "keywords": [],
./DuRiCore/decision/judgment_system.py.bak:1041:    def _classify_situation_type(self, keywords: List[str], context: Dict[str, Any]) -> str:
./DuRiCore/decision/judgment_system.py.bak:1043:        if any(word in ["error", "problem", "issue", "fail"] for word in keywords):
./DuRiCore/decision/judgment_system.py.bak:1045:        elif any(word in ["learn", "study", "understand", "explain"] for word in keywords):
./DuRiCore/decision/judgment_system.py.bak:1047:        elif any(word in ["urgent", "important", "critical"] for word in keywords):
./DuRiCore/decision/judgment_system.py.bak:1052:    def _assess_risk_level_real(self, keywords: List[str], context: Dict[str, Any]) -> float:
./DuRiCore/decision/judgment_system.py.bak:1054:        risk_keywords = ["error", "problem", "fail", "critical", "emergency"]
./DuRiCore/decision/judgment_system.py.bak:1055:        risk_count = sum(1 for word in keywords if word in risk_keywords)
./DuRiCore/decision/judgment_system.py.bak:1058:    def _assess_urgency_level_real(self, keywords: List[str], context: Dict[str, Any]) -> float:
./DuRiCore/decision/judgment_system.py.bak:1060:        urgency_keywords = ["urgent", "important", "critical", "emergency", "immediate"]
./DuRiCore/decision/judgment_system.py.bak:1061:        urgency_count = sum(1 for word in keywords if word in urgency_keywords)
./DuRiCore/decision/judgment_system.py.bak:1221:    print(f"핵심 요소: {situation_analysis.key_factors}")
./DuRiCore/learning_system/strategies/adaptive_learning.py:509:            "registered_systems": list(self.registered_systems.keys()),
./DuRiCore/learning_system/core/learning_optimization.py:412:        recommendations.sort(key=lambda x: x["recommendation_score"], reverse=True)
./DuRiCore/learning_system/monitoring/learning_monitoring.py:383:                most_common_action = max(action_counts.items(), key=lambda x: x[1])
./DuRiCore/inconsistency_detector.py:421:        contradiction_keywords = {
./DuRiCore/inconsistency_detector.py:434:        for keyword1, keyword2 in contradiction_keywords.items():
./DuRiCore/inconsistency_detector.py:435:            if keyword1 in content1 and keyword2 in content2:
./DuRiCore/inconsistency_detector.py:437:            if keyword2 in content1 and keyword1 in content2:
./DuRiCore/inconsistency_detector.py:445:        keywords1 = set(re.findall(r"\w+", text1.lower()))
./DuRiCore/inconsistency_detector.py:446:        keywords2 = set(re.findall(r"\w+", text2.lower()))
./DuRiCore/inconsistency_detector.py:448:        if not keywords1 or not keywords2:
./DuRiCore/inconsistency_detector.py:451:        intersection = len(keywords1.intersection(keywords2))
./DuRiCore/inconsistency_detector.py:452:        union = len(keywords1.union(keywords2))
./DuRiCore/inconsistency_detector.py:461:        conflict_keywords = {
./DuRiCore/inconsistency_detector.py:471:        for keyword1, keyword2 in conflict_keywords.items():
./DuRiCore/inconsistency_detector.py:472:            if keyword1 in content1 and keyword2 in content2:
./DuRiCore/inconsistency_detector.py:474:            if keyword2 in content1 and keyword1 in content2:
./DuRiCore/inconsistency_detector.py:762:        keywords1 = set(re.findall(r"\w+", text1.lower()))
./DuRiCore/inconsistency_detector.py:763:        keywords2 = set(re.findall(r"\w+", text2.lower()))
./DuRiCore/inconsistency_detector.py:765:        if not keywords1 or not keywords2:
./DuRiCore/inconsistency_detector.py:768:        intersection = len(keywords1.intersection(keywords2))
./DuRiCore/inconsistency_detector.py:769:        union = len(keywords1.union(keywords2))
./DuRiCore/phase_z_integration_test.py:485:        for key, expected_value in expected.items():
./DuRiCore/phase_z_integration_test.py:486:            if key in actual:
./DuRiCore/phase_z_integration_test.py:487:                actual_value = actual[key]
./DuRiCore/graph_evolution_system.py:459:        potential_targets.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/graph_evolution_system.py:538:        keywords1 = set(re.findall(r"\w+", text1.lower()))
./DuRiCore/graph_evolution_system.py:539:        keywords2 = set(re.findall(r"\w+", text2.lower()))
./DuRiCore/graph_evolution_system.py:541:        if not keywords1 or not keywords2:
./DuRiCore/graph_evolution_system.py:544:        intersection = len(keywords1.intersection(keywords2))
./DuRiCore/graph_evolution_system.py:545:        union = len(keywords1.union(keywords2))
./DuRiCore/intuitive_thinking_system.py:341:        sequential_keywords = ["단계", "과정", "순서", "진행", "발전", "진화", "성장"]
./DuRiCore/intuitive_thinking_system.py:343:        for keyword in sequential_keywords:
./DuRiCore/intuitive_thinking_system.py:344:            if keyword in situation_text:
./DuRiCore/intuitive_thinking_system.py:348:                    pattern_data={"keyword": keyword, "context": situation},
./DuRiCore/intuitive_thinking_system.py:364:        relational_keywords = ["관계", "연결", "상호작용", "의존", "영향", "연관"]
./DuRiCore/intuitive_thinking_system.py:366:        for keyword in relational_keywords:
./DuRiCore/intuitive_thinking_system.py:367:            if keyword in situation_text:
./DuRiCore/intuitive_thinking_system.py:371:                    pattern_data={"keyword": keyword, "context": situation},
./DuRiCore/intuitive_thinking_system.py:387:        temporal_keywords = ["시간", "시기", "기간", "순간", "지속", "변화", "발전"]
./DuRiCore/intuitive_thinking_system.py:389:        for keyword in temporal_keywords:
./DuRiCore/intuitive_thinking_system.py:390:            if keyword in situation_text:
./DuRiCore/intuitive_thinking_system.py:394:                    pattern_data={"keyword": keyword, "context": situation},
./DuRiCore/intuitive_thinking_system.py:410:        spatial_keywords = ["공간", "위치", "배치", "구조", "형태", "모양", "배열"]
./DuRiCore/intuitive_thinking_system.py:412:        for keyword in spatial_keywords:
./DuRiCore/intuitive_thinking_system.py:413:            if keyword in situation_text:
./DuRiCore/intuitive_thinking_system.py:417:                    pattern_data={"keyword": keyword, "context": situation},
./DuRiCore/intuitive_thinking_system.py:433:        causal_keywords = ["원인", "결과", "영향", "효과", "결과", "발생", "유발"]
./DuRiCore/intuitive_thinking_system.py:435:        for keyword in causal_keywords:
./DuRiCore/intuitive_thinking_system.py:436:            if keyword in situation_text:
./DuRiCore/intuitive_thinking_system.py:440:                    pattern_data={"keyword": keyword, "context": situation},
./DuRiCore/intuitive_thinking_system.py:456:        emergent_keywords = ["창발", "새로운", "혁신", "창조", "발견", "통찰", "깨달음"]
./DuRiCore/intuitive_thinking_system.py:458:        for keyword in emergent_keywords:
./DuRiCore/intuitive_thinking_system.py:459:            if keyword in situation_text:
./DuRiCore/intuitive_thinking_system.py:463:                    pattern_data={"keyword": keyword, "context": situation},
./DuRiCore/semantic_situation_classifier_refactored.py:123:                "keywords": [
./DuRiCore/semantic_situation_classifier_refactored.py:137:                "keywords": [
./DuRiCore/semantic_situation_classifier_refactored.py:151:                "keywords": [
./DuRiCore/semantic_situation_classifier_refactored.py:165:                "keywords": [
./DuRiCore/semantic_situation_classifier_refactored.py:328:        for intent_type, keywords in self.intent_patterns.items():
./DuRiCore/semantic_situation_classifier_refactored.py:330:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier_refactored.py:331:                if keyword in situation:
./DuRiCore/semantic_situation_classifier_refactored.py:334:            if keywords:
./DuRiCore/semantic_situation_classifier_refactored.py:335:                intent_scores[IntentType(intent_type)] = min(score / len(keywords), 1.0)
./DuRiCore/semantic_situation_classifier_refactored.py:347:        best_intent = max(intent_scores.items(), key=lambda x: x[1])
./DuRiCore/semantic_situation_classifier_refactored.py:361:        stakeholder_keywords = [
./DuRiCore/semantic_situation_classifier_refactored.py:379:        for keyword in stakeholder_keywords:
./DuRiCore/semantic_situation_classifier_refactored.py:380:            if keyword in situation:
./DuRiCore/semantic_situation_classifier_refactored.py:381:                stakeholders.append(keyword)
./DuRiCore/semantic_situation_classifier_refactored.py:392:        value_keywords = {
./DuRiCore/semantic_situation_classifier_refactored.py:403:        for value_type, keywords in value_keywords.items():
./DuRiCore/semantic_situation_classifier_refactored.py:404:            for keyword in keywords:
./DuRiCore/semantic_situation_classifier_refactored.py:405:                if keyword in situation:
./DuRiCore/semantic_situation_classifier_refactored.py:502:        urgency_keywords = ["즉시", "당장", "바로", "곧", "긴급", "시급", "급한"]
./DuRiCore/semantic_situation_classifier_refactored.py:503:        for keyword in urgency_keywords:
./DuRiCore/semantic_situation_classifier_refactored.py:504:            if keyword in situation:
./DuRiCore/social_intelligence_system.py:866:    def _generate_cache_key(self, data: Any) -> str:
./DuRiCore/social_intelligence_system.py:897:        context_str = self._generate_cache_key(context_data)
./DuRiCore/social_intelligence_system.py:921:                for key, relationship_type in PREPROCESSED_RELATION_MAP.items():
./DuRiCore/social_intelligence_system.py:922:                    if key in participant:
./DuRiCore/social_intelligence_system.py:931:                for key, relationship_type in PREPROCESSED_RELATION_MAP.items():
./DuRiCore/social_intelligence_system.py:932:                    if key in participant_lower:
./DuRiCore/social_intelligence_system.py:944:        participants_hash = self._generate_cache_key(participants)
./DuRiCore/social_intelligence_system.py:986:        context_str = self._generate_cache_key(context_data)
./DuRiCore/integrated_evolution_system.py:372:                        cache_key = self._generate_cache_key(
./DuRiCore/integrated_evolution_system.py:375:                        cached_result = self._get_from_cache(cache_key)
./DuRiCore/integrated_evolution_system.py:389:                        self._cache_result(cache_key, result)
./DuRiCore/integrated_evolution_system.py:402:                def _generate_cache_key(
./DuRiCore/integrated_evolution_system.py:406:                    content = f"{user_input}:{duri_response}:{json.dumps(metadata, sort_keys=True)}"
./DuRiCore/integrated_evolution_system.py:409:                def _get_from_cache(self, cache_key: str) -> Optional[Any]:
./DuRiCore/integrated_evolution_system.py:411:                    if cache_key in self.cache:
./DuRiCore/integrated_evolution_system.py:412:                        cached_data = self.cache[cache_key]
./DuRiCore/integrated_evolution_system.py:416:                            del self.cache[cache_key]
./DuRiCore/integrated_evolution_system.py:419:                def _cache_result(self, cache_key: str, result: Any):
./DuRiCore/integrated_evolution_system.py:423:                        oldest_key = min(
./DuRiCore/integrated_evolution_system.py:424:                            self.cache.keys(), key=lambda k: self.cache[k]["timestamp"]
./DuRiCore/integrated_evolution_system.py:426:                        del self.cache[oldest_key]
./DuRiCore/integrated_evolution_system.py:428:                    self.cache[cache_key] = {"result": result, "timestamp": time.time()}
./DuRiCore/integrated_evolution_system.py:470:    def _generate_cache_key(
./DuRiCore/integrated_evolution_system.py:476:            optimized_key = self._optimize_cache_key(input_data, context)
./DuRiCore/integrated_evolution_system.py:477:            return optimized_key
./DuRiCore/integrated_evolution_system.py:481:            content = f"{json.dumps(input_data, sort_keys=True)}:{json.dumps(context, sort_keys=True)}"
./DuRiCore/integrated_evolution_system.py:484:    def _optimize_cache_key(
./DuRiCore/integrated_evolution_system.py:490:            return self._advanced_cache_key_generation(input_data, context)
./DuRiCore/integrated_evolution_system.py:498:            key_content = f"{normalized_data}:{normalized_context}"
./DuRiCore/integrated_evolution_system.py:499:            return hashlib.md5(key_content.encode()).hexdigest()
./DuRiCore/integrated_evolution_system.py:501:    def _advanced_cache_key_generation(
./DuRiCore/integrated_evolution_system.py:511:            pattern_key = self._generate_pattern_based_key(
./DuRiCore/integrated_evolution_system.py:516:            priority_key = self._analyze_context_priority(weighted_context)
./DuRiCore/integrated_evolution_system.py:519:            final_key_content = f"{pattern_key}:{priority_key}"
./DuRiCore/integrated_evolution_system.py:520:            return hashlib.md5(final_key_content.encode()).hexdigest()
./DuRiCore/integrated_evolution_system.py:540:        for key, value in input_data.items():
./DuRiCore/integrated_evolution_system.py:541:            weight = importance_weights.get(key, 0.3)  # 기본 가중치
./DuRiCore/integrated_evolution_system.py:542:            weighted_data[key] = {
./DuRiCore/integrated_evolution_system.py:564:        for key, value in context.items():
./DuRiCore/integrated_evolution_system.py:565:            weight = priority_weights.get(key, 0.3)  # 기본 가중치
./DuRiCore/integrated_evolution_system.py:566:            weighted_context[key] = {
./DuRiCore/integrated_evolution_system.py:574:    def _generate_pattern_based_key(
./DuRiCore/integrated_evolution_system.py:601:            for key, data_info in weighted_data.items():
./DuRiCore/integrated_evolution_system.py:604:                pattern_elements.append(f"{key}:{score:.2f}")
./DuRiCore/integrated_evolution_system.py:607:            pattern_elements.sort(key=lambda x: float(x.split(":")[1]), reverse=True)
./DuRiCore/integrated_evolution_system.py:625:            for key, context_info in weighted_context.items():
./DuRiCore/integrated_evolution_system.py:628:                priority_elements.append(f"{key}:{priority:.2f}")
./DuRiCore/integrated_evolution_system.py:631:            priority_elements.sort(key=lambda x: float(x.split(":")[1]), reverse=True)
./DuRiCore/integrated_evolution_system.py:647:            for key, context_info in weighted_context.items():
./DuRiCore/integrated_evolution_system.py:732:            for key, data in self.cache.items():
./DuRiCore/integrated_evolution_system.py:746:                    del self.cache[key]
./DuRiCore/integrated_evolution_system.py:747:                    logger.debug(f"낮은 빈도 캐시 항목 제거: {key[:20]}...")
./DuRiCore/integrated_evolution_system.py:772:            recent_usage = list(self.cache.keys())[-10:]  # 최근 10개
./DuRiCore/integrated_evolution_system.py:774:            for key in recent_usage:
./DuRiCore/integrated_evolution_system.py:775:                if key in self.cache:
./DuRiCore/integrated_evolution_system.py:776:                    data = self.cache[key]
./DuRiCore/integrated_evolution_system.py:777:                    pattern = self._extract_pattern_from_key(key)
./DuRiCore/integrated_evolution_system.py:796:    def _extract_pattern_from_key(self, key: str) -> str:
./DuRiCore/integrated_evolution_system.py:800:            return key[:8]
./DuRiCore/integrated_evolution_system.py:854:    def _get_from_cache(self, cache_key: str) -> Optional[Any]:
./DuRiCore/integrated_evolution_system.py:856:        if cache_key in self.cache:
./DuRiCore/integrated_evolution_system.py:857:            cached_data = self.cache[cache_key]
./DuRiCore/integrated_evolution_system.py:865:                logger.debug(f"⚡ 캐시 히트: {cache_key[:20]}...")
./DuRiCore/integrated_evolution_system.py:869:                del self.cache[cache_key]
./DuRiCore/integrated_evolution_system.py:874:    def _cache_result(self, cache_key: str, result: Any):
./DuRiCore/integrated_evolution_system.py:882:            self.cache[cache_key] = {
./DuRiCore/integrated_evolution_system.py:888:            logger.debug(f"💾 캐시 저장: {cache_key[:20]}...")
./DuRiCore/integrated_evolution_system.py:911:    def _generate_task_cache_key(self, task: ParallelTask) -> str:
./DuRiCore/integrated_evolution_system.py:913:        content = f"{task.id}:{task.name}:{task.function.__name__}:{json.dumps(task.args, sort_keys=True)}:{json.dumps(task.kwargs, sort_keys=True)}"
./DuRiCore/integrated_evolution_system.py:926:            sorted_tasks = sorted(tasks, key=lambda x: x.priority.value)
./DuRiCore/integrated_evolution_system.py:952:        cache_key = self._generate_task_cache_key(task)
./DuRiCore/integrated_evolution_system.py:955:        cached_result = self._get_from_cache(cache_key)
./DuRiCore/integrated_evolution_system.py:981:            self._cache_result(cache_key, result)
./DuRiCore/integrated_evolution_system.py:1077:            cache_key = self._generate_cache_key(optimized_data, context or {})
./DuRiCore/integrated_evolution_system.py:1078:            cached_result = self._get_from_cache(cache_key)
./DuRiCore/integrated_evolution_system.py:1108:            self._cache_result(cache_key, integrated_result)
./DuRiCore/integrated_evolution_system.py:1575:            target_modules.sort(key=estimate_complexity, reverse=True)
./DuRiCore/integrated_evolution_system.py:1975:                best_pattern = max(similar_patterns, key=lambda x: x["weighted_score"])
./DuRiCore/integrated_evolution_system.py:2326:            cache_key = self._generate_cache_key(test_input, test_context)
./DuRiCore/integrated_evolution_system.py:2327:            cached_result = self._get_from_cache(cache_key)
./DuRiCore/integrated_evolution_system.py:2381:                expired_keys = [
./DuRiCore/integrated_evolution_system.py:2382:                    key
./DuRiCore/integrated_evolution_system.py:2383:                    for key, data in self.cache.items()
./DuRiCore/integrated_evolution_system.py:2386:                for key in expired_keys:
./DuRiCore/integrated_evolution_system.py:2387:                    del self.cache[key]
./DuRiCore/integrated_evolution_system.py:2390:                    "cleaned_items": len(expired_keys),
./DuRiCore/survival_instinct_engine.py:799:            goals, key=lambda x: (x.priority, x.urgency, x.feasibility), reverse=True
./DuRiCore/advanced_optimization_engine.py:772:            return sorted(strategies, key=lambda x: x.priority_score, reverse=True)
./DuRiCore/integrated_advanced_reasoning_system.py:454:        for key in [
./DuRiCore/integrated_advanced_reasoning_system.py:461:            if key in performance_metrics:
./DuRiCore/integrated_advanced_reasoning_system.py:462:                avg_key = f"average_{key}"
./DuRiCore/integrated_advanced_reasoning_system.py:463:                if avg_key not in self.performance_metrics:
./DuRiCore/integrated_advanced_reasoning_system.py:464:                    self.performance_metrics[avg_key] = 0.0
./DuRiCore/integrated_advanced_reasoning_system.py:466:                current_avg = self.performance_metrics[avg_key]
./DuRiCore/integrated_advanced_reasoning_system.py:467:                new_value = performance_metrics[key]
./DuRiCore/integrated_advanced_reasoning_system.py:468:                self.performance_metrics[avg_key] = (
./DuRiCore/integrated_advanced_learning_system.py:310:        cognitive_keywords = [
./DuRiCore/integrated_advanced_learning_system.py:318:        if any(keyword in content_lower for keyword in cognitive_keywords):
./DuRiCore/integrated_advanced_learning_system.py:322:        emotional_keywords = ["feel", "emotion", "mood", "sentiment", "affective"]
./DuRiCore/integrated_advanced_learning_system.py:323:        if any(keyword in content_lower for keyword in emotional_keywords):
./DuRiCore/integrated_advanced_learning_system.py:327:        creative_keywords = ["create", "innovate", "imagine", "creative", "artistic"]
./DuRiCore/integrated_advanced_learning_system.py:328:        if any(keyword in content_lower for keyword in creative_keywords):
./DuRiCore/integrated_advanced_learning_system.py:531:        for key, value in new_information.items():
./DuRiCore/integrated_advanced_learning_system.py:532:            if key in evolved_knowledge:
./DuRiCore/integrated_advanced_learning_system.py:534:                evolved_knowledge[key] = self._integrate_knowledge(
./DuRiCore/integrated_advanced_learning_system.py:535:                    evolved_knowledge[key], value
./DuRiCore/integrated_advanced_learning_system.py:539:                evolved_knowledge[key] = value
./DuRiCore/integrated_advanced_learning_system.py:560:        for key in new_information.keys():
./DuRiCore/integrated_advanced_learning_system.py:561:            if key in evolved_knowledge:
./DuRiCore/integrated_advanced_learning_system.py:581:        for key in new_information.keys():
./DuRiCore/integrated_advanced_learning_system.py:583:                key in original_knowledge
./DuRiCore/integrated_advanced_learning_system.py:584:                and original_knowledge[key] != new_information[key]
./DuRiCore/integrated_advanced_learning_system.py:586:                conflicts.append(f"지식 충돌: {key}")
./DuRiCore/integrated_advanced_learning_system.py:596:        for key in new_information.keys():
./DuRiCore/integrated_advanced_learning_system.py:597:            if key not in original_knowledge:
./DuRiCore/integrated_advanced_learning_system.py:598:                extensions.append(f"지식 확장: {key}")
./DuRiCore/integrated_advanced_learning_system.py:812:            for key, value in knowledge.items():
./DuRiCore/integrated_advanced_learning_system.py:813:                if key not in integrated:
./DuRiCore/integrated_advanced_learning_system.py:814:                    integrated[key] = value
./DuRiCore/integrated_advanced_learning_system.py:817:                    if isinstance(integrated[key], dict) and isinstance(value, dict):
./DuRiCore/integrated_advanced_learning_system.py:818:                        integrated[key].update(value)
./DuRiCore/integrated_advanced_learning_system.py:820:                        integrated[key] = value
./DuRiCore/integrated_advanced_learning_system.py:849:            for key, value in knowledge.items():
./DuRiCore/integrated_advanced_learning_system.py:850:                if key not in integrated["semantic_graph"]:
./DuRiCore/integrated_advanced_learning_system.py:851:                    integrated["semantic_graph"][key] = value
./DuRiCore/learning_pattern_analyzer.py:48:    key_factors: List[str]
./DuRiCore/learning_pattern_analyzer.py:76:    key_insights: List[str]
./DuRiCore/learning_pattern_analyzer.py:203:            key_insights = await self._extract_key_insights(performance_history)
./DuRiCore/learning_pattern_analyzer.py:217:                key_insights=key_insights,
./DuRiCore/learning_pattern_analyzer.py:309:                group_key = f"{behavior_type}_{strategy}"
./DuRiCore/learning_pattern_analyzer.py:311:                if group_key not in groups:
./DuRiCore/learning_pattern_analyzer.py:312:                    groups[group_key] = []
./DuRiCore/learning_pattern_analyzer.py:314:                groups[group_key].append(behavior)
./DuRiCore/learning_pattern_analyzer.py:347:            key_factors = await self._identify_key_factors(behaviors)
./DuRiCore/learning_pattern_analyzer.py:360:                key_factors=key_factors,
./DuRiCore/learning_pattern_analyzer.py:371:    async def _identify_key_factors(self, behaviors: List[Dict[str, Any]]) -> List[str]:
./DuRiCore/learning_pattern_analyzer.py:586:    async def _extract_key_insights(
./DuRiCore/learning_pattern_analyzer.py:678:            key_insights=["분석할 성능 데이터가 없습니다."],
./DuRiCore/learning_pattern_analyzer.py:785:        print(f"  주요 요소: {pattern.key_factors}")
./DuRiCore/learning_pattern_analyzer.py:799:        print(f"  주요 요소: {pattern.key_factors}")
./DuRiCore/learning_pattern_analyzer.py:813:    print(f"- 주요 인사이트: {effectiveness_report.key_insights}")
./DuRiCore/situation_analyzer.py:23:    KEYWORD_ANALYSIS = "keyword_analysis"
./DuRiCore/situation_analyzer.py:33:    key: str
./DuRiCore/situation_analyzer.py:46:    keywords: List[str]
./DuRiCore/situation_analyzer.py:59:                "keywords": [
./DuRiCore/situation_analyzer.py:73:                "keywords": [
./DuRiCore/situation_analyzer.py:86:                "keywords": ["문제", "오류", "실패", "위험", "장애", "고장", "충돌"],
./DuRiCore/situation_analyzer.py:91:                "keywords": [
./DuRiCore/situation_analyzer.py:104:                "keywords": ["갈등", "충돌", "대립", "문제", "분쟁", "의견차이"],
./DuRiCore/situation_analyzer.py:109:                "keywords": ["일상", "반복", "정기", "보통", "평범", "일반"],
./DuRiCore/situation_analyzer.py:116:        self.risk_keywords = {
./DuRiCore/situation_analyzer.py:123:        self.urgency_keywords = {
./DuRiCore/situation_analyzer.py:170:                "context_elements": [elem.key for elem in context_elements],
./DuRiCore/situation_analyzer.py:171:                "key_factors": await self._identify_key_factors(input_data, context),
./DuRiCore/situation_analyzer.py:178:                    "keywords": situation_pattern.keywords,
./DuRiCore/situation_analyzer.py:190:                "key_factors": [],
./DuRiCore/situation_analyzer.py:205:                "key_fields": (
./DuRiCore/situation_analyzer.py:206:                    list(input_data.keys()) if isinstance(input_data, dict) else []
./DuRiCore/situation_analyzer.py:226:            for key, value in context.items():
./DuRiCore/situation_analyzer.py:227:                importance = self._calculate_context_importance(key, value)
./DuRiCore/situation_analyzer.py:228:                category = self._categorize_context_element(key, value)
./DuRiCore/situation_analyzer.py:229:                confidence = self._calculate_context_confidence(key, value)
./DuRiCore/situation_analyzer.py:232:                    key=key,
./DuRiCore/situation_analyzer.py:242:            elements.sort(key=lambda x: x.importance, reverse=True)
./DuRiCore/situation_analyzer.py:260:            matched_keywords = []
./DuRiCore/situation_analyzer.py:267:                pattern_keywords = pattern_info["keywords"]
./DuRiCore/situation_analyzer.py:268:                matched = [kw for kw in pattern_keywords if kw in content_lower]
./DuRiCore/situation_analyzer.py:271:                    score = len(matched) / len(pattern_keywords)
./DuRiCore/situation_analyzer.py:276:                        matched_keywords = matched
./DuRiCore/situation_analyzer.py:279:                        risk_keywords = pattern_info["risk_factors"]
./DuRiCore/situation_analyzer.py:281:                            kw for kw in risk_keywords if kw in content_lower
./DuRiCore/situation_analyzer.py:285:                        urgency_keywords = pattern_info["urgency_indicators"]
./DuRiCore/situation_analyzer.py:287:                            kw for kw in urgency_keywords if kw in content_lower
./DuRiCore/situation_analyzer.py:300:                keywords=matched_keywords,
./DuRiCore/situation_analyzer.py:311:                keywords=[],
./DuRiCore/situation_analyzer.py:334:            for risk_level, keywords in self.risk_keywords.items():
./DuRiCore/situation_analyzer.py:335:                for keyword in keywords:
./DuRiCore/situation_analyzer.py:336:                    if keyword in content_lower:
./DuRiCore/situation_analyzer.py:386:            for urgency_level, keywords in self.urgency_keywords.items():
./DuRiCore/situation_analyzer.py:387:                for keyword in keywords:
./DuRiCore/situation_analyzer.py:388:                    if keyword in content_lower:
./DuRiCore/situation_analyzer.py:435:            for complexity_level, keywords in self.complexity_indicators.items():
./DuRiCore/situation_analyzer.py:436:                for keyword in keywords:
./DuRiCore/situation_analyzer.py:437:                    if keyword in content_lower:
./DuRiCore/situation_analyzer.py:465:    async def _identify_key_factors(
./DuRiCore/situation_analyzer.py:473:            important_keys = ["importance", "urgency", "risk", "priority", "deadline"]
./DuRiCore/situation_analyzer.py:474:            for key in important_keys:
./DuRiCore/situation_analyzer.py:475:                if key in context:
./DuRiCore/situation_analyzer.py:476:                    factors.append(key)
./DuRiCore/situation_analyzer.py:584:    def _calculate_context_importance(self, key: str, value: Any) -> float:
./DuRiCore/situation_analyzer.py:590:            important_keys = ["importance", "urgency", "risk", "priority", "deadline"]
./DuRiCore/situation_analyzer.py:591:            if key.lower() in important_keys:
./DuRiCore/situation_analyzer.py:605:    def _categorize_context_element(self, key: str, value: Any) -> str:
./DuRiCore/situation_analyzer.py:608:            if key in ["importance", "priority", "urgency"]:
./DuRiCore/situation_analyzer.py:610:            elif key in ["risk", "danger", "threat"]:
./DuRiCore/situation_analyzer.py:612:            elif key in ["emotion", "mood", "feeling"]:
./DuRiCore/situation_analyzer.py:614:            elif key in ["time", "deadline", "schedule"]:
./DuRiCore/situation_analyzer.py:616:            elif key in ["memory", "history", "past"]:
./DuRiCore/situation_analyzer.py:623:    def _calculate_context_confidence(self, key: str, value: Any) -> float:
./DuRiCore/situation_analyzer.py:645:            for key, value in context.items():
./DuRiCore/situation_analyzer.py:648:                        indicators.append(f"{key}:high_priority")
./DuRiCore/situation_analyzer.py:650:                        indicators.append(f"{key}:low_priority")
./DuRiCore/situation_analyzer.py:720:        print(f"핵심 요소: {result['key_factors']}")
./DuRiCore/dynamic_reasoning_graph.py:120:        self.semantic_keywords = {
./DuRiCore/dynamic_reasoning_graph.py:145:        vector = np.zeros(len(self.semantic_keywords))
./DuRiCore/dynamic_reasoning_graph.py:148:        for i, (keyword, weight) in enumerate(self.semantic_keywords.items()):
./DuRiCore/dynamic_reasoning_graph.py:149:            if keyword in text_lower:
./DuRiCore/dynamic_reasoning_graph.py:164:        cache_key = f"{text1}|||{text2}"
./DuRiCore/dynamic_reasoning_graph.py:165:        if cache_key in self.similarity_cache:
./DuRiCore/dynamic_reasoning_graph.py:166:            return self.similarity_cache[cache_key]
./DuRiCore/dynamic_reasoning_graph.py:178:            self.similarity_cache[cache_key] = similarity
./DuRiCore/dynamic_reasoning_graph.py:364:        graph.root_nodes.extend(situation_nodes.keys())
./DuRiCore/dynamic_reasoning_graph.py:383:        graph.leaf_nodes.extend(conclusion_nodes.keys())
./DuRiCore/application_system.py:149:        emotion_keywords = {
./DuRiCore/application_system.py:197:        for emotion, keywords in emotion_keywords.items():
./DuRiCore/application_system.py:198:            if any(keyword in user_input for keyword in keywords):
./DuRiCore/user_interface_system.py:287:        for key, value in updates.items():
./DuRiCore/user_interface_system.py:288:            if hasattr(interface_state, key):
./DuRiCore/user_interface_system.py:289:                setattr(interface_state, key, value)
./DuRiCore/user_interface_system.py:452:        for key, value in config_updates.items():
./DuRiCore/user_interface_system.py:453:            if key in self.user_preferences:
./DuRiCore/user_interface_system.py:454:                self.user_preferences[key] = value
./DuRiCore/user_interface_system.py:616:            "registered_systems": list(self.system_registry.keys()),
./DuRiCore/semantic_vector_engine.py:126:            "ethical_keywords": [
./DuRiCore/semantic_vector_engine.py:196:            "conflict_keywords": [
./DuRiCore/semantic_vector_engine.py:253:            "decision_keywords": [
./DuRiCore/semantic_vector_engine.py:299:            "practical_keywords": [
./DuRiCore/semantic_vector_engine.py:349:            "complexity_keywords": [
./DuRiCore/semantic_vector_engine.py:507:            "general_keywords": [
./DuRiCore/semantic_vector_engine.py:663:            "ethical_keywords": 1.0,
./DuRiCore/semantic_vector_engine.py:664:            "conflict_keywords": 1.0,
./DuRiCore/semantic_vector_engine.py:665:            "decision_keywords": 1.0,
./DuRiCore/semantic_vector_engine.py:666:            "practical_keywords": 1.0,
./DuRiCore/semantic_vector_engine.py:667:            "complexity_keywords": 1.2,
./DuRiCore/semantic_vector_engine.py:668:            "general_keywords": 0.8,
./DuRiCore/semantic_vector_engine.py:671:        matched_keywords = {}
./DuRiCore/semantic_vector_engine.py:673:        for category, keywords in self.semantic_patterns.items():
./DuRiCore/semantic_vector_engine.py:674:            score, matched_in_category = self._optimized_keyword_matching(
./DuRiCore/semantic_vector_engine.py:675:                text, keywords
./DuRiCore/semantic_vector_engine.py:677:            matched_keywords[category] = matched_in_category
./DuRiCore/semantic_vector_engine.py:680:            if keywords:
./DuRiCore/semantic_vector_engine.py:682:                    score / len(keywords), 1.0
./DuRiCore/semantic_vector_engine.py:686:                if category == "ethical_keywords":
./DuRiCore/semantic_vector_engine.py:689:                    privacy_keywords = [
./DuRiCore/semantic_vector_engine.py:698:                        1.0 for kw in privacy_keywords if kw in text
./DuRiCore/semantic_vector_engine.py:699:                    ) / len(privacy_keywords)
./DuRiCore/semantic_vector_engine.py:701:                elif category == "conflict_keywords":
./DuRiCore/semantic_vector_engine.py:703:                elif category == "decision_keywords":
./DuRiCore/semantic_vector_engine.py:705:                elif category == "practical_keywords":
./DuRiCore/semantic_vector_engine.py:707:                elif category == "complexity_keywords":
./DuRiCore/semantic_vector_engine.py:709:                elif category == "general_keywords":
./DuRiCore/semantic_vector_engine.py:737:        special_complexity_keywords = [
./DuRiCore/semantic_vector_engine.py:748:            1.0 for kw in special_complexity_keywords if kw in text
./DuRiCore/semantic_vector_engine.py:749:        ) / len(special_complexity_keywords)
./DuRiCore/semantic_vector_engine.py:756:        special_general_keywords = [
./DuRiCore/semantic_vector_engine.py:766:            1.0 for kw in special_general_keywords if kw in text
./DuRiCore/semantic_vector_engine.py:767:        ) / len(special_general_keywords)
./DuRiCore/semantic_vector_engine.py:774:        features["_debug_matched_keywords"] = matched_keywords
./DuRiCore/semantic_vector_engine.py:779:    def _optimized_keyword_matching(
./DuRiCore/semantic_vector_engine.py:780:        self, text: str, keywords: List[str]
./DuRiCore/semantic_vector_engine.py:790:        sorted_keywords = sorted(keywords, key=len, reverse=True)
./DuRiCore/semantic_vector_engine.py:792:        for keyword in sorted_keywords:
./DuRiCore/semantic_vector_engine.py:793:            keyword_lower = keyword.lower()
./DuRiCore/semantic_vector_engine.py:794:            if keyword_lower in text_lower:
./DuRiCore/semantic_vector_engine.py:796:                keyword_weight = len(keyword) / 10.0
./DuRiCore/semantic_vector_engine.py:799:                if len(keyword) > 5:
./DuRiCore/semantic_vector_engine.py:800:                    keyword_weight *= 1.5
./DuRiCore/semantic_vector_engine.py:802:                score += keyword_weight
./DuRiCore/semantic_vector_engine.py:803:                matched.append(keyword)
./DuRiCore/semantic_vector_engine.py:874:        keyword_matches = sum(
./DuRiCore/semantic_vector_engine.py:879:        keyword_bonus = min(keyword_matches * 0.15, 0.4)  # Day 4: 보너스 증가
./DuRiCore/semantic_vector_engine.py:918:            + keyword_bonus
./DuRiCore/semantic_vector_engine.py:974:            for key in base_weights:
./DuRiCore/semantic_vector_engine.py:975:                if key != "general_score":
./DuRiCore/semantic_vector_engine.py:976:                    base_weights[key] *= 0.9
./DuRiCore/semantic_vector_engine.py:981:            for key in base_weights:
./DuRiCore/semantic_vector_engine.py:982:                base_weights[key] /= total_weight
./DuRiCore/semantic_vector_engine.py:1012:        urgency_keywords = ["긴급", "시급", "즉시", "빠른", "신속", "급한", "긴급한"]
./DuRiCore/semantic_vector_engine.py:1013:        if any(urgency in str(temporal_aspects) for urgency in urgency_keywords):
./DuRiCore/semantic_vector_engine.py:1304:        urgency_keywords = ["긴급", "시급", "즉시", "빠른", "신속", "급한", "긴급한"]
./DuRiCore/semantic_vector_engine.py:1305:        if any(urgency in str(temporal_aspects) for urgency in urgency_keywords):
./DuRiCore/semantic_vector_engine.py:1410:        motivation_keywords = ["위해", "때문에", "이유로", "목적으로", "결과로"]
./DuRiCore/semantic_vector_engine.py:1411:        for keyword in motivation_keywords:
./DuRiCore/semantic_vector_engine.py:1412:            if keyword in situation:
./DuRiCore/semantic_vector_engine.py:1413:                context["motivations"].append(keyword)
./DuRiCore/semantic_vector_engine.py:1416:        circumstance_keywords = ["상황", "경우", "때", "상황에서", "경우에"]
./DuRiCore/semantic_vector_engine.py:1417:        for keyword in circumstance_keywords:
./DuRiCore/semantic_vector_engine.py:1418:            if keyword in situation:
./DuRiCore/semantic_vector_engine.py:1419:                context["circumstances"].append(keyword)
./DuRiCore/test_phase10_integration.py:303:            "key_factors": ["기술 발전", "시장 수요", "정책 지원"],
./DuRiCore/integrated_language_understanding_generation_system.py:67:    key_concepts: List[str]
./DuRiCore/integrated_language_understanding_generation_system.py:121:        cache_key = hashlib.md5(
./DuRiCore/integrated_language_understanding_generation_system.py:122:            f"{text}_{json.dumps(context, sort_keys=True)}".encode()
./DuRiCore/integrated_language_understanding_generation_system.py:124:        if cache_key in self.understanding_cache:
./DuRiCore/integrated_language_understanding_generation_system.py:125:            return self.understanding_cache[cache_key]
./DuRiCore/integrated_language_understanding_generation_system.py:152:            key_concepts=semantic_analysis.get("key_concepts", []),
./DuRiCore/integrated_language_understanding_generation_system.py:163:        self.understanding_cache[cache_key] = understanding_result
./DuRiCore/integrated_language_understanding_generation_system.py:202:        cache_key = hashlib.md5(
./DuRiCore/integrated_language_understanding_generation_system.py:203:            f"{json.dumps(context, sort_keys=True)}_{generation_type.value}".encode()
./DuRiCore/integrated_language_understanding_generation_system.py:205:        if cache_key in self.generation_cache:
./DuRiCore/integrated_language_understanding_generation_system.py:206:            return self.generation_cache[cache_key]
./DuRiCore/integrated_language_understanding_generation_system.py:211:        key_concepts = context.get("keywords", [])
./DuRiCore/integrated_language_understanding_generation_system.py:220:        if key_concepts:
./DuRiCore/integrated_language_understanding_generation_system.py:221:            enhanced_context["key_concepts"] = key_concepts
./DuRiCore/integrated_language_understanding_generation_system.py:290:        self.generation_cache[cache_key] = generation_result
./DuRiCore/integrated_language_understanding_generation_system.py:318:                key_concepts = context.get("key_concepts", [])
./DuRiCore/integrated_language_understanding_generation_system.py:319:                if key_concepts:
./DuRiCore/integrated_language_understanding_generation_system.py:321:                        1.0, semantic_quality + len(key_concepts) * 0.1
./DuRiCore/integrated_language_understanding_generation_system.py:402:        temporal_keywords = []
./DuRiCore/integrated_language_understanding_generation_system.py:405:            temporal_keywords.extend(matches)
./DuRiCore/integrated_language_understanding_generation_system.py:408:            "temporal_keywords": temporal_keywords,
./DuRiCore/integrated_language_understanding_generation_system.py:409:            "temporal_relevance": len(temporal_keywords) / len(text.split()),
./DuRiCore/integrated_language_understanding_generation_system.py:421:        spatial_keywords = []
./DuRiCore/integrated_language_understanding_generation_system.py:424:            spatial_keywords.extend(matches)
./DuRiCore/integrated_language_understanding_generation_system.py:427:            "spatial_keywords": spatial_keywords,
./DuRiCore/integrated_language_understanding_generation_system.py:428:            "spatial_relevance": len(spatial_keywords) / len(text.split()),
./DuRiCore/integrated_language_understanding_generation_system.py:434:        social_keywords = re.findall(
./DuRiCore/integrated_language_understanding_generation_system.py:439:            "social_keywords": social_keywords,
./DuRiCore/integrated_language_understanding_generation_system.py:440:            "social_relevance": len(social_keywords) / len(text.split()),
./DuRiCore/integrated_language_understanding_generation_system.py:446:        topic_keywords = re.findall(
./DuRiCore/integrated_language_understanding_generation_system.py:451:            "topic_keywords": topic_keywords,
./DuRiCore/integrated_language_understanding_generation_system.py:452:            "topic_relevance": len(topic_keywords) / len(text.split()),
./DuRiCore/integrated_language_understanding_generation_system.py:458:        emotion_keywords = re.findall(
./DuRiCore/integrated_language_understanding_generation_system.py:463:            "emotion_keywords": emotion_keywords,
./DuRiCore/integrated_language_understanding_generation_system.py:464:            "emotion_relevance": len(emotion_keywords) / len(text.split()),
./DuRiCore/integrated_language_understanding_generation_system.py:503:        self.emotion_keywords = {
./DuRiCore/integrated_language_understanding_generation_system.py:523:        for emotion, keywords in self.emotion_keywords.items():
./DuRiCore/integrated_language_understanding_generation_system.py:525:            for keyword in keywords:
./DuRiCore/integrated_language_understanding_generation_system.py:526:                if keyword in text:
./DuRiCore/integrated_language_understanding_generation_system.py:532:            max(emotion_scores.items(), key=lambda x: x[1])[0]
./DuRiCore/integrated_language_understanding_generation_system.py:579:            max(intent_scores.items(), key=lambda x: x[1])[0]
./DuRiCore/integrated_language_understanding_generation_system.py:599:        keywords = self._extract_keywords(text)
./DuRiCore/integrated_language_understanding_generation_system.py:602:        key_concepts = self._extract_key_concepts(text)
./DuRiCore/integrated_language_understanding_generation_system.py:608:            "keywords": keywords,
./DuRiCore/integrated_language_understanding_generation_system.py:609:            "key_concepts": key_concepts,
./DuRiCore/integrated_language_understanding_generation_system.py:614:    def _extract_keywords(self, text: str) -> List[str]:
./DuRiCore/integrated_language_understanding_generation_system.py:619:        keywords = [word for word, freq in word_freq.most_common(5) if len(word) > 1]
./DuRiCore/integrated_language_understanding_generation_system.py:620:        return keywords
./DuRiCore/integrated_language_understanding_generation_system.py:622:    def _extract_key_concepts(self, text: str) -> List[str]:
./DuRiCore/integrated_language_understanding_generation_system.py:832:        emotion_keywords = {
./DuRiCore/integrated_language_understanding_generation_system.py:839:        for emotion, keywords in emotion_keywords.items():
./DuRiCore/integrated_language_understanding_generation_system.py:840:            for keyword in keywords:
./DuRiCore/integrated_language_understanding_generation_system.py:841:                if keyword in text:
./DuRiCore/integrated_language_understanding_generation_system.py:868:        context_keywords = context.get("keywords", [])
./DuRiCore/integrated_language_understanding_generation_system.py:871:        if not context_keywords:
./DuRiCore/integrated_language_understanding_generation_system.py:874:        relevant_words = sum(1 for word in text_words if word in context_keywords)
./DuRiCore/integrated_language_understanding_generation_system.py:968:                    understanding_result.key_concepts[0]
./DuRiCore/integrated_language_understanding_generation_system.py:969:                    if understanding_result.key_concepts
./DuRiCore/integrated_language_understanding_generation_system.py:973:                "keywords": understanding_result.key_concepts,
./DuRiCore/integrated_language_understanding_generation_system.py:977:                    "key_concepts": understanding_result.key_concepts,
./DuRiCore/integrated_language_understanding_generation_system.py:1040:            if understanding_result.key_concepts:
./DuRiCore/integrated_language_understanding_generation_system.py:1041:                semantic_score = min(1.0, len(understanding_result.key_concepts) * 0.1)
./DuRiCore/behavior_generator.py:284:        return max(strategy_scores, key=strategy_scores.get)
./DuRiCore/behavior_generator.py:298:        template_key = template_mapping.get(behavior_type, "immediate_response")
./DuRiCore/behavior_generator.py:299:        return self.behavior_templates[template_key]
./DuRiCore/enhanced_wisdom_integration.py:199:        ethical_keywords = ["거짓말", "희생", "도둑", "폭력", "윤리", "도덕"]
./DuRiCore/enhanced_wisdom_integration.py:200:        practical_keywords = ["자원", "갈등", "결정", "효율", "공정"]
./DuRiCore/enhanced_wisdom_integration.py:201:        complex_keywords = ["복잡", "다면", "상충", "양면", "모순"]
./DuRiCore/enhanced_wisdom_integration.py:203:        if any(keyword in situation for keyword in ethical_keywords):
./DuRiCore/enhanced_wisdom_integration.py:205:        elif any(keyword in situation for keyword in practical_keywords):
./DuRiCore/enhanced_wisdom_integration.py:207:        elif any(keyword in situation for keyword in complex_keywords):
./DuRiCore/enhanced_wisdom_integration.py:415:        keywords = situation.split()
./DuRiCore/enhanced_wisdom_integration.py:418:        ethical_keywords = ["거짓말", "진실", "도덕", "윤리", "정직"]
./DuRiCore/enhanced_wisdom_integration.py:419:        if any(keyword in situation for keyword in ethical_keywords):
./DuRiCore/enhanced_wisdom_integration.py:429:        practical_keywords = ["효율", "자원", "비용", "이익", "결과"]
./DuRiCore/enhanced_wisdom_integration.py:430:        if any(keyword in situation for keyword in practical_keywords):
./DuRiCore/enhanced_wisdom_integration.py:440:        conflict_keywords = ["갈등", "충돌", "대립", "반대", "상충"]
./DuRiCore/enhanced_wisdom_integration.py:441:        if any(keyword in situation for keyword in conflict_keywords):
./DuRiCore/DURI_DEVELOPMENT_BARRIERS_ANALYSIS.md:285:        return sorted(goals, key=lambda x: x.priority, reverse=True)
./DuRiCore/reasoning_system/integration/priority_system.py:67:        priority_items.sort(key=lambda x: x.priority_score, reverse=True)
./DuRiCore/reasoning_system/integration/conflict_detection.py:113:        common_keys = set(element1.keys()) & set(element2.keys())
./DuRiCore/reasoning_system/integration/conflict_detection.py:115:        for key in common_keys:
./DuRiCore/reasoning_system/integration/conflict_detection.py:116:            if isinstance(element1[key], (str, int, float)) and isinstance(
./DuRiCore/reasoning_system/integration/conflict_detection.py:117:                element2[key], (str, int, float)
./DuRiCore/reasoning_system/integration/conflict_detection.py:119:                if element1[key] != element2[key]:
./DuRiCore/reasoning_system/integration/conflict_detection.py:138:        common_keys = set(element1.keys()) & set(element2.keys())
./DuRiCore/reasoning_system/integration/conflict_detection.py:140:        for key in common_keys:
./DuRiCore/reasoning_system/integration/conflict_detection.py:141:            if type(element1[key]) != type(element2[key]):
./DuRiCore/reasoning_system/integration/conflict_detection.py:161:        structure_diff = len(set(element1.keys()) ^ set(element2.keys()))
./DuRiCore/reasoning_system/reasoning_engine/logic_processor.py:138:            for key, value in input_data.items():
./DuRiCore/reasoning_system/reasoning_engine/logic_processor.py:157:                        premises=[f"입력: {key}"],
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:173:            best_option = max(scored_options, key=lambda x: x.overall_score)
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:216:            best_option = max(intuitive_scores, key=lambda x: x.overall_score)
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:261:            best_option = max(emotional_scores, key=lambda x: x.overall_score)
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:308:            best_option = max(collaborative_scores, key=lambda x: x.overall_score)
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:353:            best_option = max(adaptive_scores, key=lambda x: x.overall_score)
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:398:            best_option = max(strategic_scores, key=lambda x: x.overall_score)
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:533:            positive_keywords = ["good", "positive", "happy", "success", "benefit"]
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:534:            for keyword in positive_keywords:
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:535:                if keyword in option.description.lower():
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:539:            negative_keywords = ["bad", "negative", "sad", "failure", "harm"]
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:540:            for keyword in negative_keywords:
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:541:                if keyword in option.description.lower():
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:628:            flexibility_keywords = ["flexible", "adaptive", "dynamic", "changeable"]
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:629:            for keyword in flexibility_keywords:
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:630:                if keyword in option.description.lower():
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:676:            strategic_keywords = ["strategic", "long-term", "future", "vision", "goal"]
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:677:            for keyword in strategic_keywords:
./DuRiCore/reasoning_system/reasoning_engine/decision_maker.py:678:                if keyword in option.description.lower():
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:360:        for key, value in input_data.items():
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:362:                premises.append(f"{key}: {value}")
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:381:        for key, value in input_data.items():
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:383:                patterns.append(f"패턴 발견: {key}")
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:399:        for key, value in input_data.items():
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:400:            observations.append(f"관찰: {key} = {value}")
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:427:        for key, value in input_data.items():
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:428:            similarities.append(f"유사성: {key}")
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:455:        for key, value in input_data.items():
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:456:            ideas.append(f"창의적 아이디어: {key} 기반")
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:472:        for key, value in input_data.items():
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:473:            patterns.append(f"직관적 패턴: {key}")
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:489:        for key, value in input_data.items():
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:490:            factors.append(f"감정적 요소: {key}")
./DuRiCore/reasoning_system/reasoning_engine/inference_engine.py:509:        sorted_results = sorted(results, key=lambda x: x.confidence, reverse=True)
./DuRiCore/reasoning_system/reasoning_optimization/reasoning_optimizer.py:400:                key=lambda s: s.expected_improvement * s.confidence, reverse=True
./DuRiCore/reasoning_system/reasoning_optimization/reasoning_optimizer.py:518:                max(results, key=lambda r: r.improvement).strategy if results else None
./DuRiCore/reasoning_system/adaptive/dynamic_reasoning_engine.py:168:            emotional_keywords = [
./DuRiCore/reasoning_system/adaptive/dynamic_reasoning_engine.py:177:            creative_keywords = [
./DuRiCore/reasoning_system/adaptive/dynamic_reasoning_engine.py:185:            logical_keywords = [
./DuRiCore/reasoning_system/adaptive/dynamic_reasoning_engine.py:197:                1 for keyword in emotional_keywords if keyword in data_str
./DuRiCore/reasoning_system/adaptive/dynamic_reasoning_engine.py:200:                1 for keyword in creative_keywords if keyword in data_str
./DuRiCore/reasoning_system/adaptive/dynamic_reasoning_engine.py:203:                1 for keyword in logical_keywords if keyword in data_str
./DuRiCore/reasoning_system/reasoning_strategies/abductive_reasoning.py:468:            testable_keywords = [
./DuRiCore/reasoning_system/reasoning_strategies/abductive_reasoning.py:477:                1 for keyword in testable_keywords if keyword in content_lower
./DuRiCore/reasoning_system/reasoning_strategies/abductive_reasoning.py:481:            testability = min(1.0, testable_count / len(testable_keywords) + 0.3)
./DuRiCore/reasoning_system/reasoning_strategies/inductive_reasoning.py:420:            causal_keywords = [
./DuRiCore/reasoning_system/reasoning_strategies/inductive_reasoning.py:429:            for keyword in causal_keywords:
./DuRiCore/reasoning_system/reasoning_strategies/inductive_reasoning.py:430:                if keyword in content1 or keyword in content2:
./DuRiCore/reasoning_system/reasoning_strategies/inductive_reasoning.py:449:            predictive_keywords = [
./DuRiCore/reasoning_system/reasoning_strategies/inductive_reasoning.py:458:            for keyword in predictive_keywords:
./DuRiCore/reasoning_system/reasoning_strategies/inductive_reasoning.py:459:                if keyword in content1 or keyword in content2:
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:145:        common_keys = set(source1.keys()) & set(source2.keys())
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:146:        total_keys = set(source1.keys()) | set(source2.keys())
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:148:        if not total_keys:
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:151:        return len(common_keys) / len(total_keys)
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:158:        common_keys = set(source1.keys()) & set(source2.keys())
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:160:        if not common_keys:
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:164:        for key in common_keys:
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:165:            if isinstance(source1[key], (str, int, float)) and isinstance(
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:166:                source2[key], (str, int, float)
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:168:                if source1[key] == source2[key]:
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:178:        required_keys = ["id", "content", "timestamp"]
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:179:        present_keys = [key for key in required_keys if key in source]
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:181:        return len(present_keys) / len(required_keys)
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:188:        common_keys = set(source1.keys()) & set(source2.keys())
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:190:        if not common_keys:
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:194:        for key in common_keys:
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:195:            if isinstance(source1[key], (str, int, float)) and isinstance(
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:196:                source2[key], (str, int, float)
./DuRiCore/reasoning_system/consistency/integration_evaluator.py:198:                if source1[key] == source2[key]:
./DuRiCore/reasoning_system/consistency/logical_connectivity.py:132:        common_keys = set(step1.keys()) & set(step2.keys())
./DuRiCore/reasoning_system/consistency/logical_connectivity.py:133:        if not common_keys:
./DuRiCore/reasoning_system/consistency/logical_connectivity.py:137:        for key in common_keys:
./DuRiCore/reasoning_system/consistency/logical_connectivity.py:138:            if isinstance(step1[key], (str, int, float)) and isinstance(
./DuRiCore/reasoning_system/consistency/logical_connectivity.py:139:                step2[key], (str, int, float)
./DuRiCore/reasoning_system/consistency/logical_connectivity.py:141:                if step1[key] == step2[key]:
./DuRiCore/reasoning_system/consistency/logical_connectivity.py:170:        common_keys = set(prev_step.keys()) & set(current_step.keys())
./DuRiCore/reasoning_system/consistency/logical_connectivity.py:171:        if common_keys:
./DuRiCore/reasoning_system/consistency/logical_connectivity.py:172:            evidence.append(f"공통 키 발견: {', '.join(common_keys)}")
./DuRiCore/reasoning_system/consistency/knowledge_conflict.py:90:        common_keys = set(element1.keys()) & set(element2.keys())
./DuRiCore/reasoning_system/consistency/knowledge_conflict.py:92:        for key in common_keys:
./DuRiCore/reasoning_system/consistency/knowledge_conflict.py:93:            if isinstance(element1[key], (str, int, float)) and isinstance(
./DuRiCore/reasoning_system/consistency/knowledge_conflict.py:94:                element2[key], (str, int, float)
./DuRiCore/reasoning_system/consistency/knowledge_conflict.py:96:                if element1[key] != element2[key]:
./DuRiCore/reasoning_system/consistency/knowledge_conflict.py:105:                        conflict_type=f"value_mismatch_{key}",
./DuRiCore/CONTEXT_SUMMARY_FOR_CONTINUATION.md:107:def _optimize_cache_key(self, input_data: Dict[str, Any], context: Dict[str, Any]) -> str:
./DuRiCore/CONTEXT_SUMMARY_FOR_CONTINUATION.md:153:- **메서드**: `_optimize_cache_key`, `_improve_cache_strategy`, `_adjust_cache_size`
./DuRiCore/meta_cognition_system.py:608:                f"다양한 사고 유형({', '.join(type_counts.keys())})이 활용되었습니다."
./DuRiCore/user_experience_optimizer.py:257:            ux_improvements.sort(key=lambda x: x.priority_score, reverse=True)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:69:                "keywords": ["논리", "일관성", "모순", "전제", "결론"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:74:                "keywords": ["증거", "사실", "데이터", "근거", "입증"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:79:                "keywords": ["깊이", "분석", "탐구", "고찰", "사고"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:84:                "keywords": ["독창", "새로운", "혁신", "창의", "독특"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:89:                "keywords": ["실용", "적용", "실제", "유용", "효과"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:155:        logical_keywords = ["따라서", "그러므로", "결론적으로", "이유로", "때문에"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:156:        keyword_count = sum(1 for keyword in logical_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:157:        score += min(keyword_count * 0.1, 0.3)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:166:        contradiction_keywords = ["하지만", "그런데", "반면", "다른 한편"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:167:        contradiction_count = sum(1 for keyword in contradiction_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:177:        evidence_keywords = ["증거", "사실", "데이터", "근거", "입증", "확인", "검증"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:178:        evidence_count = sum(1 for keyword in evidence_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:189:            evidence_premises = [p for p in premises if any(kw in str(p) for kw in evidence_keywords)]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:200:        depth_keywords = ["분석", "탐구", "고찰", "사고", "검토", "연구", "조사"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:201:        depth_count = sum(1 for keyword in depth_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:221:        originality_keywords = ["새로운", "독창", "혁신", "창의", "독특", "차별화"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:222:        originality_count = sum(1 for keyword in originality_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:243:        practical_keywords = ["실용", "적용", "실제", "유용", "효과", "결과", "해결"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:244:        practical_count = sum(1 for keyword in practical_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:248:        action_keywords = ["해야 한다", "해야 한다", "필요하다", "권장한다", "제안한다"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:249:        action_count = sum(1 for keyword in action_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:255:            if any(keyword in conclusion for keyword in practical_keywords):
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:309:                "keywords": ["모든", "항상", "절대", "완전히", "전혀"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:314:                "keywords": ["끔찍한", "놀라운", "믿을 수 없는", "충격적인"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:319:                "keywords": ["따라서", "그러므로", "결론적으로"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:324:                "keywords": ["아마도", "어쩌면", "추정", "가능성"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:329:                "keywords": ["하지만", "그런데", "반면", "다른 한편"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:339:                "keywords": ["연구에 따르면", "데이터는", "사실은", "증거로"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:344:                "keywords": ["한편으로는", "다른 한편으로는", "양면적", "복합적"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:349:                "keywords": ["해결책은", "방법은", "전략은", "접근법은"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:354:                "keywords": ["분석해보면", "탐구해보면", "고찰해보면", "검토해보면"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:359:                "keywords": ["새로운 관점", "혁신적", "독창적", "차별화된"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:410:        evidence_keywords = ["연구", "데이터", "사실", "증거", "확인", "검증", "입증"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:411:        evidence_count = sum(1 for keyword in evidence_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:417:            evidence_premises = [p for p in premises if any(kw in str(p) for kw in evidence_keywords)]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:428:        logical_keywords = ["논리", "일관성", "추론", "전제", "결론", "따라서", "그러므로"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:429:        logical_count = sum(1 for keyword in logical_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:445:        originality_keywords = ["새로운", "독창", "혁신", "창의", "독특", "차별화"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:446:        originality_count = sum(1 for keyword in originality_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:462:        practical_keywords = ["실용", "적용", "실제", "유용", "효과", "해결", "방법"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:463:        practical_count = sum(1 for keyword in practical_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:469:            if any(keyword in conclusion for keyword in practical_keywords):
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:480:            keywords = pattern["keywords"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:483:            keyword_count = sum(1 for keyword in keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:484:            if keyword_count > 0:
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:485:                red_flags.append(f"{pattern_name}: {keyword_count}개 키워드 발견 (심각도: {severity})")
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:495:            keywords = pattern["keywords"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:498:            keyword_count = sum(1 for keyword in keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:499:            if keyword_count > 0:
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170257:500:                green_flags.append(f"{pattern_name}: {keyword_count}개 키워드 발견 (강도: {strength})")
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:69:                "keywords": ["논리", "일관성", "모순", "전제", "결론"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:74:                "keywords": ["증거", "사실", "데이터", "근거", "입증"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:79:                "keywords": ["깊이", "분석", "탐구", "고찰", "사고"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:84:                "keywords": ["독창", "새로운", "혁신", "창의", "독특"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:89:                "keywords": ["실용", "적용", "실제", "유용", "효과"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:155:        logical_keywords = ["따라서", "그러므로", "결론적으로", "이유로", "때문에"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:156:        keyword_count = sum(1 for keyword in logical_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:157:        score += min(keyword_count * 0.1, 0.3)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:166:        contradiction_keywords = ["하지만", "그런데", "반면", "다른 한편"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:167:        contradiction_count = sum(1 for keyword in contradiction_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:177:        evidence_keywords = ["증거", "사실", "데이터", "근거", "입증", "확인", "검증"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:178:        evidence_count = sum(1 for keyword in evidence_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:189:            evidence_premises = [p for p in premises if any(kw in str(p) for kw in evidence_keywords)]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:200:        depth_keywords = ["분석", "탐구", "고찰", "사고", "검토", "연구", "조사"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:201:        depth_count = sum(1 for keyword in depth_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:221:        originality_keywords = ["새로운", "독창", "혁신", "창의", "독특", "차별화"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:222:        originality_count = sum(1 for keyword in originality_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:243:        practical_keywords = ["실용", "적용", "실제", "유용", "효과", "결과", "해결"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:244:        practical_count = sum(1 for keyword in practical_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:248:        action_keywords = ["해야 한다", "해야 한다", "필요하다", "권장한다", "제안한다"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:249:        action_count = sum(1 for keyword in action_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:255:            if any(keyword in conclusion for keyword in practical_keywords):
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:309:                "keywords": ["모든", "항상", "절대", "완전히", "전혀"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:314:                "keywords": ["끔찍한", "놀라운", "믿을 수 없는", "충격적인"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:319:                "keywords": ["따라서", "그러므로", "결론적으로"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:324:                "keywords": ["아마도", "어쩌면", "추정", "가능성"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:329:                "keywords": ["하지만", "그런데", "반면", "다른 한편"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:339:                "keywords": ["연구에 따르면", "데이터는", "사실은", "증거로"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:344:                "keywords": ["한편으로는", "다른 한편으로는", "양면적", "복합적"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:349:                "keywords": ["해결책은", "방법은", "전략은", "접근법은"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:354:                "keywords": ["분석해보면", "탐구해보면", "고찰해보면", "검토해보면"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:359:                "keywords": ["새로운 관점", "혁신적", "독창적", "차별화된"],
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:410:        evidence_keywords = ["연구", "데이터", "사실", "증거", "확인", "검증", "입증"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:411:        evidence_count = sum(1 for keyword in evidence_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:417:            evidence_premises = [p for p in premises if any(kw in str(p) for kw in evidence_keywords)]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:428:        logical_keywords = ["논리", "일관성", "추론", "전제", "결론", "따라서", "그러므로"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:429:        logical_count = sum(1 for keyword in logical_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:445:        originality_keywords = ["새로운", "독창", "혁신", "창의", "독특", "차별화"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:446:        originality_count = sum(1 for keyword in originality_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:462:        practical_keywords = ["실용", "적용", "실제", "유용", "효과", "해결", "방법"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:463:        practical_count = sum(1 for keyword in practical_keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:469:            if any(keyword in conclusion for keyword in practical_keywords):
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:480:            keywords = pattern["keywords"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:483:            keyword_count = sum(1 for keyword in keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:484:            if keyword_count > 0:
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:485:                red_flags.append(f"{pattern_name}: {keyword_count}개 키워드 발견 (심각도: {severity})")
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:495:            keywords = pattern["keywords"]
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:498:            keyword_count = sum(1 for keyword in keywords if keyword in content)
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:499:            if keyword_count > 0:
./DuRiCore/backups/self_rewrites/insight_evaluation_system.py.backup_20250806_170601:500:                green_flags.append(f"{pattern_name}: {keyword_count}개 키워드 발견 (강도: {strength})")
./DuRiCore/test_reasoning_system_modules.py:38:            context_type="test", input_data={"key1": "value1", "key2": "value2"}
./DuRiCore/safe_test_runner.py:177:    except KeyboardInterrupt:
./DuRiCore/deployment/deployment_integrity.py:43:        hmac_key_str = os.getenv("DURI_HMAC_KEY", "")
./DuRiCore/deployment/deployment_integrity.py:44:        self.hmac_key = hmac_key_str.encode() if hmac_key_str else None
./DuRiCore/deployment/deployment_integrity.py:46:        logger.info(f"DeploymentIntegrity 초기화: hash_algorithm={self.hash_algorithm}, version={self.hash_version}, schema_version={self.schema_version}, mode={self.mode}, hmac_enabled={bool(self.hmac_key)}")
./DuRiCore/deployment/deployment_integrity.py:91:        if not self.hmac_key:
./DuRiCore/deployment/deployment_integrity.py:93:        return hmac.new(self.hmac_key, payload, hashlib.sha256).hexdigest()
./DuRiCore/deployment/deployment_integrity.py:106:        if not self.hmac_key:
./DuRiCore/deployment/deployment_integrity.py:281:            checksums_data = json.dumps(checksums, indent=2, sort_keys=True).encode()
./DuRiCore/deployment/deployment_integrity.py:294:            metadata_data = json.dumps(metadata, indent=2, sort_keys=True).encode()
./DuRiCore/deployment/deployment_integrity.py:345:            if self.hmac_key:
./DuRiCore/deployment/deployment_integrity.py:384:            if self.hmac_key:
./DuRiCore/deployment/deployment_integrity.py:439:            new_files = [f for f in current_checksums.keys() if f not in stored_checksums]
./DuRiCore/deployment/deployment_integrity.py:489:                            "enabled": bool(self.hmac_key),
./DuRiCore/deployment/deployment_integrity.py:510:            if self.hmac_key and (checksums_sig_ok is False or metadata_sig_ok is False):
./DuRiCore/deployment/deployment_integrity.py:547:                    "enabled": bool(self.hmac_key),
./DuRiCore/deployment/deployment_integrity.py:588:            provenance_data = json.dumps(provenance, indent=2, sort_keys=True).encode()
./DuRiCore/deployment/checksums.json:14:  ".secrets.baseline": "073ae4a8125076694f271cbdd2521f9af31561c5e57cc8a4537149e93e428295",
./DuRiCore/deployment/checksums.json:1518:  "k8s/alertmanager-secrets.yaml": "44fb889c4894e9dabe3375781c823c7dc6e2fdd2ca000772055ddf61bca5c8fe",
./DuRiCore/deployment/checksums.json:1951:  "secrets/db_password": "251f381a074b17c9fb536cf2cb18de0fa18b5c113eff2e84eb9af886f2453166",
./DuRiCore/deployment/checksums.json:2056:  "test_secret.env": "63ee2264853ed09517a20fd5efaf99754f0296968812a4a225220d6bf550a548",
./DuRiCore/deployment/deployment_metadata.json:15:    ".secrets.baseline": "073ae4a8125076694f271cbdd2521f9af31561c5e57cc8a4537149e93e428295",
./DuRiCore/deployment/deployment_metadata.json:1519:    "k8s/alertmanager-secrets.yaml": "44fb889c4894e9dabe3375781c823c7dc6e2fdd2ca000772055ddf61bca5c8fe",
./DuRiCore/deployment/deployment_metadata.json:1952:    "secrets/db_password": "251f381a074b17c9fb536cf2cb18de0fa18b5c113eff2e84eb9af886f2453166",
./DuRiCore/deployment/deployment_metadata.json:2057:    "test_secret.env": "63ee2264853ed09517a20fd5efaf99754f0296968812a4a225220d6bf550a548",
./DuRiCore/internal_conflict_detector.py:378:        conflict_keywords = ["oppose", "contradict", "conflict", "incompatible"]
./DuRiCore/internal_conflict_detector.py:382:        for keyword in conflict_keywords:
./DuRiCore/internal_conflict_detector.py:383:            if keyword in goal1_lower or keyword in goal2_lower:
./DuRiCore/internal_conflict_detector.py:442:            key=lambda x: (self._get_severity_weight(x.severity), x.confidence),
./DuRiCore/adaptive_learning_system.py:757:                system_adaptations, key=lambda x: x.timestamp, reverse=True
./DuRiCore/adaptive_learning_system.py:815:            "registered_systems": list(self.system_registry.keys()),
./DuRiCore/minimal_test.py:111:    except KeyboardInterrupt:
./DuRiCore/comprehensive_testing_platform.py:515:        for key, expected_value in expected.items():
./DuRiCore/comprehensive_testing_platform.py:516:            if key in actual_result:
./DuRiCore/comprehensive_testing_platform.py:517:                actual_value = actual_result[key]
./DuRiCore/comprehensive_testing_platform.py:523:                    if key in [
./DuRiCore/comprehensive_testing_platform.py:532:                    elif key in [
./DuRiCore/comprehensive_testing_platform.py:811:            most_failed_suite = max(set(failure_patterns), key=failure_patterns.count)
./DuRiCore/system_adapters.py:230:        return list(cls._adapters.keys())
./DuRiCore/user_interface.py:206:            "keyboard_navigation": True,
./DuRiCore/basic_test.py:111:    except KeyboardInterrupt:
./DuRiCore/reasoning_engine/integration/reasoning_engine.py.backup:257:        best_type = max(similarities.items(), key=lambda x: x[1])[0]
./DuRiCore/reasoning_engine/integration/abductive_reasoning.py:515:        best_hypothesis = max(hypothesis_scores, key=lambda x: x[1])
./DuRiCore/reasoning_engine/integration/abductive_reasoning.py:824:        best_diagnosis = max(diagnosis_scores, key=lambda x: x[1])
./DuRiCore/reasoning_engine/integration/abductive_reasoning.py.backup:280:        best_hypothesis = max(hypothesis_scores, key=lambda x: x[1])
./DuRiCore/reasoning_engine/integration/abductive_reasoning.py.backup:589:        best_diagnosis = max(diagnosis_scores, key=lambda x: x[1])
./DuRiCore/reasoning_engine/integration/reasoning_engine.py:596:        best_type = max(similarities.items(), key=lambda x: x[1])[0]
./DuRiCore/reasoning_engine/integration/performance_monitor.py.backup:544:        for metric_name in history[0].metrics.keys():
./DuRiCore/reasoning_engine/integration/inductive_reasoning.py.backup:138:            most_common_pattern = max(common_patterns.items(), key=lambda x: x[1])
./DuRiCore/reasoning_engine/integration/reasoning_optimizer.py.backup:637:            best_strategy = max(strategy_improvements.items(), key=lambda x: x[1])[0]
./DuRiCore/reasoning_engine/integration/reasoning_optimizer.py:950:            best_strategy = max(strategy_improvements.items(), key=lambda x: x[1])[0]
./DuRiCore/reasoning_engine/integration/unified_judgment_system.py:1153:            key_factors = context.get("key_factors", [])
./DuRiCore/reasoning_engine/integration/unified_judgment_system.py:1163:                key_factors=key_factors,
./DuRiCore/reasoning_engine/integration/performance_monitor.py:911:        for metric_name in history[0].metrics.keys():
./DuRiCore/reasoning_engine/optimization/reasoning_optimizer.py:628:            best_strategy = max(strategy_improvements.items(), key=lambda x: x[1])[0]
./DuRiCore/reasoning_engine/optimization/performance_monitor.py:524:        for metric_name in history[0].metrics.keys():
./DuRiCore/reasoning_engine/strategies/abductive_reasoning.py:270:        best_hypothesis = max(hypothesis_scores, key=lambda x: x[1])
./DuRiCore/reasoning_engine/strategies/abductive_reasoning.py:523:        best_diagnosis = max(diagnosis_scores, key=lambda x: x[1])
./DuRiCore/reasoning_engine/strategies/inductive_reasoning.py:149:            most_common_pattern = max(common_patterns.items(), key=lambda x: x[1])
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:219:        self.keyword_cache = {}
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:411:        keywords = self._extract_semantic_keywords(situation)
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:414:        for keyword, weight in keywords.items():
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:417:                ethical in keyword
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:447:                practical in keyword
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:478:                logical in keyword
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:509:                value in keyword
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:538:        conflict_keywords = [
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:560:            for keyword, weight in keywords.items()
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:561:            if any(conflict in keyword for conflict in conflict_keywords)
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:567:        decision_keywords = [
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:589:            for keyword, weight in keywords.items()
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:590:            if any(decision in keyword for decision in decision_keywords)
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:605:        keywords = self._extract_semantic_keywords(action)
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:608:        for keyword, weight in keywords.items():
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:611:                ethical in keyword
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:636:                ethical in keyword
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:662:                practical in keyword
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:693:                logical in keyword
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:724:                value in keyword
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:770:            action in keyword
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:771:            for keyword, weight in keywords.items()
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:793:            action in keyword
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:794:            for keyword, weight in keywords.items()
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:801:    def _extract_semantic_keywords(self, text: str) -> Dict[str, float]:
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:804:        if text in self.keyword_cache:
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:805:            self._update_cache_stats("keyword_cache", True)
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:806:            return self.keyword_cache[text]
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:808:        self._update_cache_stats("keyword_cache", False)
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:810:        keywords = {}
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:813:        ethical_keywords = {
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:841:        practical_keywords = {
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:868:        logical_keywords = {
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:895:        value_keywords = {
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:922:        conflict_keywords = {
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:944:        decision_keywords = {
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:966:        all_keywords = {
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:967:            **ethical_keywords,
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:968:            **practical_keywords,
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:969:            **logical_keywords,
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:970:            **value_keywords,
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:971:            **conflict_keywords,
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:972:            **decision_keywords,
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:976:        for keyword, weight in all_keywords.items():
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:977:            if keyword in text:
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:978:                keywords[keyword] = weight
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:980:            elif len(keyword) > 2 and any(keyword in word for word in text.split()):
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:981:                keywords[keyword] = weight * 0.7  # 부분 매칭은 70% 가중치
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:984:        if len(self.keyword_cache) < self.max_cache_size:
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:985:            self.keyword_cache[text] = keywords
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:987:        return keywords
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:1058:        cache_key = (tuple(vector1), tuple(vector2))
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:1059:        if cache_key in self.similarity_cache:
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:1060:            return self.similarity_cache[cache_key]
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:1074:            self.similarity_cache[cache_key] = enhanced_similarity
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2335:        keywords1 = set(self._extract_semantic_keywords(text1).keys())
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2336:        keywords2 = set(self._extract_semantic_keywords(text2).keys())
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2338:        if not keywords1 and not keywords2:
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2341:        intersection = len(keywords1.intersection(keywords2))
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2342:        union = len(keywords1.union(keywords2))
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2551:        all_keywords = []
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2553:            keywords = self._extract_semantic_keywords(perspective.final_conclusion)
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2554:            all_keywords.extend(list(keywords.keys()))
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2559:        keyword_counts = Counter(all_keywords)
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2560:        common_keywords = [
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2561:            keyword
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2562:            for keyword, count in keyword_counts.items()
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2566:        if common_keywords:
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2567:            return f"공통 요소: {', '.join(common_keywords[:3])}"
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2667:        self.keyword_cache.clear()
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2678:            ("keyword", self.keyword_cache),
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2854:        expected_keywords = expected_outcome.lower().split()
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2855:        actual_keywords = result.final_conclusion.lower().split()
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2858:        common_keywords = set(expected_keywords) & set(actual_keywords)
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2860:        if not expected_keywords:
./DuRiCore/reasoning_engine/core/logical_reasoning_engine.py:2863:        accuracy = len(common_keywords) / len(expected_keywords)
./DuRiCore/reasoning_engine/core/logical_processor.py:97:        for key in frames:
./DuRiCore/reasoning_engine/core/logical_processor.py:98:            frames[key] = self._normalize_vector(frames[key])
./DuRiCore/reasoning_engine/core/logical_processor.py:125:        keywords = self._extract_semantic_keywords(text)
./DuRiCore/reasoning_engine/core/logical_processor.py:128:        for keyword, weight in keywords.items():
./DuRiCore/reasoning_engine/core/logical_processor.py:129:            if keyword in self.semantic_frames:
./DuRiCore/reasoning_engine/core/logical_processor.py:130:                vector += weight * self.semantic_frames[keyword]
./DuRiCore/reasoning_engine/core/logical_processor.py:134:    def _extract_semantic_keywords(self, text: str) -> Dict[str, float]:
./DuRiCore/reasoning_engine/core/logical_processor.py:136:        keywords = {}
./DuRiCore/reasoning_engine/core/logical_processor.py:143:                keywords["ethical"] = keywords.get("ethical", 0) + 0.3
./DuRiCore/reasoning_engine/core/logical_processor.py:149:                keywords["practical"] = keywords.get("practical", 0) + 0.3
./DuRiCore/reasoning_engine/core/logical_processor.py:155:                keywords["logical"] = keywords.get("logical", 0) + 0.3
./DuRiCore/reasoning_engine/core/logical_processor.py:161:                keywords["emotional"] = keywords.get("emotional", 0) + 0.3
./DuRiCore/reasoning_engine/core/logical_processor.py:163:        return keywords
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/final_integration_system.py:727:        for key in metrics_before:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/final_integration_system.py:728:            if key in metrics_after:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/final_integration_system.py:729:                before = metrics_before[key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/final_integration_system.py:730:                after = metrics_after[key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/final_integration_system.py:745:        for key in metrics_before:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/final_integration_system.py:746:            if key in metrics_after and "usage" in key.lower():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/final_integration_system.py:747:                before = metrics_before[key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/final_integration_system.py:748:                after = metrics_after[key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/final_integration_system.py:814:            for key, value in point["metrics"].items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/final_integration_system.py:815:                if "_performance" in key and key != "overall_performance":
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/final_integration_system.py:816:                    system_name = key.replace("_performance", "")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/DAY3_COMPLETION_REPORT.md:87:            "learning": {"keywords": [...], "risk_factors": [...], "urgency_indicators": [...]},
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/DAY3_COMPLETION_REPORT.md:88:            "decision": {"keywords": [...], "risk_factors": [...], "urgency_indicators": [...]},
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/DAY3_COMPLETION_REPORT.md:89:            "problem": {"keywords": [...], "risk_factors": [...], "urgency_indicators": [...]},
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/DAY3_COMPLETION_REPORT.md:90:            "opportunity": {"keywords": [...], "risk_factors": [...], "urgency_indicators": [...]},
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/DAY3_COMPLETION_REPORT.md:91:            "conflict": {"keywords": [...], "risk_factors": [...], "urgency_indicators": [...]},
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/DAY3_COMPLETION_REPORT.md:92:            "routine": {"keywords": [...], "risk_factors": [...], "urgency_indicators": [...]}
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/performance_enhancement_system.py:303:                target_metrics=list(adjustment_data.keys()),
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/loop_performance_optimizer.py:150:            bottlenecks.sort(key=lambda x: x.severity, reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/evolution_algorithm.py:488:            targets.sort(key=lambda x: x["optimization_potential"], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/evolution_algorithm.py:589:            opportunities.sort(key=lambda x: x["improvement_potential"], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/evolution_algorithm.py:969:            targets.sort(key=lambda x: x["optimization_potential"], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/evolution_algorithm.py:1046:            opportunities.sort(key=lambda x: x["improvement_potential"], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/evolution_algorithm.py:1396:                "complexity": len(pattern.get("key_factors", [])),
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/evolution_algorithm.py:1726:                "key_factors": ["timing", "context"],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/evolution_algorithm.py:1734:                "key_factors": ["complexity"],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/user_feedback_collector.py:73:    key_topics: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/user_feedback_collector.py:259:                key=lambda x: self._calculate_suggestion_priority(x), reverse=True
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/user_feedback_collector.py:470:        issue_keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/user_feedback_collector.py:483:                for issue_type, keywords in issue_keywords.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/user_feedback_collector.py:484:                    if any(keyword in content for keyword in keywords):
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/user_feedback_collector.py:507:            most_common_type = max(type_counts, key=type_counts.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/user_feedback_collector.py:518:            most_common_low = max(set(low_rating_types), key=low_rating_types.count)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/duri_orchestrator.py:134:        for system_name in self.systems.keys():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/duri_orchestrator.py:432:    except KeyboardInterrupt:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/DAY2_COMPLETION_REPORT.md:138:        keyword_result = self._classify_by_keywords(content, context)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/DAY2_COMPLETION_REPORT.md:260:  - 했다 (keyword, 신뢰도: 0.800)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/DAY2_COMPLETION_REPORT.md:261:  - 오늘 (keyword, 신뢰도: 0.800)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/advanced_feature_engine.py:520:            requirements, key=lambda x: (x.priority, -x.complexity), reverse=True
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/advanced_optimization_engine.py:772:            return sorted(strategies, key=lambda x: x.priority_score, reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:48:    key_factors: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:76:    key_insights: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:203:            key_insights = await self._extract_key_insights(performance_history)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:217:                key_insights=key_insights,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:309:                group_key = f"{behavior_type}_{strategy}"
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:311:                if group_key not in groups:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:312:                    groups[group_key] = []
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:314:                groups[group_key].append(behavior)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:347:            key_factors = await self._identify_key_factors(behaviors)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:360:                key_factors=key_factors,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:371:    async def _identify_key_factors(self, behaviors: List[Dict[str, Any]]) -> List[str]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:586:    async def _extract_key_insights(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:678:            key_insights=["분석할 성능 데이터가 없습니다."],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:785:        print(f"  주요 요소: {pattern.key_factors}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:799:        print(f"  주요 요소: {pattern.key_factors}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/learning_pattern_analyzer.py:813:    print(f"- 주요 인사이트: {effectiveness_report.key_insights}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/evolution_system.py:79:    key_achievements: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/evolution_system.py:612:            key_achievements = await self._identify_key_achievements(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/evolution_system.py:647:                key_achievements=key_achievements,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/evolution_system.py:964:    async def _identify_key_achievements(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/evolution_system.py:1094:            key_achievements=["System evolution failed"],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:23:    KEYWORD_ANALYSIS = "keyword_analysis"
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:33:    key: str
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:46:    keywords: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:59:                "keywords": [
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:73:                "keywords": [
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:86:                "keywords": ["문제", "오류", "실패", "위험", "장애", "고장", "충돌"],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:91:                "keywords": [
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:104:                "keywords": ["갈등", "충돌", "대립", "문제", "분쟁", "의견차이"],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:109:                "keywords": ["일상", "반복", "정기", "보통", "평범", "일반"],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:116:        self.risk_keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:123:        self.urgency_keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:170:                "context_elements": [elem.key for elem in context_elements],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:171:                "key_factors": await self._identify_key_factors(input_data, context),
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:178:                    "keywords": situation_pattern.keywords,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:190:                "key_factors": [],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:205:                "key_fields": (
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:206:                    list(input_data.keys()) if isinstance(input_data, dict) else []
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:226:            for key, value in context.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:227:                importance = self._calculate_context_importance(key, value)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:228:                category = self._categorize_context_element(key, value)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:229:                confidence = self._calculate_context_confidence(key, value)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:232:                    key=key,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:242:            elements.sort(key=lambda x: x.importance, reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:260:            matched_keywords = []
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:267:                pattern_keywords = pattern_info["keywords"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:268:                matched = [kw for kw in pattern_keywords if kw in content_lower]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:271:                    score = len(matched) / len(pattern_keywords)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:276:                        matched_keywords = matched
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:279:                        risk_keywords = pattern_info["risk_factors"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:281:                            kw for kw in risk_keywords if kw in content_lower
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:285:                        urgency_keywords = pattern_info["urgency_indicators"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:287:                            kw for kw in urgency_keywords if kw in content_lower
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:300:                keywords=matched_keywords,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:311:                keywords=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:334:            for risk_level, keywords in self.risk_keywords.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:335:                for keyword in keywords:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:336:                    if keyword in content_lower:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:386:            for urgency_level, keywords in self.urgency_keywords.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:387:                for keyword in keywords:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:388:                    if keyword in content_lower:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:435:            for complexity_level, keywords in self.complexity_indicators.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:436:                for keyword in keywords:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:437:                    if keyword in content_lower:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:465:    async def _identify_key_factors(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:473:            important_keys = ["importance", "urgency", "risk", "priority", "deadline"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:474:            for key in important_keys:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:475:                if key in context:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:476:                    factors.append(key)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:584:    def _calculate_context_importance(self, key: str, value: Any) -> float:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:590:            important_keys = ["importance", "urgency", "risk", "priority", "deadline"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:591:            if key.lower() in important_keys:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:605:    def _categorize_context_element(self, key: str, value: Any) -> str:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:608:            if key in ["importance", "priority", "urgency"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:610:            elif key in ["risk", "danger", "threat"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:612:            elif key in ["emotion", "mood", "feeling"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:614:            elif key in ["time", "deadline", "schedule"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:616:            elif key in ["memory", "history", "past"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:623:    def _calculate_context_confidence(self, key: str, value: Any) -> float:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:645:            for key, value in context.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:648:                        indicators.append(f"{key}:high_priority")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:650:                        indicators.append(f"{key}:low_priority")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/situation_analyzer.py:720:        print(f"핵심 요소: {result['key_factors']}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/behavior_generator.py:284:        return max(strategy_scores, key=strategy_scores.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/behavior_generator.py:298:        template_key = template_mapping.get(behavior_type, "immediate_response")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/behavior_generator.py:299:        return self.behavior_templates[template_key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/PHASE4_COMPLETION_REPORT.md:122:    return sorted(results, key=lambda x: x[1], reverse=True)[:limit]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/user_experience_optimizer.py:257:            ux_improvements.sort(key=lambda x: x.priority_score, reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/comprehensive_testing_platform.py:917:        sorted_results = sorted(test_results, key=lambda x: x.timestamp)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:42:    key_factors: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:152:            key_factors = await self._identify_key_factors(input_data, context)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:171:                key_factors=key_factors,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:184:                key_factors=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:326:                "key_fields": (
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:327:                    list(input_data.keys()) if isinstance(input_data, dict) else []
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:341:            for key, value in context.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:343:                    elements.append(f"{key}:{value}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:345:                    elements.append(f"{key}:{value}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:347:                    elements.extend([f"{key}.{k}:{v}" for k, v in value.items()])
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:349:                    elements.append(f"{key}:{len(value)}_items")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:371:            for pattern_name, keywords in patterns.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:372:                if any(keyword in content for keyword in keywords):
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:384:    async def _identify_key_factors(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/judgment_system.py:889:    print(f"핵심 요소: {situation_analysis.key_factors}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/integrated_learning_system.py:388:                metric_keys = self.completed_cycles[0].performance_metrics.keys()
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/integrated_learning_system.py:389:                for key in metric_keys:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/integrated_learning_system.py:391:                        c.performance_metrics.get(key, 0.0)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/integrated_learning_system.py:394:                    avg_metrics[key] = sum(values) / len(values)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/test_core_system.py:59:        print(f"🔑 키워드: {', '.join(summary['keywords'][:3])}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/behavior_trace.py:422:                metric_keys = self.performance_history[0]["metrics"].keys()
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/behavior_trace.py:423:                for key in metric_keys:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/behavior_trace.py:425:                        p["metrics"].get(key, 0.0) for p in self.performance_history
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/behavior_trace.py:427:                    avg_metrics[key] = sum(values) / len(values)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/behavior_trace.py:541:        data_str = json.dumps(data, sort_keys=True, default=str)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:153:            cache_key = (
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:156:            if cache_key in self.association_cache:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:157:                cached_associations = self.association_cache[cache_key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:168:                related_memories.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:174:                    link_key = self._get_link_key(memory_id, related_id)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:175:                    if link_key in self.associations:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:176:                        link = self.associations[link_key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:185:            related_memories.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:188:            self.association_cache[cache_key] = [
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:189:                self.associations[self._get_link_key(memory_id, related_id)]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:191:                if self._get_link_key(memory_id, related_id) in self.associations
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:226:                associations, key=lambda x: x.strength, reverse=True
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:228:            weakest_associations = sorted(associations, key=lambda x: x.strength)[:5]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:261:            link_key = self._get_link_key(source_id, target_id)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:263:            if link_key in self.associations:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:264:                link = self.associations[link_key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:294:            for link_key, link in self.associations.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:296:                    to_remove.append(link_key)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:298:            for link_key in to_remove:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:299:                link = self.associations[link_key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:308:                del self.associations[link_key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:577:                link_key = self._get_link_key(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:580:                self.associations[link_key] = association
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:592:    def _get_link_key(self, source_id: str, target_id: str) -> str:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:619:            emotion_keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:648:            for emotion_type, keywords in emotion_keywords.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:649:                for keyword in keywords:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:650:                    if keyword in content:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:684:            common_keys = set(context1.keys()) & set(context2.keys())
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:685:            if not common_keys:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:690:            for key in common_keys:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:691:                if context1[key] == context2[key]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:694:            return similar_values / len(common_keys)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:706:            theme_keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:725:            for theme, keywords in theme_keywords.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:726:                for keyword in keywords:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:727:                    if keyword in content:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:867:    for memory_id in test_memories.keys():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:877:    for memory_id in test_memories.keys():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_association.py:887:        memory_ids = list(test_memories.keys())
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:31:    KEYWORD = "keyword"  # 키워드 기반
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:44:    keywords_found: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:64:        self.keyword_dictionary = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:139:        self.emotion_keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:186:            keyword_result = self._classify_by_keywords(content, context)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:187:            results.append(keyword_result)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:210:                method=ClassificationMethod.KEYWORD,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:211:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:216:    def _classify_by_keywords(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:222:            keywords_found = {}
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:224:            for memory_type, keywords in self.keyword_dictionary.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:226:                found_keywords = []
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:229:                for keyword in keywords["primary"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:230:                    if keyword in content:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:232:                        found_keywords.append(keyword)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:235:                for keyword in keywords["secondary"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:236:                    if keyword in content:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:238:                        found_keywords.append(keyword)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:241:                for keyword in keywords["context"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:242:                    if keyword in content:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:244:                        found_keywords.append(keyword)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:247:                keywords_found[memory_type] = found_keywords
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:251:                best_type = max(scores, key=scores.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:260:                    method=ClassificationMethod.KEYWORD,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:261:                    keywords_found=keywords_found.get(best_type, []),
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:269:                method=ClassificationMethod.KEYWORD,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:270:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:280:                method=ClassificationMethod.KEYWORD,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:281:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:335:                best_type = max(scores, key=scores.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:343:                    keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:352:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:363:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:414:                best_type = max(scores, key=scores.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:422:                    keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:431:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:442:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:466:                best_type = max(weighted_scores, key=weighted_scores.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:470:                all_keywords = []
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:476:                        all_keywords.extend(result.keywords_found)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:484:                    keywords_found=list(set(all_keywords)),
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:494:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:505:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:514:                1 for word in self.emotion_keywords["positive"] if word in content
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:517:                1 for word in self.emotion_keywords["negative"] if word in content
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:520:                1 for word in self.emotion_keywords["neutral"] if word in content
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:636:                self.emotion_keywords["positive"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:637:                + self.emotion_keywords["negative"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:638:                + self.emotion_keywords["neutral"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:719:        for keyword in classification_result.keywords_found:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:722:                    tag=keyword,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:725:                    category="keyword",
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:768:        for key, value in context.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:772:                        tag=f"{key}:{value}",
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:781:                        tag=f"{key}:{value}",
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:850:            tag_key = f"{tag.tag}:{tag.category}"
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:851:            if tag_key not in seen_tags:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:852:                seen_tags.add(tag_key)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:856:        unique_tags.sort(key=lambda x: x.confidence, reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/memory_classification.py:913:        print(f"  키워드: {result.keywords_found}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/enhanced_memory_system.py:221:            results.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/enhanced_memory_system.py:266:            related_memories.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/enhanced_memory_system.py:377:        data = f"{content}{json.dumps(context, sort_keys=True)}"
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/enhanced_memory_system.py:386:            keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/enhanced_memory_system.py:394:            for memory_type, type_keywords in keywords.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/enhanced_memory_system.py:395:                score = sum(1 for keyword in type_keywords if keyword in content)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/enhanced_memory_system.py:406:            best_type = max(scores, key=scores.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/enhanced_memory_system.py:545:            return list(self.memories.keys())
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/duri_state_inspector.py:246:            for path in self.modules.keys():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/duri_state_inspector.py:288:        python_files = len([f for f in self.modules.keys() if f.endswith(".py")])
./DuRiCore/backup_repository/phase5_5_backup_20250805_103800/duri_state_inspector.py:289:        markdown_files = len([f for f in self.modules.keys() if f.endswith(".md")])
./DuRiCore/backup_repository/day9_backup/advanced_feature_engine.py:520:            requirements, key=lambda x: (x.priority, -x.complexity), reverse=True
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion_engine.py:37:        self.api_key = None  # 환경변수에서 로드
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion_engine.py:65:        emotion_keywords = {
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion_engine.py:77:        for emotion, keywords in emotion_keywords.items():
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion_engine.py:78:            for keyword in keywords:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion_engine.py:79:                if keyword in text:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion_engine.py:83:        primary_emotion = max(emotion_scores.items(), key=lambda x: x[1])[0]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:36:        self.api_key = None
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:47:            "key_topics": ["general"],
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:130:            video_keywords = ["영상", "동영상", "비디오", "자막", "subtitle", "video"]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:131:            if any(keyword in content_lower for keyword in video_keywords):
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:135:            family_keywords = ["가족", "부모", "아이", "아버지", "어머니", "family"]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:136:            if any(keyword in content_lower for keyword in family_keywords):
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:140:            metacognitive_keywords = ["생각", "사고", "분석", "이해", "학습", "meta"]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:141:            if any(keyword in content_lower for keyword in metacognitive_keywords):
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:145:            autonomous_keywords = ["스스로", "자율", "독립", "autonomous", "self"]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:146:            if any(keyword in content_lower for keyword in autonomous_keywords):
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:150:            social_keywords = ["사람", "관계", "소통", "대화", "social", "interaction"]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:151:            if any(keyword in content_lower for keyword in social_keywords):
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:267:                "key_concepts": self._extract_key_concepts(content),
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:312:    def _extract_key_concepts(self, content: str) -> List[str]:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:324:            key_concepts = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:328:            return [concept[0] for concept in key_concepts]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:461:            reflection_keywords = [
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:471:                1 for keyword in reflection_keywords if keyword in content
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:483:            self_keywords = ["나", "저", "내", "제", "스스로", "자신"]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:484:            self_count = sum(1 for keyword in self_keywords if keyword in content)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:565:            family_keywords = [
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:574:            family_count = sum(1 for keyword in family_keywords if keyword in content)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:585:            emotion_keywords = ["사랑", "기쁨", "슬픔", "화", "걱정", "감사", "미안"]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:586:            emotion_count = sum(1 for keyword in emotion_keywords if keyword in content)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:667:            autonomy_keywords = ["스스로", "자율", "독립", "스스로", "자신", "스스로"]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:669:                1 for keyword in autonomy_keywords if keyword in content
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:681:            direction_keywords = ["계획", "목표", "결정", "선택", "의지", "노력"]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:683:                1 for keyword in direction_keywords if keyword in content
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:765:            social_keywords = ["사람", "관계", "친구", "동료", "상호작용", "교류"]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:766:            social_count = sum(1 for keyword in social_keywords if keyword in content)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:777:            communication_keywords = ["대화", "소통", "이해", "표현", "듣기", "말하기"]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/learning_engine.py:779:                1 for keyword in communication_keywords if keyword in content
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/judgment/self_critique.py:127:        self.improvement_keywords = {
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/judgment/self_critique.py:338:        for area, keywords in self.improvement_keywords.items():
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/judgment/self_critique.py:339:            keyword_count = sum(1 for keyword in keywords if keyword in judgment_text)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/judgment/self_critique.py:340:            if keyword_count > 2:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/judgment/self_critique.py:519:        judgment_keys = list(judgment_data.keys())
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/judgment/self_critique.py:520:        if len(judgment_keys) > 5:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/judgment/self_critique.py:620:            improvement_counts.items(), key=lambda x: x[1], reverse=True
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/ethical_reasoning.py:37:        self.api_key = None
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/ethical_reasoning.py:518:            ethical_keywords = [
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/ethical_reasoning.py:529:                1 for keyword in ethical_keywords if keyword in situation
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/ethical_reasoning.py:750:            social_keywords = ["대화", "소통", "관계", "이해", "공감", "협력"]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/ethical_reasoning.py:752:                1 for keyword in social_keywords if keyword in input_text
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/self_evolution.py:497:        self.api_key = None
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:41:    emotional_keywords: List[str]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:50:        self.emotion_keywords = {
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:194:        self.context_keywords = {
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:208:            detected_emotions = self._detect_emotion_keywords(text)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:235:            emotional_keywords = self._extract_emotional_keywords(
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:249:                emotional_keywords=emotional_keywords,
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:257:    def _detect_emotion_keywords(self, text: str) -> Dict[EmotionCategory, List[str]]:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:262:        for emotion, keywords in self.emotion_keywords.items():
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:263:            found_keywords = []
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:264:            for keyword in keywords:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:265:                if keyword in text_lower:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:266:                    found_keywords.append(keyword)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:268:            if found_keywords:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:269:                detected[emotion] = found_keywords
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:288:        total_keywords = sum(len(keywords) for keywords in detected_emotions.values())
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:289:        if total_keywords > 3:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:306:        max_keywords = 0
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:309:        for emotion, keywords in detected_emotions.items():
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:310:            if len(keywords) > max_keywords:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:311:                max_keywords = len(keywords)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:323:        for emotion in detected_emotions.keys():
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:337:        total_keywords = sum(len(keywords) for keywords in detected_emotions.values())
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:338:        keyword_confidence = min(1.0, total_keywords / 5.0)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:344:        confidence = (keyword_confidence + intensity_confidence) / 2.0
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:352:        for context, keywords in self.context_keywords.items():
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:353:            for keyword in keywords:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:354:                if keyword in text:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:392:    def _extract_emotional_keywords(
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:396:        keywords = []
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:397:        for emotion_keywords in detected_emotions.values():
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:398:            keywords.extend(emotion_keywords)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:400:        return list(set(keywords))  # 중복 제거
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:444:            emotional_keywords=[],
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/modules/emotion/emotion_embedding.py:456:            "keywords": embedding.emotional_keywords,
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/core/main_loop.py:502:            self.memory_store, key=lambda x: x.created_at, reverse=True
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:102:            "api_key": os.getenv("OPENAI_API_KEY"),
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:113:            "api_key": os.getenv("ANTHROPIC_API_KEY"),
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:124:            "api_key": os.getenv("GOOGLE_API_KEY"),
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:135:            "api_key": None,
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:165:            cache_key = self._generate_cache_key(prompt, query_type, context, provider)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:166:            if cache_key in self.response_cache:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:168:                logger.info(f"캐시 히트: {cache_key}")
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:169:                return self.response_cache[cache_key]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:206:                self.response_cache[cache_key] = response
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:244:            "Authorization": f'Bearer {config["api_key"]}',
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:292:            "x-api-key": config["api_key"],
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:335:        url = f"{config['api_url']}?key={config['api_key']}"
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:409:    def _generate_cache_key(
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/llm_interface.py:417:        content = f"{prompt}_{query_type.value}_{provider.value}_{json.dumps(context, sort_keys=True)}"
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:160:            cache_key = self._generate_query_cache_key(query)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:161:            if cache_key in self.query_cache:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:163:                logger.info(f"쿼리 캐시 히트: {cache_key}")
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:164:                return self.query_cache[cache_key]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:187:            results.sort(key=lambda x: (x.importance, x.accessed_count), reverse=True)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:198:            self.query_cache[cache_key] = results
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:294:                self.memories.values(), key=lambda x: x.accessed_count, reverse=True
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:369:    def _generate_query_cache_key(self, query: MemoryQuery) -> str:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:379:        return hashlib.md5(json.dumps(query_data, sort_keys=True).encode()).hexdigest()
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:432:                expired_keys = []
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:434:                for key in self.query_cache.keys():
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:437:                        expired_keys.append(key)
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:439:                for key in expired_keys:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:440:                    del self.query_cache[key]
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:442:                if expired_keys:
./DuRiCore/backup_repository/phase4_complete_backup_20250804_163501/utils/memory_manager.py:443:                    logger.info(f"캐시 정리 완료: {len(expired_keys)}개")
./DuRiCore/backup_repository/day10_backup/final_integration_system.py:727:        for key in metrics_before:
./DuRiCore/backup_repository/day10_backup/final_integration_system.py:728:            if key in metrics_after:
./DuRiCore/backup_repository/day10_backup/final_integration_system.py:729:                before = metrics_before[key]
./DuRiCore/backup_repository/day10_backup/final_integration_system.py:730:                after = metrics_after[key]
./DuRiCore/backup_repository/day10_backup/final_integration_system.py:745:        for key in metrics_before:
./DuRiCore/backup_repository/day10_backup/final_integration_system.py:746:            if key in metrics_after and "usage" in key.lower():
./DuRiCore/backup_repository/day10_backup/final_integration_system.py:747:                before = metrics_before[key]
./DuRiCore/backup_repository/day10_backup/final_integration_system.py:748:                after = metrics_after[key]
./DuRiCore/backup_repository/day10_backup/final_integration_system.py:814:            for key, value in point["metrics"].items():
./DuRiCore/backup_repository/day10_backup/final_integration_system.py:815:                if "_performance" in key and key != "overall_performance":
./DuRiCore/backup_repository/day10_backup/final_integration_system.py:816:                    system_name = key.replace("_performance", "")
./DuRiCore/backup_repository/day10_backup/comprehensive_testing_platform.py:917:        sorted_results = sorted(test_results, key=lambda x: x.timestamp)
./DuRiCore/backup_repository/day8_backup/performance_enhancement_system.py:303:                target_metrics=list(adjustment_data.keys()),
./DuRiCore/backup_repository/day8_backup/user_feedback_collector.py:73:    key_topics: List[str]
./DuRiCore/backup_repository/day8_backup/user_feedback_collector.py:259:                key=lambda x: self._calculate_suggestion_priority(x), reverse=True
./DuRiCore/backup_repository/day8_backup/user_feedback_collector.py:470:        issue_keywords = {
./DuRiCore/backup_repository/day8_backup/user_feedback_collector.py:483:                for issue_type, keywords in issue_keywords.items():
./DuRiCore/backup_repository/day8_backup/user_feedback_collector.py:484:                    if any(keyword in content for keyword in keywords):
./DuRiCore/backup_repository/day8_backup/user_feedback_collector.py:507:            most_common_type = max(type_counts, key=type_counts.get)
./DuRiCore/backup_repository/day8_backup/user_feedback_collector.py:518:            most_common_low = max(set(low_rating_types), key=low_rating_types.count)
./DuRiCore/backup_repository/day8_backup/advanced_optimization_engine.py:772:            return sorted(strategies, key=lambda x: x.priority_score, reverse=True)
./DuRiCore/backup_repository/day8_backup/user_experience_optimizer.py:257:            ux_improvements.sort(key=lambda x: x.priority_score, reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/final_integration_system.py:727:        for key in metrics_before:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/final_integration_system.py:728:            if key in metrics_after:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/final_integration_system.py:729:                before = metrics_before[key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/final_integration_system.py:730:                after = metrics_after[key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/final_integration_system.py:745:        for key in metrics_before:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/final_integration_system.py:746:            if key in metrics_after and "usage" in key.lower():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/final_integration_system.py:747:                before = metrics_before[key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/final_integration_system.py:748:                after = metrics_after[key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/final_integration_system.py:814:            for key, value in point["metrics"].items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/final_integration_system.py:815:                if "_performance" in key and key != "overall_performance":
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/final_integration_system.py:816:                    system_name = key.replace("_performance", "")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/DAY3_COMPLETION_REPORT.md:87:            "learning": {"keywords": [...], "risk_factors": [...], "urgency_indicators": [...]},
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/DAY3_COMPLETION_REPORT.md:88:            "decision": {"keywords": [...], "risk_factors": [...], "urgency_indicators": [...]},
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/DAY3_COMPLETION_REPORT.md:89:            "problem": {"keywords": [...], "risk_factors": [...], "urgency_indicators": [...]},
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/DAY3_COMPLETION_REPORT.md:90:            "opportunity": {"keywords": [...], "risk_factors": [...], "urgency_indicators": [...]},
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/DAY3_COMPLETION_REPORT.md:91:            "conflict": {"keywords": [...], "risk_factors": [...], "urgency_indicators": [...]},
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/DAY3_COMPLETION_REPORT.md:92:            "routine": {"keywords": [...], "risk_factors": [...], "urgency_indicators": [...]}
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/performance_enhancement_system.py:303:                target_metrics=list(adjustment_data.keys()),
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/loop_performance_optimizer.py:150:            bottlenecks.sort(key=lambda x: x.severity, reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/evolution_algorithm.py:488:            targets.sort(key=lambda x: x["optimization_potential"], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/evolution_algorithm.py:589:            opportunities.sort(key=lambda x: x["improvement_potential"], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/evolution_algorithm.py:969:            targets.sort(key=lambda x: x["optimization_potential"], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/evolution_algorithm.py:1046:            opportunities.sort(key=lambda x: x["improvement_potential"], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/evolution_algorithm.py:1396:                "complexity": len(pattern.get("key_factors", [])),
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/evolution_algorithm.py:1726:                "key_factors": ["timing", "context"],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/evolution_algorithm.py:1734:                "key_factors": ["complexity"],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/user_feedback_collector.py:73:    key_topics: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/user_feedback_collector.py:259:                key=lambda x: self._calculate_suggestion_priority(x), reverse=True
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/user_feedback_collector.py:470:        issue_keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/user_feedback_collector.py:483:                for issue_type, keywords in issue_keywords.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/user_feedback_collector.py:484:                    if any(keyword in content for keyword in keywords):
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/user_feedback_collector.py:507:            most_common_type = max(type_counts, key=type_counts.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/user_feedback_collector.py:518:            most_common_low = max(set(low_rating_types), key=low_rating_types.count)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/duri_orchestrator.py:134:        for system_name in self.systems.keys():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/duri_orchestrator.py:432:    except KeyboardInterrupt:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/DAY2_COMPLETION_REPORT.md:138:        keyword_result = self._classify_by_keywords(content, context)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/DAY2_COMPLETION_REPORT.md:260:  - 했다 (keyword, 신뢰도: 0.800)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/DAY2_COMPLETION_REPORT.md:261:  - 오늘 (keyword, 신뢰도: 0.800)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/advanced_feature_engine.py:520:            requirements, key=lambda x: (x.priority, -x.complexity), reverse=True
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/advanced_optimization_engine.py:772:            return sorted(strategies, key=lambda x: x.priority_score, reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:48:    key_factors: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:76:    key_insights: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:203:            key_insights = await self._extract_key_insights(performance_history)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:217:                key_insights=key_insights,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:309:                group_key = f"{behavior_type}_{strategy}"
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:311:                if group_key not in groups:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:312:                    groups[group_key] = []
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:314:                groups[group_key].append(behavior)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:347:            key_factors = await self._identify_key_factors(behaviors)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:360:                key_factors=key_factors,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:371:    async def _identify_key_factors(self, behaviors: List[Dict[str, Any]]) -> List[str]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:586:    async def _extract_key_insights(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:678:            key_insights=["분석할 성능 데이터가 없습니다."],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:785:        print(f"  주요 요소: {pattern.key_factors}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:799:        print(f"  주요 요소: {pattern.key_factors}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/learning_pattern_analyzer.py:813:    print(f"- 주요 인사이트: {effectiveness_report.key_insights}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/evolution_system.py:79:    key_achievements: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/evolution_system.py:612:            key_achievements = await self._identify_key_achievements(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/evolution_system.py:647:                key_achievements=key_achievements,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/evolution_system.py:964:    async def _identify_key_achievements(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/evolution_system.py:1094:            key_achievements=["System evolution failed"],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:23:    KEYWORD_ANALYSIS = "keyword_analysis"
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:33:    key: str
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:46:    keywords: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:59:                "keywords": [
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:73:                "keywords": [
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:86:                "keywords": ["문제", "오류", "실패", "위험", "장애", "고장", "충돌"],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:91:                "keywords": [
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:104:                "keywords": ["갈등", "충돌", "대립", "문제", "분쟁", "의견차이"],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:109:                "keywords": ["일상", "반복", "정기", "보통", "평범", "일반"],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:116:        self.risk_keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:123:        self.urgency_keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:170:                "context_elements": [elem.key for elem in context_elements],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:171:                "key_factors": await self._identify_key_factors(input_data, context),
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:178:                    "keywords": situation_pattern.keywords,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:190:                "key_factors": [],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:205:                "key_fields": (
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:206:                    list(input_data.keys()) if isinstance(input_data, dict) else []
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:226:            for key, value in context.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:227:                importance = self._calculate_context_importance(key, value)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:228:                category = self._categorize_context_element(key, value)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:229:                confidence = self._calculate_context_confidence(key, value)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:232:                    key=key,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:242:            elements.sort(key=lambda x: x.importance, reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:260:            matched_keywords = []
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:267:                pattern_keywords = pattern_info["keywords"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:268:                matched = [kw for kw in pattern_keywords if kw in content_lower]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:271:                    score = len(matched) / len(pattern_keywords)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:276:                        matched_keywords = matched
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:279:                        risk_keywords = pattern_info["risk_factors"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:281:                            kw for kw in risk_keywords if kw in content_lower
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:285:                        urgency_keywords = pattern_info["urgency_indicators"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:287:                            kw for kw in urgency_keywords if kw in content_lower
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:300:                keywords=matched_keywords,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:311:                keywords=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:334:            for risk_level, keywords in self.risk_keywords.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:335:                for keyword in keywords:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:336:                    if keyword in content_lower:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:386:            for urgency_level, keywords in self.urgency_keywords.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:387:                for keyword in keywords:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:388:                    if keyword in content_lower:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:435:            for complexity_level, keywords in self.complexity_indicators.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:436:                for keyword in keywords:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:437:                    if keyword in content_lower:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:465:    async def _identify_key_factors(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:473:            important_keys = ["importance", "urgency", "risk", "priority", "deadline"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:474:            for key in important_keys:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:475:                if key in context:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:476:                    factors.append(key)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:584:    def _calculate_context_importance(self, key: str, value: Any) -> float:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:590:            important_keys = ["importance", "urgency", "risk", "priority", "deadline"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:591:            if key.lower() in important_keys:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:605:    def _categorize_context_element(self, key: str, value: Any) -> str:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:608:            if key in ["importance", "priority", "urgency"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:610:            elif key in ["risk", "danger", "threat"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:612:            elif key in ["emotion", "mood", "feeling"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:614:            elif key in ["time", "deadline", "schedule"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:616:            elif key in ["memory", "history", "past"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:623:    def _calculate_context_confidence(self, key: str, value: Any) -> float:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:645:            for key, value in context.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:648:                        indicators.append(f"{key}:high_priority")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:650:                        indicators.append(f"{key}:low_priority")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/situation_analyzer.py:720:        print(f"핵심 요소: {result['key_factors']}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/behavior_generator.py:284:        return max(strategy_scores, key=strategy_scores.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/behavior_generator.py:298:        template_key = template_mapping.get(behavior_type, "immediate_response")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/behavior_generator.py:299:        return self.behavior_templates[template_key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/PHASE4_COMPLETION_REPORT.md:122:    return sorted(results, key=lambda x: x[1], reverse=True)[:limit]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/user_experience_optimizer.py:257:            ux_improvements.sort(key=lambda x: x.priority_score, reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/comprehensive_testing_platform.py:917:        sorted_results = sorted(test_results, key=lambda x: x.timestamp)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:42:    key_factors: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:152:            key_factors = await self._identify_key_factors(input_data, context)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:171:                key_factors=key_factors,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:184:                key_factors=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:326:                "key_fields": (
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:327:                    list(input_data.keys()) if isinstance(input_data, dict) else []
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:341:            for key, value in context.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:343:                    elements.append(f"{key}:{value}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:345:                    elements.append(f"{key}:{value}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:347:                    elements.extend([f"{key}.{k}:{v}" for k, v in value.items()])
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:349:                    elements.append(f"{key}:{len(value)}_items")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:371:            for pattern_name, keywords in patterns.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:372:                if any(keyword in content for keyword in keywords):
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:384:    async def _identify_key_factors(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/judgment_system.py:889:    print(f"핵심 요소: {situation_analysis.key_factors}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/integrated_learning_system.py:388:                metric_keys = self.completed_cycles[0].performance_metrics.keys()
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/integrated_learning_system.py:389:                for key in metric_keys:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/integrated_learning_system.py:391:                        c.performance_metrics.get(key, 0.0)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/integrated_learning_system.py:394:                    avg_metrics[key] = sum(values) / len(values)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/test_core_system.py:59:        print(f"🔑 키워드: {', '.join(summary['keywords'][:3])}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/behavior_trace.py:422:                metric_keys = self.performance_history[0]["metrics"].keys()
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/behavior_trace.py:423:                for key in metric_keys:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/behavior_trace.py:425:                        p["metrics"].get(key, 0.0) for p in self.performance_history
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/behavior_trace.py:427:                    avg_metrics[key] = sum(values) / len(values)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/behavior_trace.py:541:        data_str = json.dumps(data, sort_keys=True, default=str)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:153:            cache_key = (
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:156:            if cache_key in self.association_cache:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:157:                cached_associations = self.association_cache[cache_key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:168:                related_memories.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:174:                    link_key = self._get_link_key(memory_id, related_id)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:175:                    if link_key in self.associations:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:176:                        link = self.associations[link_key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:185:            related_memories.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:188:            self.association_cache[cache_key] = [
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:189:                self.associations[self._get_link_key(memory_id, related_id)]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:191:                if self._get_link_key(memory_id, related_id) in self.associations
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:226:                associations, key=lambda x: x.strength, reverse=True
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:228:            weakest_associations = sorted(associations, key=lambda x: x.strength)[:5]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:261:            link_key = self._get_link_key(source_id, target_id)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:263:            if link_key in self.associations:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:264:                link = self.associations[link_key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:294:            for link_key, link in self.associations.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:296:                    to_remove.append(link_key)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:298:            for link_key in to_remove:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:299:                link = self.associations[link_key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:308:                del self.associations[link_key]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:577:                link_key = self._get_link_key(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:580:                self.associations[link_key] = association
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:592:    def _get_link_key(self, source_id: str, target_id: str) -> str:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:619:            emotion_keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:648:            for emotion_type, keywords in emotion_keywords.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:649:                for keyword in keywords:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:650:                    if keyword in content:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:684:            common_keys = set(context1.keys()) & set(context2.keys())
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:685:            if not common_keys:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:690:            for key in common_keys:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:691:                if context1[key] == context2[key]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:694:            return similar_values / len(common_keys)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:706:            theme_keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:725:            for theme, keywords in theme_keywords.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:726:                for keyword in keywords:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:727:                    if keyword in content:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:867:    for memory_id in test_memories.keys():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:877:    for memory_id in test_memories.keys():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_association.py:887:        memory_ids = list(test_memories.keys())
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:31:    KEYWORD = "keyword"  # 키워드 기반
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:44:    keywords_found: List[str]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:64:        self.keyword_dictionary = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:139:        self.emotion_keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:186:            keyword_result = self._classify_by_keywords(content, context)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:187:            results.append(keyword_result)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:210:                method=ClassificationMethod.KEYWORD,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:211:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:216:    def _classify_by_keywords(
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:222:            keywords_found = {}
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:224:            for memory_type, keywords in self.keyword_dictionary.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:226:                found_keywords = []
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:229:                for keyword in keywords["primary"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:230:                    if keyword in content:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:232:                        found_keywords.append(keyword)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:235:                for keyword in keywords["secondary"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:236:                    if keyword in content:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:238:                        found_keywords.append(keyword)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:241:                for keyword in keywords["context"]:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:242:                    if keyword in content:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:244:                        found_keywords.append(keyword)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:247:                keywords_found[memory_type] = found_keywords
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:251:                best_type = max(scores, key=scores.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:260:                    method=ClassificationMethod.KEYWORD,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:261:                    keywords_found=keywords_found.get(best_type, []),
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:269:                method=ClassificationMethod.KEYWORD,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:270:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:280:                method=ClassificationMethod.KEYWORD,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:281:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:335:                best_type = max(scores, key=scores.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:343:                    keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:352:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:363:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:414:                best_type = max(scores, key=scores.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:422:                    keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:431:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:442:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:466:                best_type = max(weighted_scores, key=weighted_scores.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:470:                all_keywords = []
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:476:                        all_keywords.extend(result.keywords_found)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:484:                    keywords_found=list(set(all_keywords)),
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:494:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:505:                keywords_found=[],
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:514:                1 for word in self.emotion_keywords["positive"] if word in content
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:517:                1 for word in self.emotion_keywords["negative"] if word in content
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:520:                1 for word in self.emotion_keywords["neutral"] if word in content
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:636:                self.emotion_keywords["positive"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:637:                + self.emotion_keywords["negative"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:638:                + self.emotion_keywords["neutral"]
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:719:        for keyword in classification_result.keywords_found:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:722:                    tag=keyword,
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:725:                    category="keyword",
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:768:        for key, value in context.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:772:                        tag=f"{key}:{value}",
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:781:                        tag=f"{key}:{value}",
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:850:            tag_key = f"{tag.tag}:{tag.category}"
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:851:            if tag_key not in seen_tags:
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:852:                seen_tags.add(tag_key)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:856:        unique_tags.sort(key=lambda x: x.confidence, reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/memory_classification.py:913:        print(f"  키워드: {result.keywords_found}")
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/enhanced_memory_system.py:221:            results.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/enhanced_memory_system.py:266:            related_memories.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/enhanced_memory_system.py:377:        data = f"{content}{json.dumps(context, sort_keys=True)}"
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/enhanced_memory_system.py:386:            keywords = {
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/enhanced_memory_system.py:394:            for memory_type, type_keywords in keywords.items():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/enhanced_memory_system.py:395:                score = sum(1 for keyword in type_keywords if keyword in content)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/enhanced_memory_system.py:406:            best_type = max(scores, key=scores.get)
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/enhanced_memory_system.py:545:            return list(self.memories.keys())
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/duri_state_inspector.py:246:            for path in self.modules.keys():
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/duri_state_inspector.py:288:        python_files = len([f for f in self.modules.keys() if f.endswith(".py")])
./DuRiCore/backup_repository/phase5_5_backup_20250805_103905/duri_state_inspector.py:289:        markdown_files = len([f for f in self.modules.keys() if f.endswith(".md")])
./DuRiCore/judgment_system.py:42:    key_factors: List[str]
./DuRiCore/judgment_system.py:300:            key_factors = await self._identify_key_factors(input_data, context)
./DuRiCore/judgment_system.py:319:                key_factors=key_factors,
./DuRiCore/judgment_system.py:332:                key_factors=[],
./DuRiCore/judgment_system.py:474:                "key_fields": (
./DuRiCore/judgment_system.py:475:                    list(input_data.keys()) if isinstance(input_data, dict) else []
./DuRiCore/judgment_system.py:489:            for key, value in context.items():
./DuRiCore/judgment_system.py:491:                    elements.append(f"{key}:{value}")
./DuRiCore/judgment_system.py:493:                    elements.append(f"{key}:{value}")
./DuRiCore/judgment_system.py:495:                    elements.extend([f"{key}.{k}:{v}" for k, v in value.items()])
./DuRiCore/judgment_system.py:497:                    elements.append(f"{key}:{len(value)}_items")
./DuRiCore/judgment_system.py:519:            for pattern_name, keywords in patterns.items():
./DuRiCore/judgment_system.py:520:                if any(keyword in content for keyword in keywords):
./DuRiCore/judgment_system.py:532:    async def _identify_key_factors(
./DuRiCore/judgment_system.py:1029:    def _extract_keywords_from_content(self, content: str) -> List[str]:
./DuRiCore/judgment_system.py:1035:        important_keywords = [
./DuRiCore/judgment_system.py:1068:        keywords = [word for word in words if word in important_keywords]
./DuRiCore/judgment_system.py:1070:        return list(set(keywords))
./DuRiCore/judgment_system.py:1100:    def _analyze_priority(self, content: str, keywords: List[str]) -> str:
./DuRiCore/judgment_system.py:1102:        urgent_keywords = ["urgent", "critical", "emergency", "immediate", "important"]
./DuRiCore/judgment_system.py:1103:        urgent_count = sum(1 for keyword in keywords if keyword in urgent_keywords)
./DuRiCore/judgment_system.py:1140:            keywords = self._extract_keywords_from_content(content)
./DuRiCore/judgment_system.py:1143:            situation_type = self._classify_situation_type(keywords, context)
./DuRiCore/judgment_system.py:1146:            risk_level = self._assess_risk_level_real(keywords, context)
./DuRiCore/judgment_system.py:1149:            urgency_level = self._assess_urgency_level_real(keywords, context)
./DuRiCore/judgment_system.py:1156:                "keywords": keywords,
./DuRiCore/judgment_system.py:1168:                "keywords": [],
./DuRiCore/judgment_system.py:1177:        self, keywords: List[str], context: Dict[str, Any]
./DuRiCore/judgment_system.py:1180:        if any(word in ["error", "problem", "issue", "fail"] for word in keywords):
./DuRiCore/judgment_system.py:1183:            word in ["learn", "study", "understand", "explain"] for word in keywords
./DuRiCore/judgment_system.py:1186:        elif any(word in ["urgent", "important", "critical"] for word in keywords):
./DuRiCore/judgment_system.py:1192:        self, keywords: List[str], context: Dict[str, Any]
./DuRiCore/judgment_system.py:1195:        risk_keywords = ["error", "problem", "fail", "critical", "emergency"]
./DuRiCore/judgment_system.py:1196:        risk_count = sum(1 for word in keywords if word in risk_keywords)
./DuRiCore/judgment_system.py:1200:        self, keywords: List[str], context: Dict[str, Any]
./DuRiCore/judgment_system.py:1203:        urgency_keywords = ["urgent", "important", "critical", "emergency", "immediate"]
./DuRiCore/judgment_system.py:1204:        urgency_count = sum(1 for word in keywords if word in urgency_keywords)
./DuRiCore/judgment_system.py:1381:    print(f"핵심 요소: {situation_analysis.key_factors}")
./DuRiCore/phase1_completion/phase1_summary.json:61:  "key_metrics": {
./DuRiCore/utils/regression_test_framework.py:267:            expected_keywords = set(re.findall(r"\w+", expected_reasoning.lower()))
./DuRiCore/utils/regression_test_framework.py:268:            actual_keywords = set(re.findall(r"\w+", actual_reasoning.lower()))
./DuRiCore/utils/regression_test_framework.py:270:            if not expected_keywords or not actual_keywords:
./DuRiCore/utils/regression_test_framework.py:273:            intersection = expected_keywords.intersection(actual_keywords)
./DuRiCore/utils/regression_test_framework.py:274:            union = expected_keywords.union(actual_keywords)
./DuRiCore/utils/regression_test_framework.py:309:            emotional_keywords = {
./DuRiCore/utils/regression_test_framework.py:316:                expected_emotional, emotional_keywords
./DuRiCore/utils/regression_test_framework.py:319:                actual_emotional, emotional_keywords
./DuRiCore/utils/regression_test_framework.py:337:            memory_keywords = {
./DuRiCore/utils/regression_test_framework.py:344:                expected_memory, memory_keywords
./DuRiCore/utils/regression_test_framework.py:346:            actual_category = self._categorize_memory(actual_memory, memory_keywords)
./DuRiCore/utils/regression_test_framework.py:363:            creativity_keywords = {
./DuRiCore/utils/regression_test_framework.py:370:                expected_creativity, creativity_keywords
./DuRiCore/utils/regression_test_framework.py:373:                actual_creativity, creativity_keywords
./DuRiCore/utils/regression_test_framework.py:383:        self, emotion_text: str, keywords: Dict[str, List[str]]
./DuRiCore/utils/regression_test_framework.py:388:        for category, words in keywords.items():
./DuRiCore/utils/regression_test_framework.py:395:        self, memory_text: str, keywords: Dict[str, List[str]]
./DuRiCore/utils/regression_test_framework.py:400:        for category, words in keywords.items():
./DuRiCore/utils/regression_test_framework.py:407:        self, creativity_text: str, keywords: Dict[str, List[str]]
./DuRiCore/utils/regression_test_framework.py:412:        for category, words in keywords.items():
./DuRiCore/utils/auto_rollback_system.py:174:            backup_files.sort(key=lambda x: x["created"], reverse=True)
./DuRiCore/utils/protection_injector.py:292:                keyword in func_name.lower()
./DuRiCore/utils/protection_injector.py:293:                for keyword in [
./DuRiCore/advanced_ai_system.py:130:        cache_key = hash(str(features))
./DuRiCore/advanced_ai_system.py:131:        if cache_key in self.pattern_cache:
./DuRiCore/advanced_ai_system.py:132:            return self.pattern_cache[cache_key]
./DuRiCore/advanced_ai_system.py:144:            self.pattern_cache[cache_key] = best_pattern
./DuRiCore/advanced_ai_system.py:155:        common_keys = set(features1.keys()) & set(features2.keys())
./DuRiCore/advanced_ai_system.py:156:        if not common_keys:
./DuRiCore/advanced_ai_system.py:160:        for key in common_keys:
./DuRiCore/advanced_ai_system.py:161:            val1 = features1[key]
./DuRiCore/advanced_ai_system.py:162:            val2 = features2[key]
./DuRiCore/advanced_ai_system.py:222:        cache_key = hash(problem_description + str(constraints))
./DuRiCore/advanced_ai_system.py:223:        if cache_key in self.solution_cache:
./DuRiCore/advanced_ai_system.py:224:            return self.solution_cache[cache_key]
./DuRiCore/advanced_ai_system.py:248:        self.solution_cache[cache_key] = problem_solution
./DuRiCore/advanced_ai_system.py:375:            key=lambda x: x["creativity_score"] * 0.4 + x["effectiveness_score"] * 0.6,
./DuRiCore/advanced_ai_system.py:475:        best_option = max(option_scores, key=option_scores.get)
./DuRiCore/advanced_ai_system.py:501:        best_option = max(option_scores, key=option_scores.get)
./DuRiCore/advanced_ai_system.py:617:        cache_key = hash(str(input_data) + inference_type)
./DuRiCore/advanced_ai_system.py:618:        if cache_key in self.inference_cache:
./DuRiCore/advanced_ai_system.py:619:            return self.inference_cache[cache_key]
./DuRiCore/advanced_ai_system.py:642:        self.inference_cache[cache_key] = inference_result
./DuRiCore/advanced_ai_system.py:724:        reasoning_steps.append(f"입력 데이터 분석: {list(input_data.keys())}")
./DuRiCore/performance_monitoring_system.py:656:            "registered_systems": list(self.system_registry.keys()),
./DuRiCore/integrated_learning_system.py:388:                metric_keys = self.completed_cycles[0].performance_metrics.keys()
./DuRiCore/integrated_learning_system.py:389:                for key in metric_keys:
./DuRiCore/integrated_learning_system.py:391:                        c.performance_metrics.get(key, 0.0)
./DuRiCore/integrated_learning_system.py:394:                    avg_metrics[key] = sum(values) / len(values)
./DuRiCore/test_core_system.py:59:        print(f"🔑 키워드: {', '.join(summary['keywords'][:3])}")
./DuRiCore/enhanced_act_r_parallel_processor.py:136:            sorted_tasks = sorted(tasks, key=lambda x: x.priority.value)
./DuRiCore/enhanced_act_r_parallel_processor.py:162:        cache_key = self._generate_task_cache_key(task)
./DuRiCore/enhanced_act_r_parallel_processor.py:165:        cached_result = self._get_from_cache(cache_key)
./DuRiCore/enhanced_act_r_parallel_processor.py:194:            self._cache_result(cache_key, result)
./DuRiCore/enhanced_act_r_parallel_processor.py:208:    def _generate_task_cache_key(self, task: ParallelTask) -> str:
./DuRiCore/enhanced_act_r_parallel_processor.py:210:        content = f"{task.name}:{task.args}:{json.dumps(task.kwargs, sort_keys=True)}"
./DuRiCore/enhanced_act_r_parallel_processor.py:213:    def _get_from_cache(self, cache_key: str) -> Optional[Any]:
./DuRiCore/enhanced_act_r_parallel_processor.py:215:        if cache_key in self.cache:
./DuRiCore/enhanced_act_r_parallel_processor.py:216:            cached_item = self.cache[cache_key]
./DuRiCore/enhanced_act_r_parallel_processor.py:221:                del self.cache[cache_key]
./DuRiCore/enhanced_act_r_parallel_processor.py:224:    def _cache_result(self, cache_key: str, result: Any):
./DuRiCore/enhanced_act_r_parallel_processor.py:226:        self.cache[cache_key] = {"data": result, "timestamp": time.time()}
./DuRiCore/enhanced_act_r_parallel_processor.py:231:            oldest_key = min(
./DuRiCore/enhanced_act_r_parallel_processor.py:232:                self.cache.keys(), key=lambda k: self.cache[k]["timestamp"]
./DuRiCore/enhanced_act_r_parallel_processor.py:234:            del self.cache[oldest_key]
./DuRiCore/enhanced_act_r_parallel_processor.py:348:            optimal_node = max(available_nodes, key=lambda x: x[1])[0]
./DuRiCore/lida_attention_system.py:246:                key=lambda x: (
./DuRiCore/lida_attention_system.py:441:            unique_alternatives = list(dict.fromkeys(all_alternatives))
./DuRiCore/lida_attention_system.py:724:            complexity_keywords = [
./DuRiCore/lida_attention_system.py:732:            for keyword in complexity_keywords:
./DuRiCore/lida_attention_system.py:733:                if keyword in context_text:
./DuRiCore/DURI_HUMAN_AI_EVOLUTION_ANALYSIS.md:192:        return sorted(goals, key=lambda x: x.priority, reverse=True)
./DuRiCore/plugin_lifecycle_manager.py:540:                "hook_events": list(self.lifecycle_hooks.keys()),
./DuRiCore/clarion_learning_system.py:262:        conscious_keywords = [
./DuRiCore/clarion_learning_system.py:270:        unconscious_keywords = ["react", "automatic", "habit", "instinct", "reflex"]
./DuRiCore/clarion_learning_system.py:275:            1 for keyword in conscious_keywords if keyword in action_lower
./DuRiCore/clarion_learning_system.py:278:            1 for keyword in unconscious_keywords if keyword in action_lower
./DuRiCore/clarion_learning_system.py:291:        predictable_keywords = ["success", "complete", "achieve", "satisfy", "meet"]
./DuRiCore/clarion_learning_system.py:292:        unpredictable_keywords = ["unexpected", "surprise", "fail", "error", "unknown"]
./DuRiCore/clarion_learning_system.py:297:            1 for keyword in predictable_keywords if keyword in outcome_lower
./DuRiCore/clarion_learning_system.py:300:            1 for keyword in unpredictable_keywords if keyword in outcome_lower
./DuRiCore/clarion_learning_system.py:402:        patterns.sort(key=lambda x: x["frequency"], reverse=True)
./DuRiCore/clarion_learning_system.py:504:                transfer_patterns, key=lambda x: x["transfer_score"], reverse=True
./DuRiCore/clarion_learning_system.py:532:            pattern_key = self._generate_pattern_key(log_data)
./DuRiCore/clarion_learning_system.py:535:            if pattern_key in self.parent.learning_patterns:
./DuRiCore/clarion_learning_system.py:536:                pattern = self.parent.learning_patterns[pattern_key]
./DuRiCore/clarion_learning_system.py:544:                    id=pattern_key,
./DuRiCore/clarion_learning_system.py:556:                self.parent.learning_patterns[pattern_key] = pattern
./DuRiCore/clarion_learning_system.py:559:                "pattern_id": pattern_key,
./DuRiCore/clarion_learning_system.py:575:    def _generate_pattern_key(self, log_data: Dict[str, Any]) -> str:
./DuRiCore/behavior_trace.py:422:                metric_keys = self.performance_history[0]["metrics"].keys()
./DuRiCore/behavior_trace.py:423:                for key in metric_keys:
./DuRiCore/behavior_trace.py:425:                        p["metrics"].get(key, 0.0) for p in self.performance_history
./DuRiCore/behavior_trace.py:427:                    avg_metrics[key] = sum(values) / len(values)
./DuRiCore/behavior_trace.py:541:        data_str = json.dumps(data, sort_keys=True, default=str)
./DuRiCore/real_world_scenario_test.py:366:        for scenario_id in self.scenarios.keys():
./DuRiCore/natural_language_processing_system.py:101:        cache_key = hashlib.md5(text.encode()).hexdigest()
./DuRiCore/natural_language_processing_system.py:102:        if cache_key in self.text_cache:
./DuRiCore/natural_language_processing_system.py:103:            return self.text_cache[cache_key]
./DuRiCore/natural_language_processing_system.py:135:        self.text_cache[cache_key] = analysis_result
./DuRiCore/natural_language_processing_system.py:344:        cache_key = hashlib.md5(text.encode()).hexdigest()
./DuRiCore/natural_language_processing_system.py:345:        if cache_key in self.extraction_cache:
./DuRiCore/natural_language_processing_system.py:346:            return self.extraction_cache[cache_key]
./DuRiCore/natural_language_processing_system.py:376:        self.extraction_cache[cache_key] = extraction_result
./DuRiCore/natural_language_processing_system.py:439:                        "type": "keyword",
./DuRiCore/natural_language_processing_system.py:453:        for topic, keywords in topics.items():
./DuRiCore/natural_language_processing_system.py:454:            for keyword in keywords:
./DuRiCore/natural_language_processing_system.py:455:                if keyword in text:
./DuRiCore/natural_language_processing_system.py:461:                            "keywords": [keyword],
./DuRiCore/natural_language_processing_system.py:607:        cache_key = hashlib.md5((text + context_type).encode()).hexdigest()
./DuRiCore/natural_language_processing_system.py:608:        if cache_key in self.context_cache:
./DuRiCore/natural_language_processing_system.py:609:            return self.context_cache[cache_key]
./DuRiCore/natural_language_processing_system.py:630:        self.context_cache[cache_key] = context_analysis
./DuRiCore/natural_language_processing_system.py:745:        for topic, keywords in topics.items():
./DuRiCore/natural_language_processing_system.py:746:            for keyword in keywords:
./DuRiCore/natural_language_processing_system.py:747:                if keyword in text:
./DuRiCore/natural_language_processing_system.py:766:        for emotion, keywords in emotions.items():
./DuRiCore/natural_language_processing_system.py:767:            for keyword in keywords:
./DuRiCore/natural_language_processing_system.py:768:                if keyword in text:
./DuRiCore/natural_language_processing_system.py:804:        keywords = text.split()[:5]  # 상위 5개 키워드
./DuRiCore/natural_language_processing_system.py:806:        for keyword in keywords:
./DuRiCore/natural_language_processing_system.py:807:            if len(keyword) > 1:
./DuRiCore/natural_language_processing_system.py:808:                related_contexts.append(f"키워드 '{keyword}' 관련 문맥")
./DuRiCore/natural_language_processing_system.py:991:                self.multilingual_support.supported_languages.keys()
./DuRiCore/memory_association.py:153:            cache_key = (
./DuRiCore/memory_association.py:156:            if cache_key in self.association_cache:
./DuRiCore/memory_association.py:157:                cached_associations = self.association_cache[cache_key]
./DuRiCore/memory_association.py:168:                related_memories.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/memory_association.py:174:                    link_key = self._get_link_key(memory_id, related_id)
./DuRiCore/memory_association.py:175:                    if link_key in self.associations:
./DuRiCore/memory_association.py:176:                        link = self.associations[link_key]
./DuRiCore/memory_association.py:185:            related_memories.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/memory_association.py:188:            self.association_cache[cache_key] = [
./DuRiCore/memory_association.py:189:                self.associations[self._get_link_key(memory_id, related_id)]
./DuRiCore/memory_association.py:191:                if self._get_link_key(memory_id, related_id) in self.associations
./DuRiCore/memory_association.py:226:                associations, key=lambda x: x.strength, reverse=True
./DuRiCore/memory_association.py:228:            weakest_associations = sorted(associations, key=lambda x: x.strength)[:5]
./DuRiCore/memory_association.py:261:            link_key = self._get_link_key(source_id, target_id)
./DuRiCore/memory_association.py:263:            if link_key in self.associations:
./DuRiCore/memory_association.py:264:                link = self.associations[link_key]
./DuRiCore/memory_association.py:294:            for link_key, link in self.associations.items():
./DuRiCore/memory_association.py:296:                    to_remove.append(link_key)
./DuRiCore/memory_association.py:298:            for link_key in to_remove:
./DuRiCore/memory_association.py:299:                link = self.associations[link_key]
./DuRiCore/memory_association.py:308:                del self.associations[link_key]
./DuRiCore/memory_association.py:577:                link_key = self._get_link_key(
./DuRiCore/memory_association.py:580:                self.associations[link_key] = association
./DuRiCore/memory_association.py:592:    def _get_link_key(self, source_id: str, target_id: str) -> str:
./DuRiCore/memory_association.py:619:            emotion_keywords = {
./DuRiCore/memory_association.py:648:            for emotion_type, keywords in emotion_keywords.items():
./DuRiCore/memory_association.py:649:                for keyword in keywords:
./DuRiCore/memory_association.py:650:                    if keyword in content:
./DuRiCore/memory_association.py:684:            common_keys = set(context1.keys()) & set(context2.keys())
./DuRiCore/memory_association.py:685:            if not common_keys:
./DuRiCore/memory_association.py:690:            for key in common_keys:
./DuRiCore/memory_association.py:691:                if context1[key] == context2[key]:
./DuRiCore/memory_association.py:694:            return similar_values / len(common_keys)
./DuRiCore/memory_association.py:706:            theme_keywords = {
./DuRiCore/memory_association.py:725:            for theme, keywords in theme_keywords.items():
./DuRiCore/memory_association.py:726:                for keyword in keywords:
./DuRiCore/memory_association.py:727:                    if keyword in content:
./DuRiCore/memory_association.py:867:    for memory_id in test_memories.keys():
./DuRiCore/memory_association.py:877:    for memory_id in test_memories.keys():
./DuRiCore/memory_association.py:887:        memory_ids = list(test_memories.keys())
./DuRiCore/test_phase_omega_evolution.py:1253:            for key, value in test_result.details.items():
./DuRiCore/test_phase_omega_evolution.py:1254:                print(f"    {key}: {value}")
./DuRiCore/prediction_system.py:64:    def get(self, key: str, default=None):
./DuRiCore/prediction_system.py:66:        return getattr(self, key, default)
./DuRiCore/prediction_system.py:190:                "key_factors": self._extract_key_factors(context),
./DuRiCore/prediction_system.py:226:    def _extract_key_factors(self, context: Dict[str, Any]) -> List[str]:
./DuRiCore/prediction_system.py:399:            strongest_pattern = max(patterns, key=lambda p: p.pattern_strength)
./DuRiCore/memory_classification.py:31:    KEYWORD = "keyword"  # 키워드 기반
./DuRiCore/memory_classification.py:44:    keywords_found: List[str]
./DuRiCore/memory_classification.py:64:        self.keyword_dictionary = {
./DuRiCore/memory_classification.py:139:        self.emotion_keywords = {
./DuRiCore/memory_classification.py:186:            keyword_result = self._classify_by_keywords(content, context)
./DuRiCore/memory_classification.py:187:            results.append(keyword_result)
./DuRiCore/memory_classification.py:210:                method=ClassificationMethod.KEYWORD,
./DuRiCore/memory_classification.py:211:                keywords_found=[],
./DuRiCore/memory_classification.py:216:    def _classify_by_keywords(
./DuRiCore/memory_classification.py:222:            keywords_found = {}
./DuRiCore/memory_classification.py:224:            for memory_type, keywords in self.keyword_dictionary.items():
./DuRiCore/memory_classification.py:226:                found_keywords = []
./DuRiCore/memory_classification.py:229:                for keyword in keywords["primary"]:
./DuRiCore/memory_classification.py:230:                    if keyword in content:
./DuRiCore/memory_classification.py:232:                        found_keywords.append(keyword)
./DuRiCore/memory_classification.py:235:                for keyword in keywords["secondary"]:
./DuRiCore/memory_classification.py:236:                    if keyword in content:
./DuRiCore/memory_classification.py:238:                        found_keywords.append(keyword)
./DuRiCore/memory_classification.py:241:                for keyword in keywords["context"]:
./DuRiCore/memory_classification.py:242:                    if keyword in content:
./DuRiCore/memory_classification.py:244:                        found_keywords.append(keyword)
./DuRiCore/memory_classification.py:247:                keywords_found[memory_type] = found_keywords
./DuRiCore/memory_classification.py:251:                best_type = max(scores, key=scores.get)
./DuRiCore/memory_classification.py:260:                    method=ClassificationMethod.KEYWORD,
./DuRiCore/memory_classification.py:261:                    keywords_found=keywords_found.get(best_type, []),
./DuRiCore/memory_classification.py:269:                method=ClassificationMethod.KEYWORD,
./DuRiCore/memory_classification.py:270:                keywords_found=[],
./DuRiCore/memory_classification.py:280:                method=ClassificationMethod.KEYWORD,
./DuRiCore/memory_classification.py:281:                keywords_found=[],
./DuRiCore/memory_classification.py:335:                best_type = max(scores, key=scores.get)
./DuRiCore/memory_classification.py:343:                    keywords_found=[],
./DuRiCore/memory_classification.py:352:                keywords_found=[],
./DuRiCore/memory_classification.py:363:                keywords_found=[],
./DuRiCore/memory_classification.py:414:                best_type = max(scores, key=scores.get)
./DuRiCore/memory_classification.py:422:                    keywords_found=[],
./DuRiCore/memory_classification.py:431:                keywords_found=[],
./DuRiCore/memory_classification.py:442:                keywords_found=[],
./DuRiCore/memory_classification.py:466:                best_type = max(weighted_scores, key=weighted_scores.get)
./DuRiCore/memory_classification.py:470:                all_keywords = []
./DuRiCore/memory_classification.py:476:                        all_keywords.extend(result.keywords_found)
./DuRiCore/memory_classification.py:484:                    keywords_found=list(set(all_keywords)),
./DuRiCore/memory_classification.py:494:                keywords_found=[],
./DuRiCore/memory_classification.py:505:                keywords_found=[],
./DuRiCore/memory_classification.py:514:                1 for word in self.emotion_keywords["positive"] if word in content
./DuRiCore/memory_classification.py:517:                1 for word in self.emotion_keywords["negative"] if word in content
./DuRiCore/memory_classification.py:520:                1 for word in self.emotion_keywords["neutral"] if word in content
./DuRiCore/memory_classification.py:636:                self.emotion_keywords["positive"]
./DuRiCore/memory_classification.py:637:                + self.emotion_keywords["negative"]
./DuRiCore/memory_classification.py:638:                + self.emotion_keywords["neutral"]
./DuRiCore/memory_classification.py:719:        for keyword in classification_result.keywords_found:
./DuRiCore/memory_classification.py:722:                    tag=keyword,
./DuRiCore/memory_classification.py:725:                    category="keyword",
./DuRiCore/memory_classification.py:768:        for key, value in context.items():
./DuRiCore/memory_classification.py:772:                        tag=f"{key}:{value}",
./DuRiCore/memory_classification.py:781:                        tag=f"{key}:{value}",
./DuRiCore/memory_classification.py:850:            tag_key = f"{tag.tag}:{tag.category}"
./DuRiCore/memory_classification.py:851:            if tag_key not in seen_tags:
./DuRiCore/memory_classification.py:852:                seen_tags.add(tag_key)
./DuRiCore/memory_classification.py:856:        unique_tags.sort(key=lambda x: x.confidence, reverse=True)
./DuRiCore/memory_classification.py:913:        print(f"  키워드: {result.keywords_found}")
./DuRiCore/test_integrated_evolution.py:70:            for key, value in optimization_results.items():
./DuRiCore/test_integrated_evolution.py:71:                logger.info(f"   - {key}: {value}")
./DuRiCore/module_registry.py:434:            registered_modules = set(self.modules.keys())
./DuRiCore/system_integration_manager.py:246:                system_names = list(self.systems.keys())
./DuRiCore/system_validation_engine.py:599:        for key, expected_value in rule.criteria.items():
./DuRiCore/system_validation_engine.py:600:            if key in details:
./DuRiCore/system_validation_engine.py:601:                actual_value = details[key]
./DuRiCore/system_validation_engine.py:607:                    if key in [
./DuRiCore/system_validation_engine.py:622:                    elif key in [
./DuRiCore/system_validation_engine.py:932:            most_failed_type = max(failed_types.items(), key=lambda x: x[1])[0]
./DuRiCore/integrated_test_system.py:209:                suite_ids = list(self.test_suites.keys())
./DuRiCore/DAY4_COMPLETION_REPORT.md:44:    urgency_keywords = ["긴급", "시급", "즉시", "빠른", "신속", "급한", "긴급한"]
./DuRiCore/DAY4_COMPLETION_REPORT.md:45:    if any(urgency in str(temporal_aspects) for urgency in urgency_keywords):
./DuRiCore/DAY4_COMPLETION_REPORT.md:122:        for key in base_weights:
./DuRiCore/DAY4_COMPLETION_REPORT.md:123:            if key != "general_score":
./DuRiCore/DAY4_COMPLETION_REPORT.md:124:                base_weights[key] *= 0.9
./DuRiCore/DAY4_COMPLETION_REPORT.md:129:        for key in base_weights:
./DuRiCore/DAY4_COMPLETION_REPORT.md:130:            base_weights[key] /= total_weight
./DuRiCore/DAY4_COMPLETION_REPORT.md:138:def _optimized_keyword_matching(self, text: str, keywords: List[str]) -> Tuple[float, List[str]]:
./DuRiCore/DAY4_COMPLETION_REPORT.md:147:    sorted_keywords = sorted(keywords, key=len, reverse=True)
./DuRiCore/DAY4_COMPLETION_REPORT.md:149:    for keyword in sorted_keywords:
./DuRiCore/DAY4_COMPLETION_REPORT.md:150:        keyword_lower = keyword.lower()
./DuRiCore/DAY4_COMPLETION_REPORT.md:151:        if keyword_lower in text_lower:
./DuRiCore/DAY4_COMPLETION_REPORT.md:153:            keyword_weight = len(keyword) / 10.0
./DuRiCore/DAY4_COMPLETION_REPORT.md:156:            if len(keyword) > 5:
./DuRiCore/DAY4_COMPLETION_REPORT.md:157:                keyword_weight *= 1.5
./DuRiCore/DAY4_COMPLETION_REPORT.md:159:            score += keyword_weight
./DuRiCore/DAY4_COMPLETION_REPORT.md:160:            matched.append(keyword)
./DuRiCore/unified_judgment_system.py:91:    key_factors: List[str]
./DuRiCore/unified_judgment_system.py:353:            key_factors = context.get("key_factors", [])
./DuRiCore/unified_judgment_system.py:363:                key_factors=key_factors,
./DuRiCore/enhanced_memory_system.py:275:            results.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/enhanced_memory_system.py:320:            related_memories.sort(key=lambda x: x[1], reverse=True)
./DuRiCore/enhanced_memory_system.py:431:        data = f"{content}{json.dumps(context, sort_keys=True)}"
./DuRiCore/enhanced_memory_system.py:440:            keywords = {
./DuRiCore/enhanced_memory_system.py:448:            for memory_type, type_keywords in keywords.items():
./DuRiCore/enhanced_memory_system.py:449:                score = sum(1 for keyword in type_keywords if keyword in content)
./DuRiCore/enhanced_memory_system.py:460:            best_type = max(scores, key=scores.get)
./DuRiCore/enhanced_memory_system.py:599:            return list(self.memories.keys())
./DuRiCore/enhanced_memory_system.py:931:                self.working_memory_buffers.values(), key=lambda x: x.created_at
./DuRiCore/integrated_system_manager.py:308:                "keywords": ["collaboration", "development"],
./DuRiCore/integrated_system_manager.py:487:                    key=lambda g: self.goal_stack_system.calculate_goal_priority_score(
./DuRiCore/goal_stack_integration_test_results.json:23:      "goal_result_keys": [
./DuRiCore/strategic_thinking_engine.py:79:    key_initiatives: List[str]
./DuRiCore/strategic_thinking_engine.py:127:    key_drivers: List[str]
./DuRiCore/strategic_thinking_engine.py:216:            initiatives = await self._develop_key_initiatives(
./DuRiCore/strategic_thinking_engine.py:325:            key_drivers = await self._identify_key_drivers(context)
./DuRiCore/strategic_thinking_engine.py:328:            scenarios = await self._generate_scenarios(key_drivers, num_scenarios)
./DuRiCore/strategic_thinking_engine.py:433:    async def _develop_key_initiatives(
./DuRiCore/strategic_thinking_engine.py:472:                key_initiatives=[initiative],
./DuRiCore/strategic_thinking_engine.py:695:            evaluated_options, key=lambda x: x["total_score"], reverse=True
./DuRiCore/strategic_thinking_engine.py:738:    async def _identify_key_drivers(self, context: Dict[str, Any]) -> List[str]:
./DuRiCore/strategic_thinking_engine.py:752:        self, key_drivers: List[str], num_scenarios: int
./DuRiCore/strategic_thinking_engine.py:762:                "description": f"{key_drivers[i % len(key_drivers)]} 중심의 {scenario_types[i % len(scenario_types)]} 시나리오",
./DuRiCore/strategic_thinking_engine.py:763:                "key_drivers": key_drivers,
./DuRiCore/strategic_thinking_engine.py:804:            for key, value in scenario["strategic_implications"].items():
./DuRiCore/strategic_thinking_engine.py:806:                    implications[key].append(f"{scenario['name']}: {key}")
./DuRiCore/strategic_thinking_engine.py:838:                key_drivers=scenario["key_drivers"],
./DuRiCore/advanced_system_interaction.py:418:        source_data = await self._get_system_data(source_system, data.get("data_key"))
./DuRiCore/advanced_system_interaction.py:572:    async def _get_system_data(self, system_name: str, data_key: str) -> Any:
./DuRiCore/advanced_system_interaction.py:581:                return await system_instance.get_data(data_key)
./DuRiCore/advanced_system_interaction.py:583:                return system_instance.get_data(data_key)
./DuRiCore/advanced_system_interaction.py:588:                "data_key": data_key,
./DuRiCore/advanced_system_interaction.py:687:            "registered_systems": list(self.system_registry.keys()),
./DuRiCore/advanced_system_interaction.py:709:        async def get_data(self, key: str):
./DuRiCore/advanced_system_interaction.py:710:            return {"system": self.name, "key": key, "value": f"data_{key}"}
./DuRiCore/advanced_system_interaction.py:738:        {"data_key": "attention_data"},
./DuRiCore/advanced_system_interaction.py:751:            "parameters": {"key": "test"},
./DuRiCore/duri_state_inspector.py:246:            for path in self.modules.keys():
./DuRiCore/duri_state_inspector.py:288:        python_files = len([f for f in self.modules.keys() if f.endswith(".py")])
./DuRiCore/duri_state_inspector.py:289:        markdown_files = len([f for f in self.modules.keys() if f.endswith(".md")])
./DuRiCore/test_clarion_integration.py:129:                "pattern_analysis_keys": list(pattern_analysis.keys()),
./DuRiCore/test_clarion_integration.py:473:                "clarion_result_keys": list(clarion_result.keys()),
./DuRiCore/advanced_evolution_system.py:580:            priority_scores.items(), key=lambda x: x[1], reverse=True
./DuRiCore/future_prediction_engine.py:75:    key_drivers: List[str]
./DuRiCore/future_prediction_engine.py:91:    key_events: List[str]
./DuRiCore/future_prediction_engine.py:236:            key_drivers = await self._identify_key_drivers(prediction_context)
./DuRiCore/future_prediction_engine.py:240:                key_drivers, num_scenarios, prediction_level
./DuRiCore/future_prediction_engine.py:406:                key_drivers=[
./DuRiCore/future_prediction_engine.py:448:            "key_factors": context.get("key_factors", []),
./DuRiCore/future_prediction_engine.py:455:    async def _identify_key_drivers(self, context: Dict[str, Any]) -> List[str]:
./DuRiCore/future_prediction_engine.py:470:        key_drivers: List[str],
./DuRiCore/future_prediction_engine.py:482:                "description": f"{key_drivers[i % len(key_drivers)]} 중심의 {scenario_types[i % len(scenario_types)]} 시나리오",
./DuRiCore/future_prediction_engine.py:486:                "key_events": [f"주요 이벤트 {j+1}" for j in range(3)],
./DuRiCore/future_prediction_engine.py:539:                    key_events=scenario["key_events"],
./DuRiCore/future_prediction_engine.py:666:        for key, value in analysis.items():
./DuRiCore/future_prediction_engine.py:668:                strengths.append(f"{key}: {value:.2f}")
./DuRiCore/future_prediction_engine.py:679:        for key, value in analysis.items():
./DuRiCore/future_prediction_engine.py:681:                improvement_areas.append(f"{key} 개선 필요: {value:.2f}")
./DuRiCore/future_prediction_engine.py:741:        "key_factors": ["기술 발전", "시장 수요", "정책 지원"],
./DuRiCore/creative_thinking_engine.py:226:                key=lambda x: x.novelty_score + x.usefulness_score,
./DuRiCore/semantic_knowledge_graph.py:425:        common_properties = set(concept1.properties.keys()) & set(
./DuRiCore/semantic_knowledge_graph.py:426:            concept2.properties.keys()
./DuRiCore/semantic_knowledge_graph.py:444:        for concept_id in self.concepts.keys():
./DuRiCore/self_goal_generator.py:423:            prioritized_goals = sorted(scored_goals, key=lambda x: x[1], reverse=True)
./DuRiCore/survival_assessment_system.py:494:                key=lambda x: x.probability * x.impact_score, reverse=True
./DuRiCore/survival_assessment_system.py:904:                key=lambda x: float(x.recommendation_id.split("_")[0]), reverse=True
./improved_learning_activator.py:461:            except KeyboardInterrupt:
./improved_learning_activator.py:521:        except KeyboardInterrupt:
./test_sampling_patch_complete.py:67:        latest_log = max(log_files_after, key=lambda f: os.path.getmtime(f))
./integrated_evolution_data.json:75:        "key_insights": [
./integrated_evolution_data.json:114:      "key_insights": [
./integrated_evolution_data.json:208:        "key_insights": [
./integrated_evolution_data.json:247:      "key_insights": [
./.github/workflows-archive/memory.yml:29:        env: { DURI_TOKEN: ${{ secrets.DURI_TOKEN }}, DURI_ENDPOINT: ${{ secrets.DURI_ENDPOINT }} }
./.github/workflows/quality.yml:23:          export SLACK_WEBHOOK_URL='${{ secrets.SLACK_WEBHOOK_URL }}'
./.github/workflows/canary.yml:26:          GRAFANA_TOKEN: ${{ secrets.GRAFANA_TOKEN }}
./.github/workflows/required-checks-alias.yml:30:          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
./.github/workflows/ci_production.yml:155:    - name: Keyless sign files (OIDC)
./.github/workflows/insight-league.yml:114:          github_token: ${{ secrets.GITHUB_TOKEN }}
./.github/workflows/insight-league.yml:124:          github-token: ${{ secrets.GITHUB_TOKEN }}
./.github/workflows/change-safety.yml:48:          key: prom-${{ runner.os }}-${{ env.PROM_VERSION }}-linux-amd64
./.github/workflows/change-safety.yml:90:          key: prom-${{ runner.os }}-${{ env.PROM_VERSION }}-linux-amd64
./.github/workflows/change-safety.yml:132:          key: prom-${{ runner.os }}-${{ env.PROM_VERSION }}-linux-amd64
./.github/workflows/insight-metrics-report.yml:66:                  'highest_score': max(results, key=lambda x: x['composite_score']),
./.github/workflows/insight-metrics-report.yml:67:                  'lowest_score': min(results, key=lambda x: x['composite_score']),
./.github/workflows/insight-metrics-report.yml:98:          github-token: ${{ secrets.GITHUB_TOKEN }}
./.github/workflows/deploy_with_digests.yml:10:  GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
./.github/workflows/deploy_with_digests.yml:11:  GRAFANA_TOKEN: ${{ secrets.GRAFANA_TOKEN }}
./.github/workflows/deploy_with_digests.yml:12:  DASHBOARD_ID: ${{ secrets.DASHBOARD_ID }}
./.github/workflows/deploy_with_digests.yml:28:        echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
./.github/workflows/pre-commit.yml:21:          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
./.github/workflows/pre-commit.yml:22:          restore-keys: |
./.github/workflows/ci.yml:15:          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
./.github/workflows/ci-phase2.yml:38:      - name: Summarize key results
./fix_terminal_input.sh:62:        read -t 1 -n 1 key
./fix_terminal_input.sh:64:            echo "입력 감지: $key (ASCII: $(printf '%d' "'$key"))"
./backup_duri_progress_2025_08_01.md:15:  DB_PASSWORD=duri123
./backup_duri_progress_2025_08_01.md:42:PYTHONPATH=/home/duri/DuRiWorkspace DB_HOST=localhost DB_PASSWORD=duri123 DB_USER=duri DB_NAME=duri_db python3 -m uvicorn app.main:app --host 0.0.0.0 --port 8001
./backup_duri_progress_2025_08_01.md:136:PYTHONPATH=/home/duri/DuRiWorkspace DB_HOST=localhost DB_PASSWORD=duri123 DB_USER=duri DB_NAME=duri_db python3 -m uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
./~/docker_backup_20250922_150828/docker-compose.yml:91:      POSTGRES_PASSWORD: duri
./test_secret.env:1:TEST_PASSWORD=hardcoded123
./test_dashboard.py:35:            "user_input": "What are the key components of DuRi?",
./test_dashboard.py:36:            "duri_response": "Key components include duri_core (port 8080), duri_brain (port 8081), duri_evolution (port 8082), and various modules for evaluation, reflection, and monitoring.",
./find_real_duplicates.sh:40:  key = $3 ":" $1;
./find_real_duplicates.sh:42:  if (!(key in canon)) {
./find_real_duplicates.sh:43:    canon[key] = path;
./find_real_duplicates.sh:45:  if (path ~ /\/두리백업\//) canon[key] = path;
./find_real_duplicates.sh:46:  if (seen[key, inode]++) next;
./find_real_duplicates.sh:47:  group[key] = group[key] ? group[key] RS $0 : $0;
./find_real_duplicates.sh:83:  while IFS=$'\t' read -r key base victim; do
./ops/observability/metrics_server.py:60:    except KeyboardInterrupt:
./ops/audit_all.sh:23:rg -n --hidden --ignore-file .gitignore -e 'AKIA[0-9A-Z]{16}|SECRET|BEGIN RSA|password\s*=' . > _audit_secrets.txt 2>/dev/null || echo "⚠️ ripgrep 없음, 기본 grep 사용" && grep -r -n -i "secret\|password\|key" . --exclude-dir=.git > _audit_secrets.txt 2>/dev/null || true
./ops/audit_all.sh:24:echo "✅ 비밀 스캔 저장: _audit_secrets.txt"
./ops/audit_all.sh:69:echo "  - 비밀 스캔: $(wc -l < _audit_secrets.txt 2>/dev/null || echo 0) 라인"
./duri_evolution/generate_emotion_vector.py:5:def generate_emotion_vector(emotion_keyword):
./duri_evolution/generate_emotion_vector.py:11:    if emotion_keyword == "칭찬":
./duri_evolution/pou_api.py:22:    "password": os.getenv("POSTGRES_PASSWORD", "duri"),
./docker-compose.allinone.yml:3:secrets:
./docker-compose.allinone.yml:4:  db_password:
./docker-compose.allinone.yml:5:    file: ./secrets/db_password
./docker-compose.allinone.yml:15:      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
./docker-compose.allinone.yml:16:    secrets: [db_password]
./test_extension_server_monitored.py:910:                "key_lesson": meaning.get("lesson", ""),
./test_extension_server_monitored.py:931:            "key_lessons": [],
./DAY1_MEMORY_SYSTEM_REPORT.md:86:  "raw_data": {"key": "value"},
./docker-compose.ssd.yml:12:      - POSTGRES_PASSWORD=duri
./docker-compose.ssd.yml:71:      - POSTGRES_PASSWORD=duri
./duri_progress_summary_2025_08_01.md:16:  - `DB_PASSWORD=duri123`
./input_debug.html:128:            // keydown 이벤트
./input_debug.html:129:            input.addEventListener('keydown', (e) => {
./input_debug.html:130:                addLog(`[${input.id || 'input-' + index}] keydown: ${e.key} (code: ${e.code})`);
./input_debug.html:133:            // keyup 이벤트
./input_debug.html:134:            input.addEventListener('keyup', (e) => {
./input_debug.html:135:                addLog(`[${input.id || 'input-' + index}] keyup: ${e.key} (value: ${e.target.value})`);
./input_debug.html:138:            // keypress 이벤트
./input_debug.html:139:            input.addEventListener('keypress', (e) => {
./input_debug.html:140:                addLog(`[${input.id || 'input-' + index}] keypress: ${e.key}`);
./input_debug.html:160:        document.addEventListener('keydown', (e) => {
./input_debug.html:162:                addLog(`[전역] keydown prevented: ${e.key}`, true);
./input_debug.html:166:        document.addEventListener('keyup', (e) => {
./input_debug.html:168:                addLog(`[전역] keyup prevented: ${e.key}`, true);
./evolution_analysis_data.json:35:      "key_insights": [
./evolution_analysis_data.json:72:      "key_insights": [
./docker-compose.yml:15:      - POSTGRES_PASSWORD=duri
./docker-compose.yml:49:      - POSTGRES_PASSWORD=duri
./docker-compose.yml:86:      - POSTGRES_PASSWORD=duri
./docker-compose.yml:124:      - POSTGRES_PASSWORD=duri
./docker-compose.yml:161:      - POSTGRES_PASSWORD=duri
./docker-compose.yml:179:      POSTGRES_PASSWORD: duri
./restart_verification.sh:24:echo "   terminal.integrated.sendKeybindingsToShell: true"
./.pytest_cache/v/cache/nodeids:130:  "tests/test_emotion_vector.py::TestEmotionVector::test_from_keyword",
./.pytest_cache/v/cache/nodeids:197:  "tests/test_pilot_rollup_min.py::test_rollup_keys",
./.pytest_cache/v/cache/nodeids:211:  "tests/test_pou_contracts.py::TestPoUContracts::test_policy_risk_keywords_safety_phrases",
./.pytest_cache/v/cache/nodeids:225:  "tests/test_promotion_gate.py::test_policy_key_missing_protection",
./.pytest_cache/v/cache/nodeids:235:  "tests/test_settings_v2.py::test_unknown_key_rejected"
./.pytest_cache/v/cache/lastfailed:8:  "tests/test_pou_contracts.py::TestPoUContracts::test_policy_risk_keywords_safety_phrases": true,
./BACKUP_INFO.md:13:- **Admin 계정**: 생성 완료 (admin/secret)
./stage1_stream_unwrap_and_dedupe.sh:107:      key=h;
./stage1_stream_unwrap_and_dedupe.sh:108:      if (!(key in best) || mt>best_mt[key] || (mt==best_mt[key] && sz>best_sz[key])) {
./stage1_stream_unwrap_and_dedupe.sh:109:        best[key]=path; best_mt[key]=mt; best_sz[key]=sz;
./stage1_stream_unwrap_and_dedupe.sh:111:      paths[key]=paths[key] ? paths[key] RS path : path;
./env.example:20:DURI_DATABASE__PASSWORD="CHANGE_ME_POSTGRES_PASSWORD"
./env.example:21:DURI_DATABASE__URL="postgresql://duri:CHANGE_ME_POSTGRES_PASSWORD@duri-postgres:5432/duri"
./env.example:27:DURI_REDIS__PASSWORD="" # Redis 비밀번호 (필요 시)
./env.example:41:DURI_SECURITY__JWT_SECRET_KEY="CHANGE_ME_JWT_SECRET"
./env.example:43:DURI_SECURITY__ADMIN_PASSWORD="CHANGE_ME_ADMIN_PASSWORD"
./env.example:44:DURI_SECURITY__API_KEY="CHANGE_ME_API_KEY"
./env.example:50:DURI_MONITORING__GRAFANA_PASSWORD="CHANGE_ME_GRAFANA_PASSWORD"
./test_new_learning_system.py:141:            print(f"   💡 핵심 교훈: {learning_insights.get('key_lesson', 'N/A')}")
./test_new_learning_system.py:174:            print(f"   💡 주요 교훈: {summary.get('key_lessons', [])}")
./duri_common/config/config.py:239:            for key, value in settings.items():
./duri_common/config/config.py:240:                print(f"  {key}: {value}")
./duri_common/settings.py:22:    password: str = "CHANGE_ME_DB_PASSWORD"
./duri_common/settings.py:28:        return f"postgresql://{self.user}:{self.password}@{self.host}:{self.port}/{self.database}"
./duri_common/settings.py:35:    password: Optional[str] = None
./duri_common/settings.py:40:        auth = f":{self.password}@" if self.password else ""
./duri_common/settings.py:106:    api_key: str = "CHANGE_ME_API_KEY"
./duri_common/settings.py:107:    jwt_secret: str = "CHANGE_ME_JWT_SECRET"
./duri_common/settings.py:120:    grafana_password: str = "DuRi@2025!"  # tests expect this - 로컬/테스트 전용, 실제 배포시 ENV로 오버라이드 필수
./duri_common/settings.py:152:                "grafana_password": "DuRi@2025!",  # 로컬/테스트 전용
./duri_common/settings.py:159:                "password": "CHANGE_ME_DB_PASSWORD",
./duri_common/settings.py:198:                "password": self.database.password,
./duri_common/settings.py:206:                "password": self.redis.password,
./duri_common/settings.py:218:                "grafana_password": self.monitoring.grafana_password,
./duri_common/settings.py:258:        for key in path[:-1]:
./duri_common/settings.py:259:            cur = cur.setdefault(key, {})
./duri_common/settings.py:276:            "grafana_password": "DuRi@2025!",
./duri_common/config.py:4:def load_env(key, default=None, cast=str):
./duri_common/config.py:5:    v = os.getenv(key, default)
./docker/start_allinone.sh:15:[ -s secrets/db_password ] || { echo "secrets/db_password missing"; exit 1; }
./docker/start_allinone.sh:22:<<<"$(cat secrets/db_password)")"
./docker/start_allinone.sh:49:    PGPASSWORD="$(cat secrets/db_password)" psql -h duri-postgres -U ${POSTGRES_USER} -d ${DB_NAME} -f /app/duri_control/database/migrations/create_analysis_tables.sql
./.githooks/pre-commit.bak:4:# DuRi Secret Hardening Pre-commit Hook
./.githooks/pre-commit.bak:7:echo "🔒 Secret hardening pre-commit check..."
./.githooks/pre-commit.bak:10:if git diff --cached | grep -Ei '(password|secret|token)=' | \
./.githooks/pre-commit.bak:11:   grep -vE '\.example|CHANGE_ME|POSTGRES_PASSWORD_FILE|secrets/|os\.getenv|os\.environ\.get|getenv\(|environ\.get\('; then
./.githooks/pre-commit.bak:12:  echo "❌ Hardcoded secrets detected in staged changes."
./.githooks/pre-commit.bak:13:  echo "   Please use environment variables or secrets/ directory."
./.githooks/pre-commit.bak:14:  echo "   Allowed patterns: .example files, CHANGE_ME_*, POSTGRES_PASSWORD_FILE"
./.githooks/pre-commit.bak:25:echo "✅ Secret hardening check passed"
./.githooks/pre-commit:4:# DuRi Secret Hardening Pre-commit Hook
./.githooks/pre-commit:7:echo "🔒 Secret hardening pre-commit check..."
./.githooks/pre-commit:12:   grep -E "(['\"]?password['\"]?\s*[:=]\s*['\"][^'\"]{8,}['\"])|([A-Za-z0-9_-]*secret[A-Za-z0-9_-]*\s*[:=]\s*['\"][^'\"]{12,}['\"])"; then
./.githooks/pre-commit:13:  echo "❌ Hardcoded secrets detected in staged changes."
./.githooks/pre-commit:14:  echo "   Please use environment variables or secrets/ directory."
./.githooks/pre-commit:26:echo "✅ Secret hardening check passed"
./broadcast_emotion_if_changed.py:62:        json.dump(data, f, indent=2, sort_keys=True)
./broadcast_emotion_if_changed.py:137:    if json.dumps(current_delta, sort_keys=True) != json.dumps(
./broadcast_emotion_if_changed.py:138:        last_sent, sort_keys=True
./common/emotion_vector.py:45:    def from_keyword(cls, keyword: str) -> "EmotionVector":
./common/emotion_vector.py:48:        :param keyword: 감정 키워드 (예: "칭찬", "분노", etc.)
./common/emotion_vector.py:64:        if keyword in mappings:
./common/emotion_vector.py:65:            for dim, val in mappings[keyword].items():
./common/emotion_vector.py:93:        return sorted(dominant, key=lambda x: x[1], reverse=True)
./FINAL_CHECKLIST.md:54:- ✅ **cosign Keyless 서명** - 아티팩트 무결성
./learning_monitoring_dashboard.py:91:            except KeyboardInterrupt:
./learning_monitoring_dashboard.py:449:        recent_activities.sort(key=lambda x: x[1], reverse=True)
./learning_monitoring_dashboard.py:498:    except KeyboardInterrupt:
./learning_monitoring_dashboard.py:509:        except KeyboardInterrupt:
./batch_verify_delete_advanced_v2.sh:100:  size_desc) sort -z -nr --field-separator=$'\t' --key=1,1 "$TSV" > "$SORTED0" ;;
./batch_verify_delete_advanced_v2.sh:101:  *)         sort -z -n  --field-separator=$'\t' --key=1,1 "$TSV" > "$SORTED0" ;;
./DAY37_POU_RETENTION_COMPLETE.md:67:    first_event = min(events, key=lambda x: x[0])
./.gitignore:52:# === Examples / Non-secret samples ===
./utils/image_processor.py:57:            cache_key = self._generate_cache_key(image_path, analysis_type)
./utils/image_processor.py:58:            if cache_key in self.analysis_cache:
./utils/image_processor.py:60:                return self.analysis_cache[cache_key]
./utils/image_processor.py:86:            self.analysis_cache[cache_key] = analysis_result
./utils/image_processor.py:100:    def _generate_cache_key(self, image_path: str, analysis_type: str) -> str:
./docker-compose.99point.yml:51:    secrets:
./docker-compose.99point.yml:52:      - pg_password
./docker-compose.99point.yml:54:      - POSTGRES_PASSWORD_FILE=/run/secrets/pg_password
./docker-compose.99point.yml:136:secrets:
./docker-compose.99point.yml:137:  pg_password:
./docker-compose.99point.yml:138:    file: ./secrets/pg_password.txt
./ter" | Select-Object -First 5:6:      A key preceded by a caret indicates the Ctrl key; thus ^K is ctrl-K.
./ter" | Select-Object -First 5:163:  -k _f_i_l_e  ...  --lesskey-file=_f_i_l_e
./ter" | Select-Object -First 5:164:                  Use a compiled lesskey file.
./ter" | Select-Object -First 5:230:                --lesskey-context=_t_e_x_t
./ter" | Select-Object -First 5:231:                  Use lesskey source file contents.
./ter" | Select-Object -First 5:232:                --lesskey-src=_f_i_l_e
./ter" | Select-Object -First 5:233:                  Use a lesskey source file.
./ter" | Select-Object -First 5:242:                --no-keypad
./ter" | Select-Object -First 5:243:                  Don't send termcap keypad init/deinit strings.
./ter" | Select-Object -First 5:296:        These keys can be used to edit text being entered
./compute_importance_from_delta.py:26:        for emotion in current.keys()
./aggregation_worker.py:17:    password=os.getenv("POSTGRES_PASSWORD", "duri"),
./aggregation_worker.py:275:                rows.sort(key=lambda x: (
./aggregation_worker.py:389:        except KeyboardInterrupt:
./docker-compose.optimized.yml:12:  DATABASE_URL: ${DATABASE_URL:-postgresql://duri:CHANGE_ME_DB_PASSWORD@duri-postgres:5432/duri}
./docker-compose.optimized.yml:110:      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_ME_DB_PASSWORD}
./duri_core/visualize/summary_loader.py:77:        required_keys = ["emotions", "actions", "emotion_action_pairs"]
./duri_core/visualize/summary_loader.py:78:        for key in required_keys:
./duri_core/visualize/summary_loader.py:79:            if key not in self.stats_data:
./duri_core/visualize/summary_loader.py:80:                errors.append(f"필수 키 누락: {key}")
./duri_core/visualize/summary_reporter.py:105:            level_key = f"level_{level}"
./duri_core/visualize/summary_reporter.py:106:            level_data = level_analysis.get(level_key, {})
./duri_core/visualize/summary_reporter.py:108:            summary["levels"][level_key] = {
./duri_core/visualize/summary_reporter.py:114:                "emotions": list(level_data.get("emotions", {}).keys())
./duri_core/visualize/summary_reporter.py:125:            "emotions": list(unknown_data.get("emotions", {}).keys())
./duri_core/visualize/summary_reporter.py:145:            key=lambda x: x[1]["success_rate"],
./duri_core/visualize/summary_reporter.py:186:            key=lambda x: x[1]["success_rate"],
./duri_core/visualize/summary_analyzer.py:249:        for pair_key, stats in pairs_data.items():
./duri_core/visualize/summary_analyzer.py:253:            parts = pair_key.split("_", 1)
./duri_core/visualize/summary_analyzer.py:257:            pair_analysis[pair_key] = {
./duri_core/visualize/summary_analyzer.py:325:        for pair_key, stats in pairs_data.items():
./duri_core/visualize/summary_analyzer.py:331:                    parts = pair_key.split("_", 1)
./duri_core/visualize/summary_analyzer.py:336:                        "pair_key": pair_key,
./duri_core/visualize/summary_analyzer.py:348:        high_failure_items["emotions"].sort(key=lambda x: x["failure_rate"], reverse=True)
./duri_core/visualize/summary_analyzer.py:349:        high_failure_items["actions"].sort(key=lambda x: x["failure_rate"], reverse=True)
./duri_core/visualize/summary_analyzer.py:350:        high_failure_items["emotion_action_pairs"].sort(key=lambda x: x["failure_rate"], reverse=True)
./duri_core/visualize/summary_analyzer.py:422:        for level_key in ["level_1", "level_2", "level_3", "unknown"]:
./duri_core/visualize/summary_analyzer.py:423:            level_failure_analysis[level_key]["high_failure_emotions"].sort(
./duri_core/visualize/summary_analyzer.py:424:                key=lambda x: x["failure_rate"], reverse=True
./duri_core/app/models.py:21:    id = Column(Integer, primary_key=True, index=True)
./duri_core/app/models.py:82:    db_password = os.getenv("DB_PASSWORD", "duri_password")
./duri_core/app/models.py:83:    return f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
./duri_core/scripts/visualize_bias_history.py:244:        ax.legend(by_label.values(), by_label.keys(), 
./duri_core/scripts/visualize_bias_history.py:524:    sample_data.sort(key=lambda x: x['timestamp'])
./duri_core/scripts/visualize_patterns.py:64:        for key, data in self.stats_data.items():
./duri_core/scripts/visualize_patterns.py:76:                key = f"{emotion}_{action}"
./duri_core/scripts/visualize_patterns.py:77:                if key in self.stats_data:
./duri_core/scripts/visualize_patterns.py:78:                    data = self.stats_data[key]
./duri_core/scripts/visualize_patterns.py:198:        for key, data in self.stats_data.items():
./duri_core/scripts/visualize_patterns.py:200:                success_rates.append((key, data['success_rate'] * 100))
./duri_core/scripts/visualize_patterns.py:203:            success_rates.sort(key=lambda x: x[1], reverse=True)
./duri_core/scripts/test_api.py:335:    except KeyboardInterrupt:
./duri_core/brain/emotion_recorder.py:165:            history.sort(key=lambda x: x.timestamp, reverse=True)
./duri_core/brain/emotion_recorder.py:220:            history.sort(key=lambda x: x.decision_timestamp, reverse=True)
./duri_core/brain/config/app.json:44:    "url": "redis://:your_redis_password@duri-redis:6379/0",
./duri_core/brain/config/app.json:56:    "api_key": "your_brain_api_key_here",
./duri_core/brain/reinforcement_engine.py:45:        for key, entry in stats_data.items():
./duri_core/brain/reinforcement_engine.py:77:            return random.choice(list(action_stats.keys()))
./duri_core/brain/feedback_collector.py:293:            history.sort(key=lambda x: x.timestamp or "", reverse=True)
./duri_core/brain/feedback_collector.py:360:            results.sort(key=lambda x: x.success_rate, reverse=True)
./duri_core/brain/loop_manager.py:177:            key = f"{emotion}_{action}"
./duri_core/brain/loop_manager.py:179:            if key not in stats:
./duri_core/brain/loop_manager.py:180:                stats[key] = {
./duri_core/brain/loop_manager.py:189:            stats[key]['total'] += 1
./duri_core/brain/loop_manager.py:191:                stats[key]['success'] += 1
./duri_core/brain/loop_manager.py:193:                stats[key]['fail'] += 1
./duri_core/brain/loop_manager.py:196:            current = stats[key]
./duri_core/tests/test_emotion_vector.py:38:    def test_from_keyword(self):
./duri_core/tests/test_emotion_vector.py:40:        vector = EmotionVector.from_keyword("칭찬")
./duri_core/tests/test_evolution_loop.py:106:            key = f"{emotion}_{action}"
./duri_core/tests/test_evolution_loop.py:107:            self.assertIn(key, stats)
./duri_core/tests/test_evolution_loop.py:109:            stat_entry = stats[key]
./duri_core/tests/test_evolution_loop.py:129:        key = f"{emotion}_{action}"
./duri_core/tests/test_evolution_loop.py:131:        self.assertIn(key, stats)
./duri_core/tests/test_evolution_loop.py:132:        stat_entry = stats[key]
./duri_core/tests/test_evolution_loop.py:161:        for key in happy_stats.keys():
./duri_core/tests/test_evolution_loop.py:162:            self.assertIn("happy", key)
./duri_core/database/init/01-init.sql:19:    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
./duri_core/database/init/01-init.sql:31:    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
./duri_core/database/init/01-init.sql:47:    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
./duri_core/database/init/01-init.sql:59:    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
./duri_core/database/init/01-init.sql:70:    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
./duri_core/database/init/01-init.sql:72:    key_name VARCHAR(100) NOT NULL,
./duri_core/database/init/01-init.sql:81:    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
./duri_core/database/init/01-init.sql:100:    id VARCHAR(100) PRIMARY KEY,
./duri_core/database/init/01-init.sql:111:    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
./duri_core/database/init/01-init.sql:121:    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
./duri_core/database/init/01-init.sql:133:    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
./duri_core/database/init/01-init.sql:156:CREATE INDEX IF NOT EXISTS idx_knowledge_key ON evolution.knowledge(key_name);
./duri_core/database/init/01-init.sql:207:INSERT INTO evolution.knowledge (knowledge_type, key_name, value_data, metadata) VALUES
./duri_core/common/emotion_vector.py:35:    def from_keyword(cls, keyword: str) -> 'EmotionVector':
./duri_core/common/emotion_vector.py:38:        :param keyword: 감정 키워드 (예: "칭찬", "분노", etc.)
./duri_core/common/emotion_vector.py:54:        if keyword in mappings:
./duri_core/common/emotion_vector.py:55:            for dim, val in mappings[keyword].items():
./duri_core/common/emotion_vector.py:83:        return sorted(dominant, key=lambda x: x[1], reverse=True)
./duri_core/core/stats.py:97:    pair_key = f"{emotion}_{action}"
./duri_core/core/stats.py:98:    if pair_key not in stats["emotion_action_pairs"]:
./duri_core/core/stats.py:99:        stats["emotion_action_pairs"][pair_key] = {"total": 0, "success": 0, "fail": 0}
./duri_core/core/stats.py:100:    stats["emotion_action_pairs"][pair_key]["total"] += 1
./duri_core/core/stats.py:101:    stats["emotion_action_pairs"][pair_key][result] += 1
./duri_core/core/stats.py:148:        pair_key = f"{emotion}_{action}"
./duri_core/core/stats.py:149:        pair_stats = stats["emotion_action_pairs"].get(pair_key, {"total": 0, "success": 0, "fail": 0})
./duri_core/core/stats.py:170:    best_action = max(action_scores, key=action_scores.get)
./duri_core/core/stats.py:201:        pair_key = f"{emotion}_{action}"
./duri_core/core/stats.py:202:        pair_stats = stats["emotion_action_pairs"].get(pair_key, {"total": 0, "success": 0, "fail": 0})
./duri_core/core/stats.py:215:    recommendations.sort(key=lambda x: x["success_rate"], reverse=True)
./duri_core/core/bias_detector.py:112:        most_frequent_emotion = max(emotion_counts.items(), key=lambda x: x[1])
./duri_core/core/bias_detector.py:163:        most_frequent_action = max(action_counts.items(), key=lambda x: x[1])
./duri_core/core/bias_detector.py:335:            most_frequent_pattern = max(emotion_action_pairs.items(), key=lambda x: x[1])
./duri_core/core/decision.py:293:                    logger2.info(f"편향 조정 파라미터 생성: {list(adjusted_params.keys())}")
./duri_core/core/decision_processor.py:166:            "context_factors": list(context.keys()),
./duri_core/compute_importance_from_delta.py:23:                for emotion in current.keys())
./duri_core/evolution/config/app.json:54:    "url": "redis://:your_redis_password@duri-redis:6379/0",
./duri_core/evolution/config/app.json:74:    "api_key": "your_evolution_api_key_here",
./duri_core/evolution/result_recorder.py:165:            history.sort(key=lambda x: x.timestamp, reverse=True)
./duri_core/evolution/result_recorder.py:215:            experience_data.sort(key=lambda x: x.success_rate, reverse=True)
./duri_core/evolution/result_recorder.py:238:        pair_key = f"{emotion}_{action}"
./duri_core/evolution/result_recorder.py:239:        filename = f"experience_{pair_key}.json"
./duri_core/evolution/result_recorder.py:263:            key = f"{entry.emotion}_{entry.action}"
./duri_core/evolution/result_recorder.py:264:            stats[key] = {
./duri_core/evolution/result_recorder.py:314:            pair_key = f"{recorded_result.emotion}_{recorded_result.action}"
./duri_core/evolution/result_recorder.py:315:            filename = f"experience_{pair_key}.json"
./duri_core/evolution/result_recorder.py:326:                    emotion_action_pair=pair_key,
./duri_core/evolution/result_recorder.py:540:            history.sort(key=lambda x: x.get('timestamp', ''), reverse=True)
./duri_core/evolution/learning_processor.py:165:            pattern_key = f"{emotion}_{action}"
./duri_core/evolution/learning_processor.py:166:            pattern_file = os.path.join(self.patterns_dir, f"{pattern_key}.json")
./duri_core/evolution/learning_processor.py:260:        pattern_key = f"{emotion}_{action}"
./duri_core/evolution/learning_processor.py:261:        pattern_file = os.path.join(self.patterns_dir, f"{pattern_key}.json")
./duri_core/evolution/experience_manager.py:195:            patterns.sort(key=lambda x: x.confidence_level, reverse=True)
./duri_core/evolution/experience_manager.py:241:            insights.sort(key=lambda x: x.created_at, reverse=True)
./duri_core/evolution/experience_manager.py:252:            emotion_action_key = f"{recorded_result.emotion}_{recorded_result.action}"
./duri_core/evolution/experience_manager.py:255:            pattern_file = os.path.join(self.patterns_dir, f"pattern_{emotion_action_key}.json")
./duri_core/evolution/experience_manager.py:285:                pattern_id = f"{emotion_action_key}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
./duri_core/evolution/experience_manager.py:661:            best_insight = max(insights, key=lambda x: x.confidence)
./duri_core/evolution/experience_manager.py:789:        key = f"{emotion}_{action}"
./duri_core/evolution/experience_manager.py:792:        if key not in self.stats:
./duri_core/evolution/experience_manager.py:793:            self.stats[key] = {
./duri_core/evolution/experience_manager.py:805:            self.stats[key]['success_count'] += 1
./duri_core/evolution/experience_manager.py:807:            self.stats[key]['fail_count'] += 1
./duri_core/evolution/experience_manager.py:809:        self.stats[key]['total_count'] += 1
./duri_core/evolution/experience_manager.py:810:        self.stats[key]['success_rate'] = self.stats[key]['success_count'] / self.stats[key]['total_count']
./duri_core/evolution/experience_manager.py:811:        self.stats[key]['last_updated'] = datetime.now().isoformat()
./duri_core/evolution/experience_manager.py:826:            key = f"{emotion}_{action}"
./duri_core/evolution/experience_manager.py:827:            return self.stats.get(key, {})
./duri_core/evolution/evolution_controller.py:504:            sessions.sort(key=lambda x: x.start_time, reverse=True)
./duri_core/evolution/evolution_controller.py:674:            insights.sort(key=lambda x: x['confidence'], reverse=True)
./duri_core/DOCKER_DEPLOYMENT.md:122:BRAIN_API_KEY=your_secure_brain_api_key
./duri_core/DOCKER_DEPLOYMENT.md:123:EVOLUTION_API_KEY=your_secure_evolution_api_key
./duri_core/DOCKER_DEPLOYMENT.md:129:POSTGRES_PASSWORD=your_secure_password
./duri_core/DOCKER_DEPLOYMENT.md:132:REDIS_URL=redis://:your_redis_password@duri-redis:6379/0
./duri_core/DOCKER_DEPLOYMENT.md:133:REDIS_PASSWORD=your_redis_password
./duri_core/DOCKER_DEPLOYMENT.md:151:- `BRAIN_API_KEY`: Brain 서비스 API 키
./duri_core/DOCKER_DEPLOYMENT.md:152:- `EVOLUTION_API_KEY`: Evolution 서비스 API 키
./duri_core/DOCKER_DEPLOYMENT.md:158:- `POSTGRES_PASSWORD`: 데이터베이스 비밀번호
./duri_core/DOCKER_DEPLOYMENT.md:162:- `REDIS_PASSWORD`: Redis 비밀번호
./duri_core/DOCKER_DEPLOYMENT.md:259:Authorization: Bearer your_api_key_here
./DuRi_Day11_15_starter/scripts/verify_day.sh:135:    [ -s "$INP" ] || printf '{"error":"KeyError: x","trace":"..."}\n' > "$INP"
./DuRi_Day11_15_starter/scripts/run_verification_sweep_fixed.sh:49:        for key in metrics_sum:
./DuRi_Day11_15_starter/scripts/run_verification_sweep_fixed.sh:50:            metrics_sum[key] += metrics.get(key, 0)
./DuRi_Day11_15_starter/scripts/run_verification_sweep.sh:45:        for key in metrics_sum:
./DuRi_Day11_15_starter/scripts/run_verification_sweep.sh:46:            metrics_sum[key] += metrics.get(key, 0)
./DuRi_Day11_15_starter/day20_complete.sh:74:    for k in list(w.keys()): w[k] = w[k] / s
./DuRi_Day11_15_starter/day20_complete.sh:121:    for r in sorted(results, key=lambda x: x["J"])[:5]:
./DuRi_Day11_15_starter/auto_code_loop_beta/policy.yaml:5:  - "secrets/"
./DuRi_Day11_15_starter/error_to_goal.py:34:        sorted(goals, key=lambda x: -x["priority"]),
./DuRi_Day11_15_starter/pou_pilot_manager.py:166:            "domains": list(self.metrics.keys()),
./DuRi_Day11_15_starter/rehab_personalization_engine.py:362:            "user_profiles": list(self.user_profiles.keys()),
./DuRi_Day11_15_starter/rehab_personalization_engine.py:363:            "routines": list(self.routines.keys()),
./DuRi_Day11_15_starter/rehab_personalization_engine.py:429:    first_routine_id = list(engine.routines.keys())[0]
./DuRi_Day11_15_starter/v1_protocol_rehab_system.py:469:            "user_profiles": list(self.user_profiles.keys()),
./DuRi_Day11_15_starter/v1_protocol_rehab_system.py:470:            "routines": list(self.routines.keys()),
./DuRi_Day11_15_starter/tools/run_trace_sweep_v2_real.py:102:    for k in list(w.keys()):
./DuRi_Day11_15_starter/tools/run_trace_sweep_v2_real.py:206:    for r in sorted(results, key=lambda x: x["J"])[:5]:
./DuRi_Day11_15_starter/tools/day38_enhanced_monitoring.py:141:    def bin_key(self, ts_iso: str, bin_minutes: int) -> datetime:
./DuRi_Day11_15_starter/tools/day38_enhanced_monitoring.py:222:                by_bin[self.bin_key(r["ts"], self.config["bin_minutes"])].append(r)
./DuRi_Day11_15_starter/tools/day38_enhanced_monitoring.py:228:        latest_complete = max(by_bin.keys())
./DuRi_Day11_15_starter/tools/day38_enhanced_monitoring.py:354:        for pilot_name in self.pilots.keys():
./DuRi_Day11_15_starter/tools/day37_retention_analyzer.py:47:def daykey(ts: str) -> dt.date:
./DuRi_Day11_15_starter/tools/day37_retention_analyzer.py:85:            d = daykey(rec["timestamp"])
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:125:                for key, value in matches:
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:126:                    record[key] = value
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:168:    key_latency = mapping["keys"].get(
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:171:    key_accuracy = mapping["keys"].get(
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:174:    key_explainability = mapping["keys"].get(
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:177:    key_failure = mapping["keys"].get(
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:180:    key_status = mapping["keys"].get("status", ["status", "ok", "success", "passed"])
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:187:        for key in key_latency:
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:188:            if key in row and row[key] not in ("", None):
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:189:                latencies.append(to_float(row[key]))
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:193:        for key in key_accuracy:
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:194:            if key in row and row[key] not in ("", None):
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:195:                accuracies.append(to_float(row[key]))
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:199:        for key in key_explainability:
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:200:            if key in row and row[key] not in ("", None):
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:201:                explainabilities.append(to_float(row[key]))
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:205:        for key in key_failure:
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:206:            if key in row and row[key] not in ("", None):
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:207:                failures.append(to_float(row[key]))
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:211:        for key in key_status:
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:212:            if key in row and row[key] not in ("", None):
./DuRi_Day11_15_starter/tools/pou_metrics_ingest.py:213:                statuses.append(str(row[key]).lower())
./DuRi_Day11_15_starter/tools/clinic_map_apply.py:26:    yaml.safe_dump(y, allow_unicode=True, sort_keys=False), encoding="utf-8"
./DuRi_Day11_15_starter/tools/monitoring_daemon.py:51:def bin_key(ts_iso, bin_minutes):
./DuRi_Day11_15_starter/tools/monitoring_daemon.py:130:                by_bin[bin_key(r["ts"], bin_minutes)].append(r)
./DuRi_Day11_15_starter/tools/monitoring_daemon.py:135:        latest_complete = max(by_bin.keys())
./DuRi_Day11_15_starter/tools/monitoring_daemon.py:195:        def last_k(domain, k, key):
./DuRi_Day11_15_starter/tools/monitoring_daemon.py:202:            return list(df[key].tail(k).values)
./DuRi_Day11_15_starter/tools/run_trace_bench.sh:100:        print(f"[ERR] Missing key: {k}", file=sys.stderr); sys.exit(5)
./DuRi_Day11_15_starter/tools/run_trace_bench.sh:102:        print(f"[ERR] Key {k} must be numeric", file=sys.stderr); sys.exit(6)
./DuRi_Day11_15_starter/tools/run_trace_sweep_v2.py:58:    for k in list(w.keys()):
./DuRi_Day11_15_starter/tools/run_trace_sweep_v2.py:160:    for r in sorted(results, key=lambda x: x["J"])[:5]:
./DuRi_Day11_15_starter/.vscode/keybindings.json:3:        "key": "ctrl+shift+t",
./DuRi_Day11_15_starter/.vscode/keybindings.json:7:        "key": "ctrl+`",
./DuRi_Day11_15_starter/.vscode/keybindings.json:11:        "key": "ctrl+shift+`",
./DuRi_Day11_15_starter/.vscode/keybindings.json:15:        "key": "f5",
./DuRi_Day11_15_starter/tests/test_real_data.py:62:        results.keys()
./DuRi_Day11_15_starter/tests/test_real_data.py:63:    ), f"필수 필드 누락: {required_fields - set(results.keys())}"
./DuRi_Day11_15_starter/configs/pou_ingest_mapping.yaml:4:keys:
./DuRi_Day11_15_starter/configs/pou_ingest_mapping.yaml:21:    priority_keys:
./DuRi_Day11_15_starter/configs/pou_ingest_mapping.yaml:25:    priority_keys:
./DuRi_Day11_15_starter/configs/pou_ingest_mapping.yaml:29:    priority_keys:
./DuRi_Day11_15_starter/src/pou/monitor.py:102:        for pilot_name in self.pilots.keys():
./DuRi_Day11_15_starter/src/ab/core_runner.py:63:    Return dict must include keys like: objective_delta, t_stat, p_value
./DuRi_Day11_15_starter/src/legacy/day38_enhanced_monitoring.py:141:    def bin_key(self, ts_iso: str, bin_minutes: int) -> datetime:
./DuRi_Day11_15_starter/src/legacy/day38_enhanced_monitoring.py:222:                by_bin[self.bin_key(r["ts"], self.config["bin_minutes"])].append(r)
./DuRi_Day11_15_starter/src/legacy/day38_enhanced_monitoring.py:228:        latest_complete = max(by_bin.keys())
./DuRi_Day11_15_starter/src/legacy/day38_enhanced_monitoring.py:354:        for pilot_name in self.pilots.keys():
./DuRi_Day11_15_starter/src/legacy/pou_pilot_manager.py:166:            "domains": list(self.metrics.keys()),
./DuRi_Day11_15_starter/src/legacy/day37_retention_analyzer.py:47:def daykey(ts: str) -> dt.date:
./DuRi_Day11_15_starter/src/legacy/day37_retention_analyzer.py:85:            d = daykey(rec["timestamp"])
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:125:                for key, value in matches:
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:126:                    record[key] = value
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:168:    key_latency = mapping["keys"].get(
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:171:    key_accuracy = mapping["keys"].get(
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:174:    key_explainability = mapping["keys"].get(
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:177:    key_failure = mapping["keys"].get(
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:180:    key_status = mapping["keys"].get("status", ["status", "ok", "success", "passed"])
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:187:        for key in key_latency:
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:188:            if key in row and row[key] not in ("", None):
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:189:                latencies.append(to_float(row[key]))
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:193:        for key in key_accuracy:
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:194:            if key in row and row[key] not in ("", None):
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:195:                accuracies.append(to_float(row[key]))
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:199:        for key in key_explainability:
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:200:            if key in row and row[key] not in ("", None):
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:201:                explainabilities.append(to_float(row[key]))
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:205:        for key in key_failure:
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:206:            if key in row and row[key] not in ("", None):
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:207:                failures.append(to_float(row[key]))
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:211:        for key in key_status:
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:212:            if key in row and row[key] not in ("", None):
./DuRi_Day11_15_starter/src/legacy/pou_metrics_ingest.py:213:                statuses.append(str(row[key]).lower())
./DuRi_Day11_15_starter/src/legacy/integrated_pou_monitoring_system.py:102:        for pilot_name in self.pilots.keys():
./DuRi_Day11_15_starter/day35_enhanced_tuning.py:276:        for preset_name in self.config["weights"].keys():
./DuRi_Day11_15_starter/day35_enhanced_tuning.py:289:            best_preset = max(comparisons.keys(), key=lambda k: comparisons[k].J)
./DuRi_Day11_15_starter/day35_enhanced_tuning.py:292:        best_preset = max(valid_results.keys(), key=lambda k: valid_results[k].J)
./DuRi_Day11_15_starter/verify_out/day16_errors_sample.jsonl:1:{"error":"KeyError: x","trace":"..."}
./DuRi_Day11_15_starter/backup_phase5_day8_day15/day31/pou_pilot_manager.py:166:            "domains": list(self.metrics.keys()),
./DuRi_Day11_15_starter/backup_phase5_day8_day15/day33/coding_pr_assistant.py:103:                r"password\s*=",  # Hardcoded password
./DuRi_Day11_15_starter/backup_phase5_day8_day15/day33/coding_pr_assistant.py:104:                r"api_key\s*=",  # Hardcoded API key
./DuRi_Day11_15_starter/backup_phase5_day8_day15/day33/coding_pr_assistant.py:105:                r"secret\s*=",  # Hardcoded secret
./DuRi_Day11_15_starter/backup_phase5_day8_day15/day33/coding_pr_assistant.py:439:        test_keywords = ["test", "spec", "assert", "expect", "mock"]
./DuRi_Day11_15_starter/backup_phase5_day8_day15/day33/coding_pr_assistant.py:441:            1 for keyword in test_keywords if keyword in code_file.content.lower()
./DuRi_Day11_15_starter/backup_phase5_day8_day15/day33/coding_pr_assistant.py:562:def hardcoded_password():
./DuRi_Day11_15_starter/backup_phase5_day8_day15/day33/coding_pr_assistant.py:564:    password = "admin123"
./DuRi_Day11_15_starter/backup_phase5_day8_day15/day33/coding_pr_assistant.py:565:    return password
./DuRi_Day11_15_starter/integrated_pou_monitoring_system.py:102:        for pilot_name in self.pilots.keys():
./DuRi_Day11_15_starter/coding_pr_assistant.py:103:                r"password\s*=",  # Hardcoded password
./DuRi_Day11_15_starter/coding_pr_assistant.py:104:                r"api_key\s*=",  # Hardcoded API key
./DuRi_Day11_15_starter/coding_pr_assistant.py:105:                r"secret\s*=",  # Hardcoded secret
./DuRi_Day11_15_starter/coding_pr_assistant.py:439:        test_keywords = ["test", "spec", "assert", "expect", "mock"]
./DuRi_Day11_15_starter/coding_pr_assistant.py:441:            1 for keyword in test_keywords if keyword in code_file.content.lower()
./DuRi_Day11_15_starter/coding_pr_assistant.py:562:def hardcoded_password():
./DuRi_Day11_15_starter/coding_pr_assistant.py:564:    password = "admin123"
./DuRi_Day11_15_starter/coding_pr_assistant.py:565:    return password
./DuRi_Day11_15_starter/day35_pack/tools/pareto.py:11:    better_or_equal = all(b[k] >= a[k] for k in a.keys())
./DuRi_Day11_15_starter/day35_pack/tools/pareto.py:12:    strictly_better = any(b[k] > a[k] for k in a.keys())
./DuRi_Day11_15_starter/day35_pack/tools/pareto.py:50:    front.sort(key=lambda x: x["J"], reverse=True)
./DuRi_Day11_15_starter/day35_pack/tools/evaluate_objective.py:95:        help="weights key in YAML (balanced/speed/quality/safety_first)",
./duri_brain/generate_emotion_vector.py:5:def generate_emotion_vector(emotion_keyword):
./duri_brain/generate_emotion_vector.py:11:    if emotion_keyword == "칭찬":
./test_extension_server.py:156:                improvement_frequency.items(), key=lambda x: x[1], reverse=True
./test_extension_server.py:239:                concepts = data.get("key_concepts", [])
./test_extension_server.py:248:                concept_freq.items(), key=lambda x: x[1], reverse=True
./test_extension_server.py:257:                "Key Concept Frequency Analysis", fontsize=14, fontweight="bold"
./test_extension_server.py:409:        self.key_concepts = set()
./test_extension_server.py:422:            "key_concepts": self._extract_key_concepts(conversation),
./test_extension_server.py:441:    def _extract_key_concepts(self, conversation: str) -> List[str]:
./test_extension_server.py:444:        keywords = re.findall(r"\b[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*\b", conversation)
./test_extension_server.py:451:        concepts = list(set(keywords + technical_terms))
./test_extension_server.py:492:        concept_count = len(analysis.get("key_concepts", []))
./test_extension_server.py:961:        keywords1 = set(improvement1.lower().split())
./test_extension_server.py:962:        keywords2 = set(improvement2.lower().split())
./test_extension_server.py:965:        intersection = keywords1.intersection(keywords2)
./test_extension_server.py:966:        union = keywords1.union(keywords2)
./test_extension_server.py:1424:            improvement_frequency.items(), key=lambda x: x[1], reverse=True
./test_extension_server.py:1596:                "summary": f"대화 분석 완료 - {len(analysis_result['key_concepts'])}개 핵심 개념 발견",
./test_extension_server.py:1746:    if len(analysis["key_concepts"]) < 3:
./test_extension_server.py:1781:    concept_count = len(analysis.get("key_concepts", []))
./backup_self_evolving_duri_20250803_133903.py:156:                improvement_frequency.items(), key=lambda x: x[1], reverse=True
./backup_self_evolving_duri_20250803_133903.py:239:                concepts = data.get("key_concepts", [])
./backup_self_evolving_duri_20250803_133903.py:248:                concept_freq.items(), key=lambda x: x[1], reverse=True
./backup_self_evolving_duri_20250803_133903.py:257:                "Key Concept Frequency Analysis", fontsize=14, fontweight="bold"
./backup_self_evolving_duri_20250803_133903.py:409:        self.key_concepts = set()
./backup_self_evolving_duri_20250803_133903.py:422:            "key_concepts": self._extract_key_concepts(conversation),
./backup_self_evolving_duri_20250803_133903.py:441:    def _extract_key_concepts(self, conversation: str) -> List[str]:
./backup_self_evolving_duri_20250803_133903.py:444:        keywords = re.findall(r"\b[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*\b", conversation)
./backup_self_evolving_duri_20250803_133903.py:451:        concepts = list(set(keywords + technical_terms))
./backup_self_evolving_duri_20250803_133903.py:492:        concept_count = len(analysis.get("key_concepts", []))
./backup_self_evolving_duri_20250803_133903.py:961:        keywords1 = set(improvement1.lower().split())
./backup_self_evolving_duri_20250803_133903.py:962:        keywords2 = set(improvement2.lower().split())
./backup_self_evolving_duri_20250803_133903.py:965:        intersection = keywords1.intersection(keywords2)
./backup_self_evolving_duri_20250803_133903.py:966:        union = keywords1.union(keywords2)
./backup_self_evolving_duri_20250803_133903.py:1424:            improvement_frequency.items(), key=lambda x: x[1], reverse=True
./backup_self_evolving_duri_20250803_133903.py:1596:                "summary": f"대화 분석 완료 - {len(analysis_result['key_concepts'])}개 핵심 개념 발견",
./backup_self_evolving_duri_20250803_133903.py:1746:    if len(analysis["key_concepts"]) < 3:
./backup_self_evolving_duri_20250803_133903.py:1781:    concept_count = len(analysis.get("key_concepts", []))
./logging_setup.py:48:        safe_key = "component" if k == "module" else k
./logging_setup.py:51:        if safe_key in RESERVED:
./logging_setup.py:52:            safe_key = f"extra_{safe_key}"
./logging_setup.py:54:        out[safe_key] = v
./reports/security.json:25:      "id": "secrets_scan",
./create_memory_table.sql:6:    id SERIAL PRIMARY KEY,
./PR_TEMPLATE.md:52:- **cosign**: Keyless 서명으로 아티팩트 무결성 보장
./duri_brain_node/ai_models.py:24:            "keyword_extractor": KeywordExtractor(),
./duri_brain_node/ai_models.py:42:                self.models["keyword_extractor"].extract(user_input, duri_response),
./duri_brain_node/ai_models.py:53:            model_names = list(self.models.keys())
./duri_brain_node/ai_models.py:203:class KeywordExtractor:
./duri_brain_node/ai_models.py:210:            user_keywords = self._extract_keywords(user_input)
./duri_brain_node/ai_models.py:213:            duri_keywords = self._extract_keywords(duri_response)
./duri_brain_node/ai_models.py:216:            common_keywords = list(set(user_keywords) & set(duri_keywords))
./duri_brain_node/ai_models.py:219:            relevance_score = len(common_keywords) / max(len(user_keywords), 1)
./duri_brain_node/ai_models.py:222:                "user_keywords": user_keywords,
./duri_brain_node/ai_models.py:223:                "duri_keywords": duri_keywords,
./duri_brain_node/ai_models.py:224:                "common_keywords": common_keywords,
./duri_brain_node/ai_models.py:226:                "keyword_count": {
./duri_brain_node/ai_models.py:227:                    "user": len(user_keywords),
./duri_brain_node/ai_models.py:228:                    "duri": len(duri_keywords),
./duri_brain_node/ai_models.py:229:                    "common": len(common_keywords),
./duri_brain_node/ai_models.py:237:    def _extract_keywords(self, text: str) -> List[str]:
./duri_brain_node/ai_models.py:260:        keywords = [word for word in words if word not in stop_words and len(word) > 1]
./duri_brain_node/ai_models.py:265:        keyword_freq = Counter(keywords)
./duri_brain_node/ai_models.py:266:        top_keywords = [word for word, freq in keyword_freq.most_common(10)]
./duri_brain_node/ai_models.py:268:        return top_keywords
./duri_brain_node/ai_models.py:311:        context_keywords = ["시스템", "테스트", "분산", "구조", "노드", "학습", "개선"]
./duri_brain_node/ai_models.py:314:            keyword in user_input.lower() for keyword in context_keywords
./duri_brain_node/ai_models.py:317:            keyword in duri_response.lower() for keyword in context_keywords
./duri_brain_node/ai_models.py:326:            "keywords_found": [
./duri_brain_node/ai_models.py:328:                for kw in context_keywords
./duri_brain_node/ai_models.py:352:        time_keywords = ["지금", "현재", "이제", "곧", "나중에", "이전", "다음"]
./duri_brain_node/ai_models.py:354:        user_time = any(keyword in user_input for keyword in time_keywords)
./duri_brain_node/ai_models.py:355:        duri_time = any(keyword in duri_response for keyword in time_keywords)
./duri_brain_node/ai_models.py:363:            "time_keywords_found": [
./duri_brain_node/ai_models.py:364:                kw for kw in time_keywords if kw in user_input or kw in duri_response
./duri_brain_node/ai_models.py:493:        creative_keywords = [
./duri_brain_node/ai_models.py:504:        for keyword in creative_keywords:
./duri_brain_node/ai_models.py:505:            if keyword in duri_response:
./duri_brain_node/ai_models.py:506:                patterns.append(f"창의적 패턴: {keyword}")
./duri_brain_node/ai_models.py:515:        innovative_keywords = [
./duri_brain_node/ai_models.py:525:        for keyword in innovative_keywords:
./duri_brain_node/ai_models.py:526:            if keyword in duri_response:
./duri_brain_node/ai_models.py:527:                approaches.append(f"혁신적 접근: {keyword}")
./duri_brain_node/main.py:174:        keyword_extraction = ai_analysis.get("keyword_extractor", {})
./duri_brain_node/main.py:178:        user_keywords = keyword_extraction.get(
./duri_brain_node/main.py:179:            "user_keywords", _extract_keywords(user_input)
./duri_brain_node/main.py:186:        response_keywords = keyword_extraction.get(
./duri_brain_node/main.py:187:            "duri_keywords", _extract_keywords(duri_response)
./duri_brain_node/main.py:193:                "keywords": user_keywords,
./duri_brain_node/main.py:199:                "keywords": response_keywords,
./duri_brain_node/main.py:203:            "relevance_score": keyword_extraction.get(
./duri_brain_node/main.py:205:                _calculate_relevance(user_keywords, response_keywords),
./duri_brain_node/main.py:395:def _extract_keywords(text: str) -> list:
./duri_brain_node/main.py:410:def _calculate_relevance(user_keywords: list, response_keywords: list) -> float:
./duri_brain_node/main.py:412:    common = set(user_keywords) & set(response_keywords)
./duri_brain_node/main.py:413:    return len(common) / max(len(user_keywords), 1)
./duri_learning_system_backup_20250803.md:82:  "key_concepts": ["API"],
./monitor_learning_system.py:270:            except KeyboardInterrupt:
./monitor_learning_system.py:302:    except KeyboardInterrupt:
./test_learning_engine.py:114:    print(f"핵심 개념: {text_result['knowledge_gained']['key_concepts']}")
