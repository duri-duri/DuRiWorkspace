# K8s Secret/Î∞∞Ìè¨ ÏòàÏãú - Í∞úÏÑ†Ïïà

apiVersion: v1
kind: Secret
metadata:
  name: alertmanager-secrets
  namespace: duri-prod
type: Opaque
stringData:
  slack.webhook: https://hooks.slack.com/services/xxx/yyy/zzz
  pagerduty.routing_key: <pd_v2_routing_key>
  security_pd.routing_key: <pd_v2_security_routing_key>
  webhook.url: http://alert-webhook.your-namespace.svc:5001/webhook

---
apiVersion: monitoring.coreos.com/v1alpha1
kind: AlertmanagerConfig
metadata:
  name: duri-config
  namespace: duri-prod
spec:
  route:
    receiver: 'oncall-slack'
    group_by: ['alertname', 'cluster', 'service']
    group_wait: 30s
    group_interval: 5m
    repeat_interval: 2h
    routes:
    - matchers:
      - name: severity
        value: security
      receiver: 'security-pager'
      continue: true
    - matchers:
      - name: severity
        value: critical
      receiver: 'oncall-pager'
      continue: true
    - matchers:
      - name: severity
        value: warning
      receiver: 'oncall-slack'
  
  receivers:
  - name: 'webhook'
    webhookConfigs:
    - urlSecret:
        name: alertmanager-secrets
        key: webhook.url
      sendResolved: true
  
  - name: 'oncall-pager'
    pagerdutyConfigs:
    - routingKeySecret:
        name: alertmanager-secrets
        key: pagerduty.routing_key
      severity: '{{ .CommonLabels.severity | default "critical" }}'
      dedupKey: '{{ .GroupLabels.alertname }}:{{ .GroupLabels.cluster }}:{{ .GroupLabels.service }}'
      description: '{{ .GroupLabels.alertname }}: {{ .CommonAnnotations.summary }}'
      details:
        cluster: '{{ .GroupLabels.cluster }}'
        service: '{{ .GroupLabels.service }}'
        runbook_url: '{{ .CommonAnnotations.runbook_url }}'
      sendResolved: true
  
  - name: 'security-pager'
    pagerdutyConfigs:
    - routingKeySecret:
        name: alertmanager-secrets
        key: security_pd.routing_key
      severity: 'critical'
      dedupKey: 'security:{{ .GroupLabels.alertname }}:{{ .GroupLabels.cluster }}'
      description: 'üîí SECURITY: {{ .GroupLabels.alertname }} ‚Äî {{ .CommonAnnotations.summary }}'
      details:
        cluster: '{{ .GroupLabels.cluster }}'
        service: '{{ .GroupLabels.service }}'
        runbook_url: '{{ .CommonAnnotations.runbook_url }}'
      sendResolved: true
    slackConfigs:
    - urlSecret:
        name: alertmanager-secrets
        key: slack.webhook
      channel: '#security-alerts'
      title: 'üîí SECURITY: {{ .GroupLabels.alertname }}'
      text: '{{ .CommonAnnotations.description }}'
      color: 'danger'
      sendResolved: true
  
  - name: 'oncall-slack'
    slackConfigs:
    - urlSecret:
        name: alertmanager-secrets
        key: slack.webhook
      channel: '#oncall-alerts'
      title: '{{ if eq .CommonLabels.severity "critical" }}üö® CRITICAL{{ else }}‚ö†Ô∏è WARNING{{ end }}: {{ .GroupLabels.alertname }}'
      text: '{{ .CommonAnnotations.description }}'
      color: '{{ if eq .CommonLabels.severity "critical" }}danger{{ else }}warning{{ end }}'
      sendResolved: true
  
  inhibitRules:
  - sourceMatch:
      severity: critical
    targetMatch:
      severity: warning
    equal: ['alertname', 'cluster', 'service']

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: duri-oncall
  namespace: duri-prod

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: duri-oncall-role
rules:
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "patch", "update", "delete"]
- apiGroups: [""]
  resources: ["pods", "services", "secrets", "configmaps"]
  verbs: ["get", "list", "patch", "update", "delete"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: duri-oncall-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: duri-oncall-role
subjects:
- kind: ServiceAccount
  name: duri-oncall
  namespace: duri-prod
