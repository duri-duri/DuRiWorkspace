#!/usr/bin/env bash
set -euo pipefail

# Shadow Î≥ëÌñâ Í≤ÄÏ¶ù ÏãúÏä§ÌÖú
# Phase 4: Î†àÍ±∞Ïãú vs ÌëúÏ§Ä ÏãúÏä§ÌÖú ÏÑ±Îä• ÎπÑÍµê
# 3ÏùºÍ∞Ñ Î≥ëÌñâ Ïã§ÌñâÌïòÏó¨ Í≤∞Í≥º Î∂ÑÏÑù

ROOT="$(git rev-parse --show-toplevel)"
cd "$ROOT"

# === ÏÑ§Ï†ï ===
SHADOW_LOGS_DIR="var/logs/legacy/shadow"
SHADOW_RESULTS_DIR="var/state/shadow_results"
SHADOW_CONFIG_FILE="configs/legacy_system_mapping.yml"
LOCK_FILE="var/state/shadow_validation_in_progress.lock"

# === Î°úÍπÖ Ìï®Ïàò ===
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SHADOW] $1" | tee -a "$SHADOW_LOGS_DIR/shadow_validation_$(date +%F).log"
}

# === Ïò§Î•ò Ï≤òÎ¶¨ ===
error_exit() {
    log "ERROR: $1"
    exit 1
}

# === ÎùΩ ÌååÏùº Í¥ÄÎ¶¨ ===
acquire_lock() {
    if [[ -e "$LOCK_FILE" ]]; then
        log "WARN: Îã§Î•∏ Shadow Í≤ÄÏ¶ùÏù¥ ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Ïû¨ÏãúÎèÑÌïòÏÑ∏Ïöî."
        exit 1
    fi
    echo "$$" > "$LOCK_FILE"
    trap 'rm -f "$LOCK_FILE"' EXIT
}

# === Shadow ÎåÄÏÉÅ ÏãúÏä§ÌÖú Ï†ïÏùò ===
declare -A SHADOW_TARGETS=(
    ["duri_backup.sh"]="scripts/"
    ["duri_backup_progress.sh"]="scripts/"
    ["shared-scripts/autosave_scripts.sh"]=""
)

# === ÏÑ±Îä• ÏßÄÌëú ÏàòÏßë ===
collect_performance_metrics() {
    local system_name="$1"
    local system_path="$2"
    local log_file="$SHADOW_LOGS_DIR/${system_name%.*}_metrics_$(date +%F).json"
    
    log "üìä $system_name ÏÑ±Îä• ÏßÄÌëú ÏàòÏßë..."
    
    # ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ ÏÇ¨Ïö©Îüâ
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
    local memory_usage=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}')
    local disk_usage=$(df . | tail -1 | awk '{print $5}' | cut -d'%' -f1)
    
    # Ïã§Ìñâ ÏãúÍ∞Ñ Ï∏°Ï†ï (ÏòàÏãú)
    local start_time=$(date +%s)
    # Ïã§Ï†úÎ°úÎäî Ìï¥Îãπ ÏãúÏä§ÌÖúÏùò Ïã§Ìñâ ÏãúÍ∞ÑÏùÑ Ï∏°Ï†ïÌï¥Ïïº Ìï®
    sleep 1  # ÏãúÎÆ¨Î†àÏù¥ÏÖòÏö©
    local end_time=$(date +%s)
    local execution_time=$((end_time - start_time))
    
    # ÏÑ±Í≥µ/Ïã§Ìå® ÏÉÅÌÉú (ÏòàÏãú)
    local success_status="SUCCESS"
    local error_count=0
    
    # ÏßÄÌëú Ï†ÄÏû•
    cat > "$log_file" <<EOF
{
  "system_name": "$system_name",
  "timestamp": "$(date -Iseconds)",
  "performance_metrics": {
    "cpu_usage_percent": $cpu_usage,
    "memory_usage_percent": $memory_usage,
    "disk_usage_percent": $disk_usage,
    "execution_time_seconds": $execution_time
  },
  "status": {
    "success": "$success_status",
    "error_count": $error_count
  },
  "metadata": {
    "path": "$system_path",
    "collection_method": "shadow_parallel_validator"
  }
}
EOF
    
    log "‚úÖ $system_name ÏÑ±Îä• ÏßÄÌëú ÏàòÏßë ÏôÑÎ£å: $log_file"
}

# === ÌëúÏ§Ä ÏãúÏä§ÌÖúÍ≥º ÎπÑÍµê Î∂ÑÏÑù ===
compare_with_standard() {
    local legacy_system="$1"
    local comparison_file="$SHADOW_RESULTS_DIR/comparison_${legacy_system%.*}_$(date +%F).json"
    
    log "üîç $legacy_system vs ÌëúÏ§Ä ÏãúÏä§ÌÖú ÎπÑÍµê Î∂ÑÏÑù..."
    
    # ÌëúÏ§Ä ÏãúÏä§ÌÖú ÏßÄÌëú (ÏòàÏãú)
    local standard_success_rate=99.5
    local standard_execution_time=15
    local standard_error_rate=0.5
    
    # Î†àÍ±∞Ïãú ÏãúÏä§ÌÖú ÏßÄÌëú (Ïã§Ï†úÎ°úÎäî ÏàòÏßëÎêú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)
    local legacy_success_rate=98.0
    local legacy_execution_time=18
    local legacy_error_rate=2.0
    
    # ÎπÑÍµê Î∂ÑÏÑù
    local success_rate_diff=$((standard_success_rate - legacy_success_rate))
    local execution_time_ratio=$(echo "scale=2; $standard_execution_time / $legacy_execution_time" | bc -l 2>/dev/null || echo "1.0")
    local error_rate_diff=$((standard_error_rate - legacy_error_rate))
    
    # ÌåêÏ†ï Í∏∞Ï§Ä
    local success_rate_ok=$([[ $success_rate_diff -ge 0 ]] && echo "true" || echo "false")
    local execution_time_ok=$([[ $(echo "$execution_time_ratio <= 1.2" | bc -l 2>/dev/null || echo "1") -eq 1 ]] && echo "true" || echo "false")
    local error_rate_ok=$([[ $error_rate_diff -le 0 ]] && echo "true" || echo "false")
    
    # Ï†ÑÏ≤¥ ÌåêÏ†ï
    local overall_result=$([[ "$success_rate_ok" == "true" && "$execution_time_ok" == "true" && "$error_rate_ok" == "true" ]] && echo "PASS" || echo "FAIL")
    
    # ÎπÑÍµê Í≤∞Í≥º Ï†ÄÏû•
    cat > "$comparison_file" <<EOF
{
  "comparison": {
    "legacy_system": "$legacy_system",
    "standard_system": "duri_backup_phase1.sh",
    "comparison_date": "$(date -Iseconds)"
  },
  "metrics_comparison": {
    "success_rate": {
      "legacy": $legacy_success_rate,
      "standard": $standard_success_rate,
      "difference": $success_rate_diff,
      "status": "$success_rate_ok"
    },
    "execution_time": {
      "legacy": $legacy_execution_time,
      "standard": $standard_execution_time,
      "ratio": $execution_time_ratio,
      "status": "$execution_time_ok"
    },
    "error_rate": {
      "legacy": $legacy_error_rate,
      "standard": $standard_error_rate,
      "difference": $error_rate_diff,
      "status": "$error_rate_ok"
    }
  },
  "overall_assessment": {
    "result": "$overall_result",
    "criteria_met": {
      "success_rate": $success_rate_ok,
      "execution_time": $success_rate_ok,
      "error_rate": $error_rate_ok
    },
    "recommendation": "$(if [[ "$overall_result" == "PASS" ]]; then echo "ÌëúÏ§Ä ÏãúÏä§ÌÖúÏúºÎ°ú Ï†ÑÌôò Í∞ÄÎä•"; else echo "Ï∂îÍ∞Ä Í≤ÄÏ¶ù ÌïÑÏöî"; fi)"
  }
}
EOF
    
    log "‚úÖ $legacy_system ÎπÑÍµê Î∂ÑÏÑù ÏôÑÎ£å: $comparison_file"
    log "  - Ï†ÑÏ≤¥ ÌåêÏ†ï: $overall_result"
    log "  - ÏÑ±Í≥µÎ•†: $success_rate_ok"
    log "  - Ïã§ÌñâÏãúÍ∞Ñ: $execution_time_ok"
    log "  - Ïò§Î•òÏú®: $error_rate_ok"
}

# === Shadow Î≥ëÌñâ Í≤ÄÏ¶ù Ïã§Ìñâ ===
run_shadow_validation() {
    local system_name="$1"
    local system_path="$2"
    
    log "üîÑ $system_name Shadow Î≥ëÌñâ Í≤ÄÏ¶ù ÏãúÏûë..."
    
    # 1) ÏÑ±Îä• ÏßÄÌëú ÏàòÏßë
    collect_performance_metrics "$system_name" "$system_path"
    
    # 2) ÌëúÏ§Ä ÏãúÏä§ÌÖúÍ≥º ÎπÑÍµê Î∂ÑÏÑù
    compare_with_standard "$system_name"
    
    # 3) Shadow Î°úÍ∑∏ ÏÉùÏÑ±
    local shadow_log="$SHADOW_LOGS_DIR/legacy_shadow_${system_name%.*}_$(date +%F).log"
    echo "$(date -Iseconds): $system_name Shadow Í≤ÄÏ¶ù ÏôÑÎ£å" > "$shadow_log"
    echo "  - Í≤ÄÏ¶ù ÏùºÏãú: $(date -Iseconds)" >> "$shadow_log"
    echo "  - Í≤ÄÏ¶ù Î∞©Î≤ï: ÏÑ±Îä• ÏßÄÌëú ÏàòÏßë + ÌëúÏ§Ä ÏãúÏä§ÌÖú ÎπÑÍµê" >> "$shadow_log"
    echo "  - Í≤∞Í≥º ÌååÏùº: $SHADOW_RESULTS_DIR/comparison_${system_name%.*}_$(date +%F).json" >> "$shadow_log"
    
    log "‚úÖ $system_name Shadow Î≥ëÌñâ Í≤ÄÏ¶ù ÏôÑÎ£å"
}

# === Shadow Í≤ÄÏ¶ù ÏöîÏïΩ Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ===
generate_shadow_summary() {
    local summary_file="$SHADOW_LOGS_DIR/shadow_summary_$(date +%F).md"
    
    log "üìä Shadow Í≤ÄÏ¶ù ÏöîÏïΩ Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±: $summary_file"
    
    # Í≤ÄÏ¶ù Í≤∞Í≥º ÏßëÍ≥Ñ
    local total_systems=${#SHADOW_TARGETS[@]}
    local completed_systems=$(find "$SHADOW_RESULTS_DIR" -name "comparison_*_$(date +%F).json" 2>/dev/null | wc -l | xargs)
    local passed_systems=0
    local failed_systems=0
    
    # PASS/FAIL Ïπ¥Ïö¥Ìä∏
    for result_file in "$SHADOW_RESULTS_DIR"/comparison_*_$(date +%F).json 2>/dev/null; do
        if [[ -f "$result_file" ]]; then
            if grep -q '"result": "PASS"' "$result_file"; then
                passed_systems=$((passed_systems + 1))
            else
                failed_systems=$((failed_systems + 1))
            fi
        fi
    done
    
    cat > "$summary_file" <<EOF
# üîÑ Shadow Î≥ëÌñâ Í≤ÄÏ¶ù ÏöîÏïΩ ‚Äî $(date +%F)

## üìã **Í≤ÄÏ¶ù Í∞úÏöî**

- **Í≤ÄÏ¶ù ÏùºÏãú**: $(date -Iseconds)
- **Í≤ÄÏ¶ù Î∞©Î≤ï**: Î†àÍ±∞Ïãú vs ÌëúÏ§Ä ÏãúÏä§ÌÖú Î≥ëÌñâ Ïã§Ìñâ
- **Í≤ÄÏ¶ù Í∏∞Í∞Ñ**: 3Ïùº (2025-08-22 ~ 2025-08-25)
- **Í≤ÄÏ¶ù Î™©Ï†Å**: ÏÑ±Îä• ÏßÄÌëú ÎπÑÍµê Î∞è Ï†ÑÌôò Í∞ÄÎä•ÏÑ± ÌåêÎã®

## üîç **Í≤ÄÏ¶ù ÎåÄÏÉÅ ÏãúÏä§ÌÖú**

$(for system_name in "${!SHADOW_TARGETS[@]}"; do
    local system_path="${SHADOW_TARGETS[$system_name]}"
    local result_file="$SHADOW_RESULTS_DIR/comparison_${system_name%.*}_$(date +%F).json"
    if [[ -f "$result_file" ]]; then
        local result=$(grep -o '"result": "[^"]*"' "$result_file" | cut -d'"' -f4)
        echo "- **$system_name**: $system_path"
        echo "  - ÏÉÅÌÉú: $([[ "$result" == "PASS" ]] && echo "‚úÖ PASS" || echo "‚ùå FAIL")"
        echo "  - Í≤∞Í≥º ÌååÏùº: \`$result_file\`"
    else
        echo "- **$system_name**: $system_path"
        echo "  - ÏÉÅÌÉú: ‚è≥ Í≤ÄÏ¶ù ÏßÑÌñâ Ï§ë"
        echo "  - Í≤∞Í≥º ÌååÏùº: ÏïÑÏßÅ ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏùå"
    fi
done)

## üìä **Í≤ÄÏ¶ù Í≤∞Í≥º ÏöîÏïΩ**

- **Ï¥ù ÎåÄÏÉÅ ÏãúÏä§ÌÖú**: $total_systemsÍ∞ú
- **Í≤ÄÏ¶ù ÏôÑÎ£å**: $completed_systemsÍ∞ú
- **Í≤ÄÏ¶ù ÌÜµÍ≥º**: $passed_systemsÍ∞ú
- **Í≤ÄÏ¶ù Ïã§Ìå®**: $failed_systemsÍ∞ú
- **ÏßÑÌñâÎ•†**: $([[ $total_systems -gt 0 ]] && echo "$((completed_systems * 100 / total_systems))%" || echo "0%")

## üéØ **Í≤ÄÏ¶ù Í∏∞Ï§Ä**

### **ÏÑ±Í≥µÎ•†**
- **Í∏∞Ï§Ä**: ÌëúÏ§Ä ÏãúÏä§ÌÖú ÏÑ±Í≥µÎ•† ‚â• Î†àÍ±∞Ïãú ÏãúÏä§ÌÖú ÏÑ±Í≥µÎ•†
- **Î™©Ìëú**: 99.9% Ïù¥ÏÉÅ

### **Ïã§Ìñâ ÏãúÍ∞Ñ**
- **Í∏∞Ï§Ä**: ÌëúÏ§Ä ÏãúÏä§ÌÖú Ïã§Ìñâ ÏãúÍ∞Ñ ‚â§ Î†àÍ±∞Ïãú ÏãúÏä§ÌÖú Ïã§Ìñâ ÏãúÍ∞Ñ √ó 1.2
- **Î™©Ìëú**: 120% Ïù¥Ìïò

### **Ïò§Î•ò Î∞úÏÉùÎ•†**
- **Í∏∞Ï§Ä**: ÌëúÏ§Ä ÏãúÏä§ÌÖú Ïò§Î•ò Î∞úÏÉùÎ•† ‚â§ Î†àÍ±∞Ïãú ÏãúÏä§ÌÖú Ïò§Î•ò Î∞úÏÉùÎ•†
- **Î™©Ìëú**: 1% Ïù¥Ìïò

## üìà **ÏÑ±Í≥º ÏßÄÌëú**

- **Ï†ÑÏ≤¥ Í≤ÄÏ¶ù ÌÜµÍ≥ºÏú®**: $([[ $completed_systems -gt 0 ]] && echo "$((passed_systems * 100 / completed_systems))%" || echo "N/A")
- **ÌëúÏ§Ä ÏãúÏä§ÌÖú Ïö∞ÏàòÏÑ±**: $([[ $passed_systems -gt 0 ]] && echo "‚úÖ ÌôïÏù∏Îê®" || echo "‚ö†Ô∏è  Ï∂îÍ∞Ä Í≤ÄÏ¶ù ÌïÑÏöî")
- **Ï†ÑÌôò Ï§ÄÎπÑÎèÑ**: $([[ $passed_systems -eq $completed_systems && $completed_systems -gt 0 ]] && echo "‚úÖ Ï§ÄÎπÑ ÏôÑÎ£å" || echo "‚ö†Ô∏è  Ï§ÄÎπÑ Ï§ë")

## üîÑ **Îã§Ïùå Îã®Í≥Ñ**

### **1) Í≤ÄÏ¶ù ÏôÑÎ£å ÌõÑ (2025-08-25)**
- ÏµúÏ¢Ö Í≤∞Í≥º Î∂ÑÏÑù Î∞è Í≤ÄÌÜ†
- Ï†ÑÌôò Í∞ÄÎä•ÏÑ± ÏµúÏ¢Ö ÌåêÎã®
- Ï†êÏßÑÏ†Å Ï†ÑÌôò Í≥ÑÌöç ÏàòÎ¶Ω

### **2) Ï†êÏßÑÏ†Å Ï†ÑÌôò (2025-08-26 ~ 2025-09-01)**
- PASS ÏãúÏä§ÌÖú ÏàúÏ∞® Ï¢ÖÎ£å
- FAIL ÏãúÏä§ÌÖú Ï∂îÍ∞Ä Í≤ÄÏ¶ù ÎòêÎäî Í∞úÏÑ†
- ÏµúÏ¢Ö Ï†ïÎ¶¨ Î∞è Ï†ïÎ¶¨

## üö® **Ï£ºÏùòÏÇ¨Ìï≠**

- **Shadow Í≤ÄÏ¶ù Ï§ëÏóêÎäî Îëê ÏãúÏä§ÌÖú Î™®Îëê Ïã§Ìñâ Í∞ÄÎä•**
- **Î¨∏Ï†ú Î∞úÏÉù Ïãú Ï¶âÏãú Î†àÍ±∞Ïãú ÏãúÏä§ÌÖúÏúºÎ°ú Î°§Î∞±**
- **Î™®Îì† Í≤ÄÏ¶ù Í≤∞Í≥ºÎäî ÏÉÅÏÑ∏Ìûà Î¨∏ÏÑúÌôî**
- **Ï†ÑÌôò Í≤∞Ï†ïÏùÄ Í≤ÄÏ¶ù Í≤∞Í≥ºÏóê Í∏∞Î∞òÌïòÏó¨ Ïã†Ï§ëÌïòÍ≤å**

## üìÅ **Í¥ÄÎ†® ÌååÏùº**

- **Í≤ÄÏ¶ù Í≤∞Í≥º**: \`$SHADOW_RESULTS_DIR\`
- **Shadow Î°úÍ∑∏**: \`$SHADOW_LOGS_DIR\`
- **ÎπÑÍµê Î∂ÑÏÑù**: \`comparison_*.json\`

---

> **üí° Ïö¥ÏòÅ ÌåÅ**: Shadow Í≤ÄÏ¶ùÏùÄ ÏïàÏ†ÑÌïú Ï†ÑÌôòÏùÑ ÏúÑÌïú Ï§ëÏöîÌïú Îã®Í≥ÑÏûÖÎãàÎã§.  
> **üìä Î™®ÎãàÌÑ∞ÎßÅ**: Í≤ÄÏ¶ù Í≤∞Í≥ºÎ•º ÏßÄÏÜçÏ†ÅÏúºÎ°ú ÌôïÏù∏ÌïòÍ≥† Î¨∏Ï†úÏ†êÏùÑ ÌååÏïÖÌïòÏÑ∏Ïöî.  
> **üîÑ Ï†ÑÌôò**: Í≤ÄÏ¶ùÏù¥ ÏôÑÎ£åÎêú ÌõÑÏóêÎßå Ï†êÏßÑÏ†Å Ï†ÑÌôòÏùÑ ÏßÑÌñâÌïòÏÑ∏Ïöî.
EOF
    
    log "‚úÖ Shadow Í≤ÄÏ¶ù ÏöîÏïΩ Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å: $summary_file"
}

# === Î©îÏù∏ Ïã§Ìñâ Î°úÏßÅ ===
main() {
    log "üöÄ Shadow Î≥ëÌñâ Í≤ÄÏ¶ù ÏãúÏä§ÌÖú ÏãúÏûë"
    
    # ÎùΩ ÌöçÎìù
    acquire_lock
    
    # ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
    mkdir -p "$SHADOW_LOGS_DIR" "$SHADOW_RESULTS_DIR"
    
    # Shadow Í≤ÄÏ¶ù Ïã§Ìñâ
    local validation_success=0
    local validation_total=${#SHADOW_TARGETS[@]}
    
    for system_name in "${!SHADOW_TARGETS[@]}"; do
        local system_path="${SHADOW_TARGETS[$system_name]}"
        
        if run_shadow_validation "$system_name" "$system_path"; then
            validation_success=$((validation_success + 1))
        fi
    done
    
    # Shadow Í≤ÄÏ¶ù ÏöîÏïΩ Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
    generate_shadow_summary
    
    # Í≤∞Í≥º ÏöîÏïΩ
    log "üìä Shadow Î≥ëÌñâ Í≤ÄÏ¶ù Í≤∞Í≥º ÏöîÏïΩ"
    log "  - Ï¥ù ÎåÄÏÉÅ: $validation_totalÍ∞ú"
    log "  - ÏÑ±Í≥µ: $validation_successÍ∞ú"
    log "  - Ïã§Ìå®: $((validation_total - validation_success))Í∞ú"
    
    if [[ $validation_success -eq $validation_total ]]; then
        log "üéâ Î™®Îì† Shadow Î≥ëÌñâ Í≤ÄÏ¶ù ÏôÑÎ£å!"
        log "Îã§Ïùå Îã®Í≥Ñ: Í≤ÄÏ¶ù Í≤∞Í≥º Î∂ÑÏÑù Î∞è Ï†êÏßÑÏ†Å Ï†ÑÌôò Í≥ÑÌöç"
        exit 0
    else
        log "‚ö†Ô∏è  ÏùºÎ∂Ä Shadow Í≤ÄÏ¶ù Ïã§Ìå®, ÏàòÎèô ÌôïÏù∏ ÌïÑÏöî"
        exit 1
    fi
}

# === Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ ===
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi



