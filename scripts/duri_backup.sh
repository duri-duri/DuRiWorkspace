#!/usr/bin/env bash
set -Eeuo pipefail

MODE="${1:-full}"              # Í∏∞Î≥∏: full(USB Í≤ÄÏ¶ùÌòï)
SRC_DIR="${2:-/home/duri/DuRiWorkspace}"
TS="$(date +%F__%H%M)"
HOST="host-$(hostname -s)"
LOG_DIR="${LOG_DIR:-/var/log/duri2-backup}"
mkdir -p "$LOG_DIR" 2>/dev/null || LOG_DIR="/tmp/duri2-backup"
RUNLOG="$LOG_DIR/run_${TS}_${MODE}.log"

# PRECHECK START
precheck_usb_or_fallback() {
  USB_MNT="/mnt/usb"
  DESKTOP_ROOT="/mnt/c/Users/admin/Desktop/ÎëêÎ¶¨Î∞±ÏóÖ"
  mkdir -p "$DESKTOP_ROOT" 2>/dev/null || true

  # 1) /mnt/usbÍ∞Ä fstab ÏûêÎèô ÎßàÏö¥Ìä∏Î°ú ÏÇ¥ÏïÑÏûàÏúºÎ©¥ OK
  if mount | grep -q " on ${USB_MNT} "; then
    log "[PRECHECK] USB mounted at ${USB_MNT}"
    echo "$USB_MNT"
    return 0
  fi

  # 2) fstab Îì±Î°ùÎêòÏñ¥ ÏûàÏúºÎ©¥ Ïû¨ÎßàÏö¥Ìä∏ ÏãúÎèÑ
  if grep -qE '^[A-Z]:[[:space:]]+/mnt/usb[[:space:]]+drvfs' /etc/fstab 2>/dev/null; then
    if sudo mount /mnt/usb 2>/dev/null; then
      log "[PRECHECK] USB mounted via fstab"
      echo "$USB_MNT"
      return 0
    fi
  fi

  # 3) ÎßàÏßÄÎßâ Ìè¥Î∞±: Îç∞Ïä§ÌÅ¨ÌÜ± Í≤ΩÎ°ú
  log "[PRECHECK] USB unavailable -> fallback to Desktop: ${DESKTOP_ROOT}"
  echo "$DESKTOP_ROOT"
  return 0
}

# ÎåÄÏÉÅ Î£®Ìä∏ ÏûêÎèô Í≤∞Ï†ï
BACKUP_ROOT="$(precheck_usb_or_fallback)"
echo "[PRECHECK] Backup root determined: ${BACKUP_ROOT}"

# USBÏôÄ Îç∞Ïä§ÌÅ¨ÌÜ± Í≤ΩÎ°ú ÏÑ§Ï†ï
if [[ "$BACKUP_ROOT" == "/mnt/usb" ]]; then
  USB="/mnt/usb"
  DESKTOP_ROOT="/mnt/c/Users/admin/Desktop/ÎëêÎ¶¨Î∞±ÏóÖ"
  DEST_DESKTOP_DIR="${DESKTOP_ROOT}/$(date +%Y)/$(date +%m)/$(date +%d)"
  mkdir -p "$DEST_DESKTOP_DIR" 2>/dev/null || true
else
  USB=""
  DESKTOP_ROOT="$BACKUP_ROOT"
  DEST_DESKTOP_DIR="${DESKTOP_ROOT}/$(date +%Y)/$(date +%m)/$(date +%d)"
  mkdir -p "$DEST_DESKTOP_DIR" 2>/dev/null || true
fi
# PRECHECK END

# Í≥µÌÜµ tar ÏòµÏÖò(Î©îÌÉÄ Î≥¥Ï°¥)
TAR_FLAGS=(--numeric-owner --acls --xattrs --xattrs-include='*' --same-owner --hard-dereference)

die(){ echo "[FATAL] $*" | tee -a "$RUNLOG"; exit 1; }
log(){ echo "[$(date '+%F %T')] $*" | tee -a "$RUNLOG"; }

# Î™®ÎìúÎ≥Ñ Í∑úÍ≤©
case "$MODE" in
  full)     exec "$(dirname "$0")/duri_backup_full_canonical.sh";;
  extended) PREFIX="EXT";     EXCLUDES_FILE="scripts/backup_exclude_extended.txt";;
  dev)      PREFIX="DEV";     EXCLUDES_FILE="scripts/backup_exclude_dev.txt";;
  artifact) PREFIX="ART";     EXCLUDES_FILE="scripts/backup_exclude_artifact.txt";;
  *) die "unknown mode: $MODE";;
esac

ARCH_NAME="${PREFIX}__${TS}__${HOST}.tar.zst"
DEST_USB="${USB}/${ARCH_NAME}"
DEST_DESK="${DEST_DESKTOP_DIR}/${ARCH_NAME}"

# exclude Í∑úÏπô Íµ¨ÏÑ±
EX_ARGS=()
if [[ -n "${EXCLUDES_FILE}" && -f "${EXCLUDES_FILE}" ]]; then
  while IFS= read -r p; do 
    [[ -z "$p" || "$p" =~ ^# ]] && continue; 
    EX_ARGS+=(--exclude="$p"); 
  done < "${EXCLUDES_FILE}"
fi

log "MODE=${MODE} SRC=${SRC_DIR}"
log "DEST_USB=${DEST_USB}"
log "DEST_DESK=${DEST_DESK}"

# ---- Î∞±ÏóÖ ÏÉùÏÑ± (tar ‚Üí zstd) ----
tmp_tar="$(mktemp -u /tmp/duri_backup_payload.XXXXXX.tar)"
cleanup(){ rm -f "$tmp_tar"; }
trap cleanup EXIT

log "creating tar‚Ä¶"
tar "${EX_ARGS[@]}" "${TAR_FLAGS[@]}" -cf "${tmp_tar}" -C "${SRC_DIR}" . 2>>"$RUNLOG" || die "tar failed"

log "compressing to backup destinations‚Ä¶"

# USB Î∞±ÏóÖ (USBÍ∞Ä ÏûàÏùÑ ÎïåÎßå)
if [[ -n "$USB" && -d "$USB" ]]; then
  log "üìÅ USB Î∞±ÏóÖ ÏãúÏûë: ${DEST_USB}"
  if zstd -T0 -19 -f "${tmp_tar}" -o "${DEST_USB}" 2>>"$RUNLOG"; then
    log "‚úÖ USB Î∞±ÏóÖ ÏôÑÎ£å: ${DEST_USB}"
  else
    log "‚ö†Ô∏è  USB Î∞±ÏóÖ Ïã§Ìå®, Îç∞Ïä§ÌÅ¨ÌÜ±ÏúºÎ°ú Í≥ÑÏÜç ÏßÑÌñâ"
  fi
else
  log "‚ÑπÔ∏è  USB Î∞±ÏóÖ Ïä§ÌÇµ (USB ÎßàÏö¥Ìä∏ ÏóÜÏùå)"
fi

# Îç∞Ïä§ÌÅ¨ÌÜ± Î∞±ÏóÖ (Ìï≠ÏÉÅ ÏßÑÌñâ)
log "üìÅ Îç∞Ïä§ÌÅ¨ÌÜ± Î∞±ÏóÖ ÏãúÏûë: ${DEST_DESK}"
if zstd -T0 -19 -f "${tmp_tar}" -o "${DEST_DESK}" 2>>"$RUNLOG"; then
  log "‚úÖ Îç∞Ïä§ÌÅ¨ÌÜ± Î∞±ÏóÖ ÏôÑÎ£å: ${DEST_DESK}"
else
  die "Îç∞Ïä§ÌÅ¨ÌÜ± Î∞±ÏóÖ Ïã§Ìå®: ${DEST_DESK}"
fi

# ---- full Î™®Îìú Í≤ÄÏ¶ù(USB Î≥µÏõê Ïä§Î™®ÌÅ¨) ----
if [[ "$MODE" == "full" ]]; then
  if [[ -n "$USB" && -d "$USB" ]]; then
    IMG="${USB}/duri2.img"
    if [[ -e "$IMG" ]]; then
      log "üîç USB Î°§Î∞± Í≤ÄÏ¶ù ÏãúÏûë..."
      
      MNT="/mnt/duri2_usb"
      mkdir -p "$MNT" 2>/dev/null || true
      LOOP="$(losetup -f --show "$IMG" 2>/dev/null)" || { log "[WARN] losetup Ïã§Ìå®, Í≤ÄÏ¶ù Ïä§ÌÇµ"; exit 0; }
      trap 'umount "$MNT" 2>/dev/null || true; losetup -d "$LOOP" 2>/dev/null || true' EXIT

      log "mkfs.ext4 -F ${LOOP}"
      mkfs.ext4 -F -L DURI2 "$LOOP" >>"$RUNLOG" 2>&1 || { log "[WARN] mkfs Ïã§Ìå®, Í≤ÄÏ¶ù Ïä§ÌÇµ"; exit 0; }
      
      log "mount ${LOOP} ${MNT}"
      mount "$LOOP" "$MNT" 2>/dev/null || { log "[WARN] mount Ïã§Ìå®, Í≤ÄÏ¶ù Ïä§ÌÇµ"; exit 0; }

      log "restore to ${MNT}"
      zstd -dc < "${DEST_USB}" | tar -xvf - -C "${MNT}" "${TAR_FLAGS[@]}" >>"$RUNLOG" 2>&1 || { log "[WARN] restore Ïã§Ìå®, Í≤ÄÏ¶ù Ïä§ÌÇµ"; exit 0; }

      # Í∞ÑÎã®Ìïú Íµ¨Ï°∞ ÎπÑÍµê(ÏÉòÌîå)
      ORIG_COUNT=$(find "${SRC_DIR}" -type f 2>/dev/null | wc -l)
      REST_COUNT=$(find "${MNT}" -type f 2>/dev/null | wc -l)
      log "compare count: orig=${ORIG_COUNT} restored=${REST_COUNT}"
      
      if [[ "$ORIG_COUNT" -gt 0 && "$REST_COUNT" -gt 0 ]]; then
        RESTORE_RATIO=$(echo "scale=1; $REST_COUNT * 100 / $ORIG_COUNT" | bc 2>/dev/null || echo "0")
        log "‚úÖ Î≥µÏõêÎ•†: ${RESTORE_RATIO}%"
      fi

      umount "$MNT" 2>/dev/null || true
      losetup -d "$LOOP" 2>/dev/null || true
      log "‚úÖ USB Î°§Î∞± Í≤ÄÏ¶ù ÏôÑÎ£å"
    else
      log "[WARN] USB Ïù¥ÎØ∏ÏßÄ ÏóÜÏùå: ${IMG} ‚Üí Í≤ÄÏ¶ù Ïä§ÌÇµ"
    fi
  else
    log "‚ÑπÔ∏è  USB Î°§Î∞± Í≤ÄÏ¶ù Ïä§ÌÇµ (USB ÎßàÏö¥Ìä∏ ÏóÜÏùå)"
  fi
fi

log "[DONE] backup ${MODE} -> ${ARCH_NAME}"
log "üìÅ Î∞±ÏóÖ ÏúÑÏπò:"
log "   USB: ${DEST_USB}"
log "   Îç∞Ïä§ÌÅ¨ÌÜ±: ${DEST_DESK}"
log "üìã Î°úÍ∑∏: ${RUNLOG}"
