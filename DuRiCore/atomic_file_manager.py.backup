#!/usr/bin/env python3
"""
DuRi 원자적 파일 관리자
"""

import os
import tempfile
import shutil
import json
from typing import Dict, Any, List
from datetime import datetime

class AtomicFileManager:
    def __init__(self, file_path: str):
        self.file_path = file_path
        self.temp_dir = os.path.dirname(file_path)
        
    def atomic_write(self, data: Any) -> bool:
        """원자적 쓰기 (temp -> rename)"""
        try:
            # 임시 파일 생성
            with tempfile.NamedTemporaryFile(
                mode='w', 
                encoding='utf-8', 
                dir=self.temp_dir,
                delete=False,
                suffix='.tmp'
            ) as temp_file:
                json.dump(data, temp_file, ensure_ascii=False, indent=2)
                temp_path = temp_file.name
                
            # 원자적 이동
            shutil.move(temp_path, self.file_path)
            return True
            
        except Exception as e:
            print(f"❌ 원자적 쓰기 실패: {e}")
            # 임시 파일 정리
            if 'temp_path' in locals() and os.path.exists(temp_path):
                os.unlink(temp_path)
            return False
            
    def atomic_read(self) -> Any:
        """원자적 읽기"""
        try:
            if not os.path.exists(self.file_path):
                return None
                
            with open(self.file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
                
        except Exception as e:
            print(f"❌ 원자적 읽기 실패: {e}")
            return None
            
    def atomic_append(self, new_item: Any) -> bool:
        """원자적 추가"""
        try:
            # 기존 데이터 로드
            existing_data = self.atomic_read()
            
            if existing_data is None:
                # 새 데이터 생성
                if isinstance(new_item, dict) and 'cycle_id' in new_item:
                    # 사이클 데이터인 경우
                    data = {
                        "schema_version": "2.0",
                        "created_at": datetime.now().isoformat(),
                        "cycles": [new_item]
                    }
                else:
                    # 일반 리스트 데이터
                    data = [new_item]
            else:
                # 기존 데이터에 추가
                if isinstance(existing_data, dict) and 'cycles' in existing_data:
                    # 사이클 데이터인 경우
                    existing_data['cycles'].append(new_item)
                    existing_data['last_updated'] = datetime.now().isoformat()
                    data = existing_data
                elif isinstance(existing_data, list):
                    # 일반 리스트 데이터
                    data = existing_data + [new_item]
                else:
                    # 알 수 없는 형식
                    data = [new_item]
                    
            # 원자적 쓰기
            return self.atomic_write(data)
            
        except Exception as e:
            print(f"❌ 원자적 추가 실패: {e}")
            return False
