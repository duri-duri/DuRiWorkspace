from DuRiCore.trace import emit_trace
"""
CI ÌååÏù¥ÌîÑÎùºÏù∏Ïö© ÌöåÍ∑Ä ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏
8Í∞ú ÏãúÎÇòÎ¶¨Ïò§ ÏûêÎèô Ïã§Ìñâ + 3Ï¥à Í∞ÄÎìú + Ïä§Î™®ÌÅ¨ Í≤ÄÏ¶ù
"""
import asyncio
import time
import json
import logging
from typing import Dict, Any, List
from pathlib import Path
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CIRegressionTest:
    """CI ÌöåÍ∑Ä ÌÖåÏä§Ìä∏ Ïã§ÌñâÍ∏∞"""

    def __init__(self):
        self.test_results = []
        self.start_time = None
        self.max_execution_time = 3.0

    async def run_smoke_tests(self) -> Dict[str, bool]:
        """Ïä§Î™®ÌÅ¨ ÌÖåÏä§Ìä∏ Ïã§Ìñâ (3Ï§Ñ Í≤ÄÏ¶ù)"""
        logger.info('üîç Ïä§Î™®ÌÅ¨ ÌÖåÏä§Ìä∏ ÏãúÏûë...')
        smoke_results = {'boot_snapshot_ok': False, 'initializing_to_ready': False, 'ssot_routing_confirmed': False}
        try:
            from integrated_safety_system import IntegratedSafetySystem
            system = IntegratedSafetySystem()
            smoke_results['boot_snapshot_ok'] = True
            logger.info('‚úÖ 1/3: Î∂ÄÌåÖ Ïä§ÎÉÖÏÉ∑ OK')
            await system.initialize()
            await system._wait_for_ready_state()
            if system.integration_status.value.lower() == 'ready':
                smoke_results['initializing_to_ready'] = True
                logger.info('‚úÖ 2/3: initializing ‚Üí ready Ï†ÑÌôò OK')
            if hasattr(system, 'state_manager') and system.state_manager:
                smoke_results['ssot_routing_confirmed'] = True
                logger.info('‚úÖ 3/3: SSOT ÎùºÏö∞ÌåÖ ÌôïÏù∏ OK')
        except Exception as e:
            logger.error(f'‚ùå Ïä§Î™®ÌÅ¨ ÌÖåÏä§Ìä∏ Ïã§Ìå®: {e}')
        return smoke_results

    async def run_regression_tests(self) -> List[Dict[str, Any]]:
        """8Í∞ú ÏãúÎÇòÎ¶¨Ïò§ ÌöåÍ∑Ä ÌÖåÏä§Ìä∏ Ïã§Ìñâ"""
        logger.info('üöÄ ÌöåÍ∑Ä ÌÖåÏä§Ìä∏ ÏãúÏûë (8Í∞ú ÏãúÎÇòÎ¶¨Ïò§)')
        from demo_integrated_safety_system import DuRiIntegratedSafetyDemo
        demo = DuRiIntegratedSafetyDemo()
        await demo.initialize_system()
        scenarios = [('ÏãúÎÇòÎ¶¨Ïò§ 1: ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî', demo.demo_scenario_1_initialization), ('ÏãúÎÇòÎ¶¨Ïò§ 2: Ïö©Îüâ Í±∞Î≤ÑÎÑåÏä§', demo.demo_scenario_2_capacity_governance), ('ÏãúÎÇòÎ¶¨Ïò§ 3: ÏïàÏ†ÑÏÑ± ÌîÑÎ†àÏûÑÏõåÌÅ¨', demo.demo_scenario_3_safety_framework), ('ÏãúÎÇòÎ¶¨Ïò§ 4: ÎèôÎì±ÏÑ± Í≤ÄÏ¶ù', demo.demo_scenario_4_equivalence_validation), ('ÏãúÎÇòÎ¶¨Ïò§ 5: ÌÜµÌï© ÏïàÏ†ÑÏÑ± Í≤ÄÏÇ¨', demo.demo_scenario_5_integration_safety_check), ('ÏãúÎÇòÎ¶¨Ïò§ 6: E-stop ÏãúÎÆ¨Î†àÏù¥ÏÖò', demo.demo_scenario_6_emergency_stop_simulation), ('ÏãúÎÇòÎ¶¨Ïò§ 7: ÌöåÍ∑Ä ÌÖåÏä§Ìä∏', demo.demo_scenario_7_regression_test), ('ÏãúÎÇòÎ¶¨Ïò§ 8: ÏµúÏ¢Ö ÌÜµÌï© Í≤ÄÏ¶ù', demo.demo_scenario_8_final_integration_verification)]
        results = []
        for (name, scenario_func) in scenarios:
            logger.info(f'üìã {name} Ïã§Ìñâ Ï§ë...')
            start_time = time.time()
            try:
                result = await scenario_func()
                execution_time = time.time() - start_time
                test_result = {'scenario': name, 'success': result.get('success', False), 'execution_time': execution_time, 'details': result.get('details', ''), 'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')}
                if test_result['success']:
                    logger.info(f'‚úÖ {name}: ÏÑ±Í≥µ ({execution_time:.2f}s)')
                else:
                    logger.error(f'‚ùå {name}: Ïã§Ìå® ({execution_time:.2f}s)')
                results.append(test_result)
            except Exception as e:
                execution_time = time.time() - start_time
                logger.error(f'üí• {name}: ÏòàÏô∏ Î∞úÏÉù ({execution_time:.2f}s) - {e}')
                results.append({'scenario': name, 'success': False, 'execution_time': execution_time, 'details': f'ÏòàÏô∏: {str(e)}', 'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')})
        return results

    async def run_all_tests(self) -> Dict[str, Any]:
        """Ï†ÑÏ≤¥ ÌÖåÏä§Ìä∏ Ïã§Ìñâ"""
        self.start_time = time.time()
        logger.info('üéØ CI ÌöåÍ∑Ä ÌÖåÏä§Ìä∏ ÏãúÏûë')
        smoke_results = await self.run_smoke_tests()
        regression_results = await self.run_regression_tests()
        total_time = time.time() - self.start_time
        passed_scenarios = sum((1 for r in regression_results if r['success']))
        total_scenarios = len(regression_results)
        if total_time > self.max_execution_time:
            logger.error(f'‚è∞ Ïã§Ìñâ ÏãúÍ∞Ñ Ï¥àÍ≥º: {total_time:.2f}s > {self.max_execution_time}s')
            overall_success = False
        else:
            overall_success = passed_scenarios == total_scenarios
            logger.info(f'‚è±Ô∏è Ïã§Ìñâ ÏãúÍ∞Ñ: {total_time:.2f}s (Í∞ÄÎìú: {self.max_execution_time}s)')
        final_result = {'overall_success': overall_success, 'execution_time': total_time, 'scenarios': {'total': total_scenarios, 'passed': passed_scenarios, 'failed': total_scenarios - passed_scenarios, 'success_rate': f'{passed_scenarios / total_scenarios * 100:.1f}%'}, 'smoke_tests': smoke_results, 'regression_tests': regression_results, 'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'), 'ci_gate': {'time_guard_passed': total_time <= self.max_execution_time, 'all_scenarios_passed': passed_scenarios == total_scenarios, 'smoke_tests_passed': all(smoke_results.values())}}
        return final_result

    def save_results(self, results: Dict[str, Any], filename: str=None):
        """ÌÖåÏä§Ìä∏ Í≤∞Í≥º Ï†ÄÏû•"""
        if filename is None:
            timestamp = time.strftime('%Y%m%d_%H%M%S')
            filename = f'ci_regression_results_{timestamp}.json'
        output_path = Path(filename)
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        logger.info(f'üíæ Í≤∞Í≥º Ï†ÄÏû•: {output_path}')
        return output_path

async def main():
    """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
    ci_test = CIRegressionTest()
    try:
        results = await ci_test.run_all_tests()
        emit_trace('info', ' '.join(map(str, ['\n' + '=' * 60])))
        emit_trace('info', ' '.join(map(str, ['üéØ CI ÌöåÍ∑Ä ÌÖåÏä§Ìä∏ Í≤∞Í≥º'])))
        emit_trace('info', ' '.join(map(str, ['=' * 60])))
        emit_trace('info', ' '.join(map(str, [f"üìä Ï†ÑÏ≤¥ ÏÑ±Í≥µ: {('‚úÖ' if results['overall_success'] else '‚ùå')}"])))
        emit_trace('info', ' '.join(map(str, [f"‚è±Ô∏è Ïã§Ìñâ ÏãúÍ∞Ñ: {results['execution_time']:.2f}s"])))
        emit_trace('info', ' '.join(map(str, [f"üìã ÏãúÎÇòÎ¶¨Ïò§: {results['scenarios']['passed']}/{results['scenarios']['total']} ÌÜµÍ≥º"])))
        emit_trace('info', ' '.join(map(str, [f"üìà ÏÑ±Í≥µÎ•†: {results['scenarios']['success_rate']}"])))
        emit_trace('info', ' '.join(map(str, [f"üîí CI Í≤åÏù¥Ìä∏: {('‚úÖ ÌÜµÍ≥º' if results['ci_gate']['time_guard_passed'] and results['ci_gate']['all_scenarios_passed'] else '‚ùå Ï∞®Îã®')}"])))
        emit_trace('info', ' '.join(map(str, ['\nüîç Ïä§Î™®ÌÅ¨ ÌÖåÏä§Ìä∏:'])))
        for (test, passed) in results['smoke_tests'].items():
            status = '‚úÖ' if passed else '‚ùå'
            emit_trace('info', ' '.join(map(str, [f'  {status} {test}'])))
        output_file = ci_test.save_results(results)
        if results['overall_success']:
            emit_trace('info', ' '.join(map(str, [f'\nüéâ CI Í≤åÏù¥Ìä∏ ÌÜµÍ≥º! Í≤∞Í≥º ÌååÏùº: {output_file}'])))
            exit(0)
        else:
            emit_trace('info', ' '.join(map(str, [f'\nüí• CI Í≤åÏù¥Ìä∏ Ï∞®Îã®! Í≤∞Í≥º ÌååÏùº: {output_file}'])))
            exit(1)
    except Exception as e:
        logger.error(f'üí• CI ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ïã§Ìå®: {e}')
        exit(1)
if __name__ == '__main__':
    asyncio.run(main())