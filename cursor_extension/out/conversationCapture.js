"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationCapture = void 0;
const vscode = require("vscode");
const duriAPI_1 = require("./duriAPI");
class ConversationCapture {
    constructor(learningManager) {
        this.isCapturing = false;
        this.lastUserInput = '';
        this.lastAssistantResponse = '';
        this.learningManager = learningManager;
        this.duriAPI = new duriAPI_1.DuRiAPI();
        this.sessionId = `session_${Date.now()}`;
    }
    start() {
        if (this.isCapturing) {
            return;
        }
        this.isCapturing = true;
        console.log('DuRi 통합 대화 캡처가 시작되었습니다.');
        // DuRi 통합 시스템 연결 확인
        this.checkDuRiConnection();
        // Cursor 채팅 패널 모니터링
        this.monitorCursorChat();
        // 파일 변경 모니터링 (코드 생성 결과)
        this.monitorFileChanges();
        // 명령어 실행 모니터링
        this.monitorCommands();
    }
    stop() {
        this.isCapturing = false;
        console.log('DuRi 통합 대화 캡처가 중지되었습니다.');
    }
    async checkDuRiConnection() {
        const isHealthy = await this.duriAPI.checkHealth();
        if (isHealthy) {
            console.log('✅ DuRi 통합 시스템에 연결되었습니다.');
            vscode.window.showInformationMessage('DuRi 통합 시스템에 연결되었습니다.');
        }
        else {
            console.error('❌ DuRi 통합 시스템에 연결할 수 없습니다.');
            vscode.window.showErrorMessage('DuRi 통합 시스템에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.');
        }
    }
    monitorCursorChat() {
        // Cursor 채팅 패널의 메시지 모니터링
        vscode.window.onDidChangeActiveTextEditor(editor => {
            if (editor) {
                this.checkForChatContent(editor.document);
            }
        });
        // 문서 변경 모니터링
        vscode.workspace.onDidChangeTextDocument(event => {
            this.checkForChatContent(event.document);
        });
    }
    checkForChatContent(document) {
        const fileName = document.fileName.toLowerCase();
        // Cursor 채팅 관련 파일인지 확인
        if (fileName.includes('chat') || fileName.includes('cursor') || fileName.includes('duri')) {
            const content = document.getText();
            this.extractConversationFromContent(content);
        }
    }
    extractConversationFromContent(content) {
        // 사용자 입력과 AI 응답 추출
        const lines = content.split('\n');
        let currentUserInput = '';
        let currentAssistantResponse = '';
        for (const line of lines) {
            if (line.trim().startsWith('User:') || line.trim().startsWith('사용자:')) {
                if (currentUserInput && currentAssistantResponse) {
                    this.sendConversationToDuRi(currentUserInput, currentAssistantResponse);
                    currentUserInput = '';
                    currentAssistantResponse = '';
                }
                currentUserInput = line.replace(/^(User:|사용자:)\s*/, '').trim();
            }
            else if (line.trim().startsWith('Assistant:') || line.trim().startsWith('AI:') || line.trim().startsWith('DuRi:')) {
                currentAssistantResponse = line.replace(/^(Assistant:|AI:|DuRi:)\s*/, '').trim();
            }
            else if (currentAssistantResponse) {
                currentAssistantResponse += '\n' + line;
            }
        }
        // 마지막 대화 처리
        if (currentUserInput && currentAssistantResponse) {
            this.sendConversationToDuRi(currentUserInput, currentAssistantResponse);
        }
    }
    monitorFileChanges() {
        vscode.workspace.onDidSaveTextDocument(document => {
            // 새로 생성된 파일이나 수정된 파일에서 AI 생성 코드 감지
            const content = document.getText();
            if (this.isAIGeneratedContent(content)) {
                this.sendCodeGenerationToDuRi(content, document.fileName);
            }
        });
    }
    isAIGeneratedContent(content) {
        // AI 생성 코드의 특징을 감지
        const aiIndicators = [
            '// Generated by AI',
            '// AI generated',
            '// DuRi generated',
            '/* AI 생성 코드 */',
            '// This code was generated'
        ];
        return aiIndicators.some(indicator => content.includes(indicator));
    }
    monitorCommands() {
        // Cursor 명령어 실행 모니터링
        vscode.commands.registerCommand('duri.captureCurrentConversation', () => {
            const activeEditor = vscode.window.activeTextEditor;
            if (activeEditor) {
                const content = activeEditor.document.getText();
                this.extractConversationFromContent(content);
                vscode.window.showInformationMessage('현재 대화가 DuRi 통합 시스템에 전송되었습니다.');
            }
        });
        // DuRi 통합 시스템 테스트 명령어
        vscode.commands.registerCommand('duri.testUnifiedSystem', async () => {
            try {
                const result = await this.duriAPI.testUnifiedSystem();
                if (result) {
                    vscode.window.showInformationMessage(`DuRi 통합 시스템 테스트 성공! 점수: ${result.integrated_score}`);
                }
                else {
                    vscode.window.showErrorMessage('DuRi 통합 시스템 테스트 실패');
                }
            }
            catch (error) {
                vscode.window.showErrorMessage('DuRi 통합 시스템 테스트 중 오류 발생');
            }
        });
        // DuRi 통합 시스템 통계 조회 명령어
        vscode.commands.registerCommand('duri.getUnifiedStatistics', async () => {
            try {
                const stats = await this.duriAPI.getUnifiedStatistics();
                if (stats) {
                    vscode.window.showInformationMessage(`DuRi 통합 시스템 통계: ${JSON.stringify(stats)}`);
                }
                else {
                    vscode.window.showErrorMessage('DuRi 통합 시스템 통계 조회 실패');
                }
            }
            catch (error) {
                vscode.window.showErrorMessage('DuRi 통합 시스템 통계 조회 중 오류 발생');
            }
        });
    }
    async sendConversationToDuRi(userInput, assistantResponse) {
        if (userInput && assistantResponse &&
            userInput !== this.lastUserInput &&
            assistantResponse !== this.lastAssistantResponse) {
            this.lastUserInput = userInput;
            this.lastAssistantResponse = assistantResponse;
            // DuRi 통합 시스템에 전송
            const unifiedData = {
                user_input: userInput,
                duri_response: assistantResponse,
                metadata: {
                    source: 'cursor_extension',
                    session_id: this.sessionId,
                    user_id: 'cursor_user',
                    timestamp: new Date().toISOString()
                }
            };
            try {
                const result = await this.duriAPI.sendUnifiedConversation(unifiedData);
                if (result) {
                    console.log(`✅ DuRi 통합 학습 성공: 사용자 입력 (${userInput.length}자), AI 응답 (${assistantResponse.length}자), 점수: ${result.integrated_score}`);
                    // 개선 제안이 있으면 알림
                    if (result.improvement_suggestions && result.improvement_suggestions.length > 0) {
                        vscode.window.showInformationMessage(`DuRi 학습 완료! 점수: ${result.integrated_score}. 개선 제안: ${result.improvement_suggestions.length}개`);
                    }
                }
                else {
                    console.error('❌ DuRi 통합 학습 실패');
                }
            }
            catch (error) {
                console.error('DuRi 통합 시스템 전송 오류:', error);
            }
            // 기존 학습 매니저에도 전송 (호환성)
            this.learningManager.sendConversation('user', userInput);
            this.learningManager.sendConversation('assistant', assistantResponse);
        }
    }
    async sendCodeGenerationToDuRi(codeContent, fileName) {
        const userInput = `코드 생성 요청: ${fileName}`;
        const assistantResponse = `생성된 코드:\n${codeContent}`;
        const unifiedData = {
            user_input: userInput,
            duri_response: assistantResponse,
            metadata: {
                source: 'cursor_extension_code_generation',
                session_id: this.sessionId,
                user_id: 'cursor_user',
                file_name: fileName,
                timestamp: new Date().toISOString()
            }
        };
        try {
            const result = await this.duriAPI.sendUnifiedConversation(unifiedData);
            if (result) {
                console.log(`✅ DuRi 코드 생성 학습 성공: ${fileName} (${codeContent.length}자), 점수: ${result.integrated_score}`);
            }
            else {
                console.error('❌ DuRi 코드 생성 학습 실패');
            }
        }
        catch (error) {
            console.error('DuRi 코드 생성 전송 오류:', error);
        }
        // 기존 학습 매니저에도 전송 (호환성)
        this.learningManager.sendConversation('user', userInput);
        this.learningManager.sendConversation('assistant', assistantResponse);
    }
}
exports.ConversationCapture = ConversationCapture;
//# sourceMappingURL=conversationCapture.js.map