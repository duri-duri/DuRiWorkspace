name: Regression Guard & Quality Gates
on: [push, pull_request]

jobs:
  gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Install dev deps
        run: |
          python -m pip install -U pip
          pip install -r requirements-dev.txt
          # gate가 필요로 하는 것들 보강 (CI 보장)
          pip install radon==6.0.1 xenon==0.9.1 mutmut==2.4.4

      - name: Pre-commit (repo)
        run: |
          pre-commit install
          pre-commit run -a

      - name: Collect metrics
        run: |
          python scripts/collect_static_metrics.py

      - name: Ensure baseline
        run: |
          test -f metrics/baseline.json || cp metrics/current.json metrics/baseline.json

      - name: Quality gate
        run: |
          python scripts/gate_score.py

      - name: CI Guard (fail-fast module loading)
        run: ./scripts/ci_guard.sh

      - name: Run mutation tests
        run: |
          mutmut run --CI || true
          mutmut results > metrics/mutmut.txt || true

      - name: Weakpoint analysis
        run: |
          python scripts/weakpoint_topk.py || true

      - name: Gate Shadow Verification
        run: ./scripts/verify_gate_shadow.sh

      - name: Core unit tests (minimal)
        working-directory: duri_core
        run: |
          python -m pytest -q tests/test_decision_logic.py

      - name: Family mode tests
        run: pytest -q tests/test_family_mode_guard.py || true

      - name: SWE Runner safety test
        run: |
          python duri_evolution/agents/swe_runner.py || true

      - name: Agent solve smoke
        run: |
          python - <<'PY'
          import requests
          import json
          try:
              r = requests.post("http://localhost:8080/v1/agent/issue/solve",
                               json={"spec":"smoke"}, timeout=10)
              assert r.status_code == 200, f"Status {r.status_code}: {r.text}"
              j = r.json()
              assert "ok" in j and "id" in j, f"Missing fields: {j}"
              print("✅ Agent solve smoke test passed")
          except Exception as e:
              print(f"❌ Agent solve smoke test failed: {e}")
              exit(1)
          PY

      - name: Upload quality metrics
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-metrics
          path: |
            metrics/
            var/reports/
