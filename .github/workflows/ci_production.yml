name: Production CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install bandit safety pip-audit pip-licenses
    
    - name: Security scan with bandit (fail on medium+)
      run: |
        bandit -r DuRiCore/ -ll -iii -f json -o bandit-report.json || true
        bandit -r DuRiCore/ -ll -iii
        
        # 중대도 B 이상 발견 시 CI 실패
        python3 -c "
        import json
        try:
            with open('bandit-report.json', 'r') as f:
                report = json.load(f)
            
            high_severity = [r for r in report['results'] if r['issue_severity'] in ['HIGH', 'MEDIUM']]
            if high_severity:
                print(f'❌ 중대도 B 이상 보안 이슈 {len(high_severity)}개 발견')
                for issue in high_severity:
                    print(f'  - {issue[\"test_name\"]}: {issue[\"issue_text\"]}')
                exit(1)
            else:
                print('✅ 보안 스캔 통과')
        except FileNotFoundError:
            print('⚠️ bandit 리포트 파일 없음')
        "
    
    - name: Dependency vulnerability scan
      run: |
        pip-audit --strict --format=json --output=pip-audit-report.json || true
        pip-audit --strict
    
    - name: License scan
      run: |
        pip-licenses --fail-on 'GPL-3.0' --format=json --output-file=licenses.json || true
        pip-licenses --fail-on 'GPL-3.0'

  test-suite:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Run tests with coverage
      run: |
        pytest --cov=DuRiCore --cov=duri_modules --cov-report=xml --cov-report=html -v
    
    - name: Enforce coverage >= 80%
      run: |
        python3 -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            line_rate = float(root.get('line-rate', '0'))
            coverage_pct = line_rate * 100
            print(f'코드 커버리지: {coverage_pct:.2f}%')
            if coverage_pct < 80:
                print(f'❌ 커버리지 {coverage_pct:.2f}% < 80% 임계치')
                exit(1)
            else:
                print('✅ 커버리지 임계치 통과')
        except Exception as e:
            print(f'⚠️ 커버리지 분석 실패: {e}')
            exit(1)
        "
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integrity-verification:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install cosign
      run: |
        curl -sSL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o cosign
        chmod +x cosign && sudo mv cosign /usr/local/bin/cosign
    
    - name: Generate SBOM (CycloneDX)
      run: |
        pip install cyclonedx-bom
        cyclonedx-bom -o sbom.json -e .
    
    - name: Generate provenance
      run: |
        echo "{\"build\":\"$GITHUB_RUN_ID\",\"git\":\"$GITHUB_SHA\",\"workflow\":\"$GITHUB_WORKFLOW\"}" > provenance.json
    
    - name: Inject build metadata
      run: |
        echo "GIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
        echo "GIT_SHA_FULL=${GITHUB_SHA}" >> $GITHUB_ENV
        echo "GIT_BRANCH=${GITHUB_REF_NAME}" >> $GITHUB_ENV
        echo "GIT_TAG=$(git describe --tags --always || echo untagged)" >> $GITHUB_ENV
    
    - name: Fail if ignore excludes core code
      run: |
        if grep -E '(^|/)\*\*/?DuRiCore/?(\*\*)?$' .duriintegrityignore; then
          echo "❌ DuRiCore 전체 제외 금지"
          exit 1
        fi
        if grep -E '(^|/)\*\*/?duri_modules/?(\*\*)?$' .duriintegrityignore; then
          echo "❌ duri_modules 전체 제외 금지"
          exit 1
        fi
        echo "✅ 핵심 코드 제외 방지 검사 통과"
    
    - name: Create deployment metadata (single source of truth)
      run: |
        python3 - <<'PY'
        from DuRiCore.deployment.deployment_integrity import deployment_integrity
        md = deployment_integrity.create_deployment_metadata('1.0.0','sbom.json','provenance.json')
        print(md["deployment_id"], "metadata written")
        print(f"Files included: {md['file_count']}")
        PY
    
    - name: Keyless sign files (OIDC)
      env:
        COSIGN_EXPERIMENTAL: "1"
      run: |
        cosign attest-blob --predicate provenance.json --type slsaprovenance --yes sbom.json
        cosign sign-blob --yes --output-signature deployment.sig DuRiCore/deployment/deployment_integrity.py
    
    - name: Verify signatures
      env:
        COSIGN_EXPERIMENTAL: "1"
      run: |
        cosign verify-blob --signature deployment.sig DuRiCore/deployment/deployment_integrity.py
    
    - name: Test deployment integrity (CI 환경)
      run: |
        python3 -c "
        from DuRiCore.deployment.deployment_integrity import deployment_integrity
        integrity = deployment_integrity.verify_integrity()
        print(f'✅ 무결성 검증: {integrity[\"status\"]}')
        print(f'검증 결과: {integrity[\"summary\"]}')
        
        if not integrity['integrity_verified']:
            print(f'❌ 무결성 검증 실패: {integrity[\"summary\"]}')
            if integrity.get('modified_files'):
                print(f'수정된 파일: {integrity[\"modified_files\"]}')
            if integrity.get('missing_files'):
                print(f'누락된 파일: {integrity[\"missing_files\"]}')
            exit(1)
        "
    
    - name: Upload integrity artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-integrity
        path: |
          DuRiCore/deployment/deployment_metadata.json
          DuRiCore/deployment/checksums.json
          sbom.json
          provenance.json
          deployment.sig

  property-based-testing:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install pytest hypothesis
    
    - name: Run property-based tests
      run: |
        pytest tests/property_based_test.py -v
    
    - name: Chaos testing
      run: |
        python3 -c "
        import os
        import tempfile
        from DuRiCore.atomic_file_manager import AtomicFileManager
        
        # 로그 폴더 권한 변경 테스트
        log_dir = './logs'
        os.makedirs(log_dir, exist_ok=True)
        
        # 읽기 전용으로 변경
        os.chmod(log_dir, 0o444)
        
        try:
            manager = AtomicFileManager('/tmp/chaos_test.json')
            result = manager.atomic_write({'test': 'chaos'})
            print(f'읽기 전용 환경에서 결과: {result}')
        except Exception as e:
            print(f'예상된 오류: {e}')
        finally:
            # 권한 복원
            os.chmod(log_dir, 0o755)
        
        print('✅ Chaos testing 완료')
        "

  deployment-verification:
    runs-on: ubuntu-latest
    needs: [security-scan, test-suite, integrity-verification]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Download integrity artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-integrity
        path: .
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Verify deployment integrity (runtime)
      run: |
        python3 -c "
        from DuRiCore.deployment.deployment_integrity import deployment_integrity
        r = deployment_integrity.verify_integrity()
        print(f'배포 무결성: {r[\"status\"]}')
        print(f'검증 결과: {r[\"summary\"]}')
        
        if not r['integrity_verified']:
            print(f'❌ 무결성 검증 실패: {r[\"summary\"]}')
            if r.get('modified_files'):
                print(f'수정된 파일: {r[\"modified_files\"]}')
            if r.get('missing_files'):
                print(f'누락된 파일: {r[\"missing_files\"]}')
            exit(1)
        "
    
    - name: Test canary check endpoint
      run: |
        python3 -c "
        from DuRiCore.health.canary_endpoint import canary_check
        result = canary_check()
        print(f'카나리 체크: {result.canary_ok}')
        print(f'권장사항: {result.recommendation}')
        if result.failure_reasons:
            print(f'실패 이유: {result.failure_reasons}')
        if result.integrity.modified_files:
            print(f'수정된 파일: {result.integrity.modified_files}')
        if result.integrity.missing_files:
            print(f'누락된 파일: {result.integrity.missing_files}')
        exit(0 if result.canary_ok else 1)
        "
