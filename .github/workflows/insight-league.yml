name: insight-league

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'insight/**'
      - 'samplesets/**'
      - 'baselines/**'
      - '.github/workflows/insight-league.yml'
  workflow_dispatch: {}
  # schedule:
  #   - cron: "0 3 * * *"  # UTC 03:00 daily (옵션)

jobs:
  league-and-regress:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install deps
        run: |
          python -m pip install -U pip pytest pyyaml

      # 데모용: outputs가 없으면 sampleset 내 candidates로 평가
      # 실제로는 외부 JSONL 업로드/생성 후 --outputs 로 주입
      - name: Run league
        run: |
          python -m insight.cli league \
            --set samplesets/basic.yaml \
            --out-json league.json \
            --out-md league.md \
            --run-name "pr-${{ github.event.pull_request.number || 'manual' }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: insight-league
          path: |
            league.json
            league.md
          retention-days: 30

      - name: Run regression vs baseline (if exists)
        id: reg
        continue-on-error: true
        run: |
          if [ -f baselines/league-baseline.json ]; then
            python -m insight.cli regress \
              --baseline baselines/league-baseline.json \
              --current league.json \
              --out-md regression.md \
              --threshold-overall 0.005 \
              --threshold-group 0.010 \
              --fail-on-drop
          else
            echo "No baseline found; skipping regression" > regression.md
          fi

      - name: Upload regression artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: insight-regression
          path: regression.md
          retention-days: 30

      - name: Comment PR with league/regression summary
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const esc = (s) => String(s).replace(/[`$\\\[\]\(\)]/g, m => ({'`':'\\`','$':'\\$','\\':'\\\\','[':'\\[',']':'\\]','(':'\\(',')':'\\)'}[m]));
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            let league = {};
            try { league = JSON.parse(fs.readFileSync('league.json','utf8')); } catch {}
            let regMd = '';
            try { regMd = fs.readFileSync('regression.md','utf8'); } catch {}

            const o = league.overall || {avg_composite:0,min:0,max:0,std:0};
            const groupLines = (league.by_group||[]).map(g =>
              `| \`${g.group}\` | ${g.count} | \`${g.avg_composite.toFixed(3)}\` |`).join('\n');

            const body = [
              '## 🏟️ Insight League & Regression',
              '',
              '**League (current):**',
              `- Avg: \`${(o.avg_composite ?? 0).toFixed(3)}\`  •  Min: \`${(o.min ?? 0).toFixed(3)}\`  •  Max: \`${(o.max ?? 0).toFixed(3)}\`  •  Std: \`${(o.std ?? 0).toFixed(3)}\``,
              '',
              '### Group Averages',
              '',
              '| Group | N | Avg |',
              '|---|---:|---:|',
              groupLines || '| _ | 0 | `0.000` |',
              '',
              '### Regression Summary',
              '',
              esc(regMd || '_no regression available_'),
              '',
              `📁 Artifacts: [League & Regression](${runUrl})`,
            ].join('\n');

            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner, repo: context.repo.repo,
              issue_number: context.issue.number, per_page: 100
            });
            const prev = comments.find(c => c.user.type==='Bot' && /Insight League & Regression/.test(c.body||''));
            if (prev) {
              await github.rest.issues.updateComment({ owner: context.repo.owner, repo: context.repo.repo, comment_id: prev.id, body });
            } else {
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, body });
            }

      # 회귀 실패 시 잡을 실패로 처리 (코멘트는 이미 남김)
      - name: Fail job if regression failed
        if: steps.reg.outcome == 'failure'
        run: |
          echo "Regression failed (threshold exceeded). Failing job."
          exit 2
